"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError


def lazy_import():
    from Avalara.SDK.model.Avatax.V2.tax_rule_product_detail_model import TaxRuleProductDetailModel
    globals()['TaxRuleProductDetailModel'] = TaxRuleProductDetailModel


class TaxRuleModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('tax_rule_type_id',): {
            'RATERULE': "RateRule",
            'RATEOVERRIDERULE': "RateOverrideRule",
            'BASERULE': "BaseRule",
            'EXEMPTENTITYRULE': "ExemptEntityRule",
            'PRODUCTTAXABILITYRULE': "ProductTaxabilityRule",
            'NEXUSRULE': "NexusRule",
            'RATECAPRULE': "RateCapRule",
            'TAXOVERRIDERULE': "TaxOverrideRule",
            'FEERULE': "FeeRule",
            'OTHERRULE': "OtherRule",
        },
        ('juris_type_id',): {
            'STA': "STA",
            'CTY': "CTY",
            'CIT': "CIT",
            'STJ': "STJ",
            'CNT': "CNT",
        },
        ('jurisdiction_type_id',): {
            'COUNTRY': "Country",
            'STATE': "State",
            'COUNTY': "County",
            'CITY': "City",
            'SPECIAL': "Special",
        },
        ('tax_type_id',): {
            'E': "E",
            'LODGING': "Lodging",
            'BOTTLE': "Bottle",
            'RENTTOOWN': "RentToOwn",
            'BIKETAX': "BikeTax",
            'LANDEDCOST': "LandedCost",
            'CHECKOUTBAG': "CheckoutBag",
            'ALCOHOL': "Alcohol",
            'AMUSEMENT': "Amusement",
            'HOSPITALITY': "Hospitality",
            'RENTALLEASING': "RentalLeasing",
            'GROSSRECEIPTS': "GrossReceipts",
            'MATTRESS': "Mattress",
            'LUMBER': "Lumber",
            'PAINT': "Paint",
            'TIRES': "Tires",
            'EI': "EI",
            'ALL': "All",
            'BOTHSALESANDUSETAX': "BothSalesAndUseTax",
            'CONSUMERUSETAX': "ConsumerUseTax",
            'CONSUMERSUSEANDSELLERSUSETAX': "ConsumersUseAndSellersUseTax",
            'CONSUMERUSEANDSALESTAX': "ConsumerUseAndSalesTax",
            'FEE': "Fee",
            'VATINPUTTAX': "VATInputTax",
            'LIGHTBULBS': "LightBulbs",
            'MEALS': "Meals",
            'VATNONRECOVERABLEINPUTTAX': "VATNonrecoverableInputTax",
            'VATOUTPUTTAX': "VATOutputTax",
            'PIF': "PIF",
            'RENTAL': "Rental",
            'SALESTAX': "SalesTax",
            'USETAX': "UseTax",
            'EWASTE': "EWaste",
            'BATTERIES': "Batteries",
        },
        ('rate_type_id',): {
            'REDUCEDA': "ReducedA",
            'REDUCEDB': "ReducedB",
            'FOOD': "Food",
            'GENERAL': "General",
            'INCREASEDSTANDARD': "IncreasedStandard",
            'LINENRENTAL': "LinenRental",
            'MEDICAL': "Medical",
            'CONSTRUCTION': "Construction",
            'PARKING': "Parking",
            'SUPERREDUCED': "SuperReduced",
            'REDUCEDR': "ReducedR",
            'STANDARD': "Standard",
            'LEASING': "Leasing",
            'LEASINGLOW': "LeasingLow",
            'SERVICES': "Services",
            'ZERO': "Zero",
        },
        ('sourcing',): {
            'MIXED': "Mixed",
            'DESTINATION': "Destination",
            'ORIGIN': "Origin",
        },
    }

    validations = {
        ('juris_code',): {
            'max_length': 10,
            'min_length': 0,
        },
        ('tax_code',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('state_fips',): {
            'max_length': 2,
            'min_length': 0,
        },
        ('juris_name',): {
            'max_length': 200,
            'min_length': 0,
        },
        ('customer_usage_type',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('entity_use_code',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('options',): {
            'max_length': 100,
            'min_length': 0,
        },
        ('description',): {
            'max_length': 255,
            'min_length': 0,
        },
        ('county_fips',): {
            'max_length': 3,
            'min_length': 0,
        },
        ('non_passthrough_expression',): {
            'max_length': 500,
            'min_length': 0,
        },
        ('currency_code',): {
            'max_length': 3,
            'min_length': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (int,),  # noqa: E501
            'juris_code': (str,),  # noqa: E501
            'tax_rule_type_id': (str,),  # noqa: E501
            'country': (str,),  # noqa: E501
            'company_id': (int,),  # noqa: E501
            'tax_code_id': (int,),  # noqa: E501
            'tax_code': (str,),  # noqa: E501
            'state_fips': (str,),  # noqa: E501
            'juris_name': (str,),  # noqa: E501
            'juris_type_id': (str,),  # noqa: E501
            'jurisdiction_type_id': (str,),  # noqa: E501
            'customer_usage_type': (str,),  # noqa: E501
            'entity_use_code': (str,),  # noqa: E501
            'tax_type_id': (str,),  # noqa: E501
            'tax_type_code': (str,),  # noqa: E501
            'tax_rule_product_detail': ([TaxRuleProductDetailModel],),  # noqa: E501
            'rate_type_id': (str,),  # noqa: E501
            'rate_type_code': (str,),  # noqa: E501
            'is_all_juris': (bool,),  # noqa: E501
            'value': (float,),  # noqa: E501
            'cap': (float,),  # noqa: E501
            'threshold': (float,),  # noqa: E501
            'options': (str,),  # noqa: E501
            'effective_date': (date,),  # noqa: E501
            'end_date': (date,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'county_fips': (str,),  # noqa: E501
            'is_st_pro': (bool,),  # noqa: E501
            'region': (str,),  # noqa: E501
            'sourcing': (str,),  # noqa: E501
            'tax_type_group': (str,),  # noqa: E501
            'tax_sub_type': (str,),  # noqa: E501
            'non_passthrough_expression': (str,),  # noqa: E501
            'currency_code': (str,),  # noqa: E501
            'preferred_program_id': (int,),  # noqa: E501
            'uom_id': (int,),  # noqa: E501
            'created_date': (datetime,),  # noqa: E501
            'created_user_id': (int,),  # noqa: E501
            'modified_date': (datetime,),  # noqa: E501
            'modified_user_id': (int,),  # noqa: E501
            'unit_of_basis': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'juris_code': 'jurisCode',  # noqa: E501
        'tax_rule_type_id': 'taxRuleTypeId',  # noqa: E501
        'country': 'country',  # noqa: E501
        'company_id': 'companyId',  # noqa: E501
        'tax_code_id': 'taxCodeId',  # noqa: E501
        'tax_code': 'taxCode',  # noqa: E501
        'state_fips': 'stateFIPS',  # noqa: E501
        'juris_name': 'jurisName',  # noqa: E501
        'juris_type_id': 'jurisTypeId',  # noqa: E501
        'jurisdiction_type_id': 'jurisdictionTypeId',  # noqa: E501
        'customer_usage_type': 'customerUsageType',  # noqa: E501
        'entity_use_code': 'entityUseCode',  # noqa: E501
        'tax_type_id': 'taxTypeId',  # noqa: E501
        'tax_type_code': 'taxTypeCode',  # noqa: E501
        'tax_rule_product_detail': 'taxRuleProductDetail',  # noqa: E501
        'rate_type_id': 'rateTypeId',  # noqa: E501
        'rate_type_code': 'rateTypeCode',  # noqa: E501
        'is_all_juris': 'isAllJuris',  # noqa: E501
        'value': 'value',  # noqa: E501
        'cap': 'cap',  # noqa: E501
        'threshold': 'threshold',  # noqa: E501
        'options': 'options',  # noqa: E501
        'effective_date': 'effectiveDate',  # noqa: E501
        'end_date': 'endDate',  # noqa: E501
        'description': 'description',  # noqa: E501
        'county_fips': 'countyFIPS',  # noqa: E501
        'is_st_pro': 'isSTPro',  # noqa: E501
        'region': 'region',  # noqa: E501
        'sourcing': 'sourcing',  # noqa: E501
        'tax_type_group': 'taxTypeGroup',  # noqa: E501
        'tax_sub_type': 'taxSubType',  # noqa: E501
        'non_passthrough_expression': 'nonPassthroughExpression',  # noqa: E501
        'currency_code': 'currencyCode',  # noqa: E501
        'preferred_program_id': 'preferredProgramId',  # noqa: E501
        'uom_id': 'uomId',  # noqa: E501
        'created_date': 'createdDate',  # noqa: E501
        'created_user_id': 'createdUserId',  # noqa: E501
        'modified_date': 'modifiedDate',  # noqa: E501
        'modified_user_id': 'modifiedUserId',  # noqa: E501
        'unit_of_basis': 'unitOfBasis',  # noqa: E501
    }

    read_only_vars = {
        'created_date',  # noqa: E501
        'created_user_id',  # noqa: E501
        'modified_date',  # noqa: E501
        'modified_user_id',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, id, juris_code, tax_rule_type_id, country, *args, **kwargs):  # noqa: E501
        """TaxRuleModel - a model defined in OpenAPI

        Args:
            id (int): The unique ID number of this tax rule.
            juris_code (str): The code of the jurisdiction to which this tax rule applies.                Custom tax rules can apply to a specific jurisdiction or to all jurisdictions.  To select a jurisdiction, use the  [ListJurisdictions API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictions/)  or the [ListJurisdictionsByAddress API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictionsByAddress/).                Once you have determined which jurisdiction you wish to assign to the tax rule, you should fill in the `jurisName`, `jurisCode`, and  `jurisdictionTypeId` fields using the information you retrieved from the API above.
            tax_rule_type_id (str): This type value determines the behavior of the tax rule.                You can specify that this rule controls the product's taxability or exempt / nontaxable status, the product's rate  (for example, if you have been granted an official ruling for your product's rate that differs from the official rate),  or other types of behavior.
            country (str): Name or ISO 3166 code identifying the country where this rule will apply.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            company_id (int): The unique ID number of the company that owns this tax rule.. [optional]  # noqa: E501
            tax_code_id (int): For rules that apply to a specific tax code only, this specifies which tax code is affected by this rule.                You can choose to specify a tax code either by passing its unique ID number in the `taxCodeId` field or  by passing its alphanumeric code in the `taxCode` field.  To search for the appropriate tax code for your  custom rule, use the `ListTaxCodes` API.                The `RateOverrideRule`, `BaseRule`, and `ExemptEntityRule` rule types can be applied to all tax codes.  To  make a rule that applies to all tax codes, leave both fields blank.                The `ProductTaxabilityRule` rule must be associated with a tax code.  If you attempt to create a product taxability rule  without a tax code, you will get an error message.. [optional]  # noqa: E501
            tax_code (str): For rules that apply to a specific tax code only, this specifies which tax code is affected by this rule.                You can choose to specify a tax code either by passing its unique ID number in the `taxCodeId` field or  by passing its alphanumeric code in the `taxCode` field.  To search for the appropriate tax code for your  custom rule, use the `ListTaxCodes` API.                The `RateOverrideRule`, `BaseRule`, and `ExemptEntityRule` rule types can be applied to all tax codes.  To  make a rule that applies to all tax codes, leave both fields blank.                The `ProductTaxabilityRule` rule must be associated with a tax code.  If you attempt to create a product taxability rule  without a tax code, you will get an error message.. [optional]  # noqa: E501
            state_fips (str): For U.S. tax rules, this is the state's Federal Information Processing Standard (FIPS) code.                This field is required for rules that apply to specific jurisdictions in the United States.  It is not required  if you set the `isAllJuris` flag to true.. [optional]  # noqa: E501
            juris_name (str): The name of the jurisdiction to which this tax rule applies.                Custom tax rules can apply to a specific jurisdiction or to all jurisdictions.  To select a jurisdiction, use the  [ListJurisdictions API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictions/)  or the [ListJurisdictionsByAddress API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictionsByAddress/).  To set a rule that applies to all jurisdictions of a specific type, see `isAllJuris`.                Once you have determined which jurisdiction you wish to assign to the tax rule, you should fill in the `jurisName`, `jurisCode`, and  `jurisdictionTypeId` fields using the information you retrieved from the API above.. [optional]  # noqa: E501
            juris_type_id (str): DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Please use `jurisdictionTypeId` instead.  . [optional]  # noqa: E501
            jurisdiction_type_id (str): The type of the jurisdiction to which this tax rule applies.                Custom tax rules can apply to a specific jurisdiction or to all jurisdictions.  To select a jurisdiction, use the  [ListJurisdictions API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictions/)  or the [ListJurisdictionsByAddress API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictionsByAddress/).                Once you have determined which jurisdiction you wish to assign to the tax rule, you should fill in the `jurisName`, `jurisCode`, and  `jurisdictionTypeId` fields using the information you retrieved from the API above.                To make a custom tax rule for US or Canada that applies to all jurisdictions of a specific type, see the `isAllJuris`  field for more information.. [optional]  # noqa: E501
            customer_usage_type (str): DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use `entityUseCode` instead.  . [optional]  # noqa: E501
            entity_use_code (str): The entity use code to which this rule applies.                You can create custom `entityUseCode` values with specific behavior using this API, or you can change  the behavior of Avalara's system-defined entity use codes.                For a full list of Avalara-defined entity use codes, see the [ListEntityUseCodes API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListEntityUseCodes/).. [optional]  # noqa: E501
            tax_type_id (str): DEPRECATED - Date: 09/30/2021, Version: 21.9.0, Message: Please use `taxTypeCode` instead.  Some tax type groups contain multiple different types of tax.  To create a rule that affects only one  type of tax within a tax type group, set this value to the code matching the specific tax type within  that group.  The custom tax rule will then only apply to taxes calculated for that specific type.                For rules that affect all tax types, use the value `A` to match `All` tax types within that group.. [optional]  # noqa: E501
            tax_type_code (str): Indicates the code of the tax type that applies to this rule. Use /avatax/definitions/taxtypes endpoint to retrieve the list of tax types applicable for your company.. [optional]  # noqa: E501
            tax_rule_product_detail ([TaxRuleProductDetailModel]): TaxRule Product Detail indicates the HSCode(s) to which the tax rule applies.. [optional]  # noqa: E501
            rate_type_id (str): DEPRECATED - Date: 8/27/2018, Version: 18.9, Message: Please use `rateTypeCode`, `taxTypeGroup` and `subTaxType` instead.  . [optional]  # noqa: E501
            rate_type_code (str): Indicates the code of the rate type that applies to this rule.  Use [ListRateTypesByCountry](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListRateTypesByCountry/) API for a full list of rate type codes.                If you specify a value in the rateTypeCode field, this rule will cause tax lines that are affected by the rule  to change to a different rate type code.. [optional]  # noqa: E501
            is_all_juris (bool): Allows you to make tax rules apply to lower jurisdictions.  This feature is only available in the United States and Canada.                * In the United States, this value can be used for rules written at the `State` jurisdictional level.  If set to `true`, this rule will at the state level, county level, city level, and special jurisdiction level.  * In Canada, this value can be used for rules written at the `Country` or `State` jurisdictional levels.  If set to `true`, this rule will at all lower jurisdictional levels.                For any other use case, this value must be `false`.. [optional]  # noqa: E501
            value (float): This field has different behavior based on the type of the tax rule.                * For a product taxability rule, this value is either 1 or 0, indicating taxable or non-taxable.  * For a rate override rule, this value is the corrected rate stored as a decimal, for example, a rate of 5% would be stored as 0.05 decimal.  If you use the special value of 1.0, only the cap and threshold values will be applied and the rate will be left alone.. [optional]  # noqa: E501
            cap (float): The maximum cap for the price of this item according to this rule.  Any amount above this cap will not be subject to this rule.                For example, if you must pay 5% of a product's value up to a maximum value of $1000, you would set the `cap` to `1000.00` and the `value` to `0.05`.. [optional]  # noqa: E501
            threshold (float): The per-unit threshold that must be met before this rule applies.                For example, if your product is nontaxable unless it is above $100 per product, you would set the `threshold` value to `100`.  In this case, the rate  for the rule would apply to the entire amount above $100.                You can also create rules that make the entire product taxable if it exceeds a threshold, but is nontaxable  if it is below the threshold.  To choose this, set the `options` field to the value `TaxAll`.. [optional]  # noqa: E501
            options (str): Supports custom options for your tax rule.                Supported options include:  * `TaxAll` - This value indicates that the entire amount of the line becomes taxable when the line amount exceeds the `threshold`.. [optional]  # noqa: E501
            effective_date (date): The first date at which this rule applies.  If `null`, this rule will apply to all dates prior to the end date.. [optional]  # noqa: E501
            end_date (date): The last date for which this rule applies.  If `null`, this rule will apply to all dates after the effective date.. [optional]  # noqa: E501
            description (str): A friendly name for this tax rule.. [optional]  # noqa: E501
            county_fips (str): For U.S. tax rules, this is the county's Federal Information Processing Standard (FIPS) code.                This field is required for rules that apply to specific jurisdictions in the United States.  It is not required  if you set the `isAllJuris` flag to true.. [optional]  # noqa: E501
            is_st_pro (bool): DEPRECATED - Date: 8/27/2018, Version: 18.9, Message: This field is no longer required.  . [optional]  # noqa: E501
            region (str): Name or ISO 3166 code identifying the region where this rule will apply.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.  NOTE: Region is required for US and not required for non-US countries because the user may be either creating a Country-level or Region-level rule.. [optional]  # noqa: E501
            sourcing (str): The sourcing types to which this rule applies.. [optional]  # noqa: E501
            tax_type_group (str): This field has different behavior based on the type of rule.                * For a product taxability rule, if the rule applies to an item, this value will override the tax type group of the original product.  * For other rules, this value determines what tax type groups will be affected by the rule.                Refer to `ListTaxTypeGroups` for a list of tax type groups supported by AvaTax.. [optional]  # noqa: E501
            tax_sub_type (str): This field has different behavior based on the type of rule.                * For a product taxability rule, if the rule applies to an item, this value will override the tax sub type of the original product.  * For other rules, this value determines what tax sub types will be affected by the rule.                Refer to `ListTaxSubtypes` for a list of tax sub types supported by AvaTax.. [optional]  # noqa: E501
            non_passthrough_expression (str): Reserved for Avalara internal usage.  Leave this field null.. [optional]  # noqa: E501
            currency_code (str): The currency code to use for this rule.                For a list of currencies supported by AvaTax, use the [ListCurrencies API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListCurrencies/).. [optional]  # noqa: E501
            preferred_program_id (int): Reserved for Avalara internal usage.  Leave this field null.. [optional]  # noqa: E501
            uom_id (int): For tax rules that are calculated using units of measurement, this indicates the unit of measurement type  used to calculate the amounts for this rule.                For a list of units of measurement, use the [ListUnitsOfMeasurement API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListUnitOfMeasurement/).. [optional]  # noqa: E501
            created_date (datetime): The date when this record was created.. [optional]  # noqa: E501
            created_user_id (int): The User ID of the user who created this record.. [optional]  # noqa: E501
            modified_date (datetime): The date/time when this record was last modified.. [optional]  # noqa: E501
            modified_user_id (int): The user ID of the user who last modified this record.. [optional]  # noqa: E501
            unit_of_basis (str): The UnitOfBasis for the TaxRule. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.juris_code = juris_code
        self.tax_rule_type_id = tax_rule_type_id
        self.country = country
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, juris_code, tax_rule_type_id, country, *args, **kwargs):  # noqa: E501
        """TaxRuleModel - a model defined in OpenAPI

        Args:
            id (int): The unique ID number of this tax rule.
            juris_code (str): The code of the jurisdiction to which this tax rule applies.                Custom tax rules can apply to a specific jurisdiction or to all jurisdictions.  To select a jurisdiction, use the  [ListJurisdictions API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictions/)  or the [ListJurisdictionsByAddress API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictionsByAddress/).                Once you have determined which jurisdiction you wish to assign to the tax rule, you should fill in the `jurisName`, `jurisCode`, and  `jurisdictionTypeId` fields using the information you retrieved from the API above.
            tax_rule_type_id (str): This type value determines the behavior of the tax rule.                You can specify that this rule controls the product's taxability or exempt / nontaxable status, the product's rate  (for example, if you have been granted an official ruling for your product's rate that differs from the official rate),  or other types of behavior.
            country (str): Name or ISO 3166 code identifying the country where this rule will apply.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            company_id (int): The unique ID number of the company that owns this tax rule.. [optional]  # noqa: E501
            tax_code_id (int): For rules that apply to a specific tax code only, this specifies which tax code is affected by this rule.                You can choose to specify a tax code either by passing its unique ID number in the `taxCodeId` field or  by passing its alphanumeric code in the `taxCode` field.  To search for the appropriate tax code for your  custom rule, use the `ListTaxCodes` API.                The `RateOverrideRule`, `BaseRule`, and `ExemptEntityRule` rule types can be applied to all tax codes.  To  make a rule that applies to all tax codes, leave both fields blank.                The `ProductTaxabilityRule` rule must be associated with a tax code.  If you attempt to create a product taxability rule  without a tax code, you will get an error message.. [optional]  # noqa: E501
            tax_code (str): For rules that apply to a specific tax code only, this specifies which tax code is affected by this rule.                You can choose to specify a tax code either by passing its unique ID number in the `taxCodeId` field or  by passing its alphanumeric code in the `taxCode` field.  To search for the appropriate tax code for your  custom rule, use the `ListTaxCodes` API.                The `RateOverrideRule`, `BaseRule`, and `ExemptEntityRule` rule types can be applied to all tax codes.  To  make a rule that applies to all tax codes, leave both fields blank.                The `ProductTaxabilityRule` rule must be associated with a tax code.  If you attempt to create a product taxability rule  without a tax code, you will get an error message.. [optional]  # noqa: E501
            state_fips (str): For U.S. tax rules, this is the state's Federal Information Processing Standard (FIPS) code.                This field is required for rules that apply to specific jurisdictions in the United States.  It is not required  if you set the `isAllJuris` flag to true.. [optional]  # noqa: E501
            juris_name (str): The name of the jurisdiction to which this tax rule applies.                Custom tax rules can apply to a specific jurisdiction or to all jurisdictions.  To select a jurisdiction, use the  [ListJurisdictions API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictions/)  or the [ListJurisdictionsByAddress API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictionsByAddress/).  To set a rule that applies to all jurisdictions of a specific type, see `isAllJuris`.                Once you have determined which jurisdiction you wish to assign to the tax rule, you should fill in the `jurisName`, `jurisCode`, and  `jurisdictionTypeId` fields using the information you retrieved from the API above.. [optional]  # noqa: E501
            juris_type_id (str): DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Please use `jurisdictionTypeId` instead.  . [optional]  # noqa: E501
            jurisdiction_type_id (str): The type of the jurisdiction to which this tax rule applies.                Custom tax rules can apply to a specific jurisdiction or to all jurisdictions.  To select a jurisdiction, use the  [ListJurisdictions API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictions/)  or the [ListJurisdictionsByAddress API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictionsByAddress/).                Once you have determined which jurisdiction you wish to assign to the tax rule, you should fill in the `jurisName`, `jurisCode`, and  `jurisdictionTypeId` fields using the information you retrieved from the API above.                To make a custom tax rule for US or Canada that applies to all jurisdictions of a specific type, see the `isAllJuris`  field for more information.. [optional]  # noqa: E501
            customer_usage_type (str): DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use `entityUseCode` instead.  . [optional]  # noqa: E501
            entity_use_code (str): The entity use code to which this rule applies.                You can create custom `entityUseCode` values with specific behavior using this API, or you can change  the behavior of Avalara's system-defined entity use codes.                For a full list of Avalara-defined entity use codes, see the [ListEntityUseCodes API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListEntityUseCodes/).. [optional]  # noqa: E501
            tax_type_id (str): DEPRECATED - Date: 09/30/2021, Version: 21.9.0, Message: Please use `taxTypeCode` instead.  Some tax type groups contain multiple different types of tax.  To create a rule that affects only one  type of tax within a tax type group, set this value to the code matching the specific tax type within  that group.  The custom tax rule will then only apply to taxes calculated for that specific type.                For rules that affect all tax types, use the value `A` to match `All` tax types within that group.. [optional]  # noqa: E501
            tax_type_code (str): Indicates the code of the tax type that applies to this rule. Use /avatax/definitions/taxtypes endpoint to retrieve the list of tax types applicable for your company.. [optional]  # noqa: E501
            tax_rule_product_detail ([TaxRuleProductDetailModel]): TaxRule Product Detail indicates the HSCode(s) to which the tax rule applies.. [optional]  # noqa: E501
            rate_type_id (str): DEPRECATED - Date: 8/27/2018, Version: 18.9, Message: Please use `rateTypeCode`, `taxTypeGroup` and `subTaxType` instead.  . [optional]  # noqa: E501
            rate_type_code (str): Indicates the code of the rate type that applies to this rule.  Use [ListRateTypesByCountry](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListRateTypesByCountry/) API for a full list of rate type codes.                If you specify a value in the rateTypeCode field, this rule will cause tax lines that are affected by the rule  to change to a different rate type code.. [optional]  # noqa: E501
            is_all_juris (bool): Allows you to make tax rules apply to lower jurisdictions.  This feature is only available in the United States and Canada.                * In the United States, this value can be used for rules written at the `State` jurisdictional level.  If set to `true`, this rule will at the state level, county level, city level, and special jurisdiction level.  * In Canada, this value can be used for rules written at the `Country` or `State` jurisdictional levels.  If set to `true`, this rule will at all lower jurisdictional levels.                For any other use case, this value must be `false`.. [optional]  # noqa: E501
            value (float): This field has different behavior based on the type of the tax rule.                * For a product taxability rule, this value is either 1 or 0, indicating taxable or non-taxable.  * For a rate override rule, this value is the corrected rate stored as a decimal, for example, a rate of 5% would be stored as 0.05 decimal.  If you use the special value of 1.0, only the cap and threshold values will be applied and the rate will be left alone.. [optional]  # noqa: E501
            cap (float): The maximum cap for the price of this item according to this rule.  Any amount above this cap will not be subject to this rule.                For example, if you must pay 5% of a product's value up to a maximum value of $1000, you would set the `cap` to `1000.00` and the `value` to `0.05`.. [optional]  # noqa: E501
            threshold (float): The per-unit threshold that must be met before this rule applies.                For example, if your product is nontaxable unless it is above $100 per product, you would set the `threshold` value to `100`.  In this case, the rate  for the rule would apply to the entire amount above $100.                You can also create rules that make the entire product taxable if it exceeds a threshold, but is nontaxable  if it is below the threshold.  To choose this, set the `options` field to the value `TaxAll`.. [optional]  # noqa: E501
            options (str): Supports custom options for your tax rule.                Supported options include:  * `TaxAll` - This value indicates that the entire amount of the line becomes taxable when the line amount exceeds the `threshold`.. [optional]  # noqa: E501
            effective_date (date): The first date at which this rule applies.  If `null`, this rule will apply to all dates prior to the end date.. [optional]  # noqa: E501
            end_date (date): The last date for which this rule applies.  If `null`, this rule will apply to all dates after the effective date.. [optional]  # noqa: E501
            description (str): A friendly name for this tax rule.. [optional]  # noqa: E501
            county_fips (str): For U.S. tax rules, this is the county's Federal Information Processing Standard (FIPS) code.                This field is required for rules that apply to specific jurisdictions in the United States.  It is not required  if you set the `isAllJuris` flag to true.. [optional]  # noqa: E501
            is_st_pro (bool): DEPRECATED - Date: 8/27/2018, Version: 18.9, Message: This field is no longer required.  . [optional]  # noqa: E501
            region (str): Name or ISO 3166 code identifying the region where this rule will apply.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.  NOTE: Region is required for US and not required for non-US countries because the user may be either creating a Country-level or Region-level rule.. [optional]  # noqa: E501
            sourcing (str): The sourcing types to which this rule applies.. [optional]  # noqa: E501
            tax_type_group (str): This field has different behavior based on the type of rule.                * For a product taxability rule, if the rule applies to an item, this value will override the tax type group of the original product.  * For other rules, this value determines what tax type groups will be affected by the rule.                Refer to `ListTaxTypeGroups` for a list of tax type groups supported by AvaTax.. [optional]  # noqa: E501
            tax_sub_type (str): This field has different behavior based on the type of rule.                * For a product taxability rule, if the rule applies to an item, this value will override the tax sub type of the original product.  * For other rules, this value determines what tax sub types will be affected by the rule.                Refer to `ListTaxSubtypes` for a list of tax sub types supported by AvaTax.. [optional]  # noqa: E501
            non_passthrough_expression (str): Reserved for Avalara internal usage.  Leave this field null.. [optional]  # noqa: E501
            currency_code (str): The currency code to use for this rule.                For a list of currencies supported by AvaTax, use the [ListCurrencies API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListCurrencies/).. [optional]  # noqa: E501
            preferred_program_id (int): Reserved for Avalara internal usage.  Leave this field null.. [optional]  # noqa: E501
            uom_id (int): For tax rules that are calculated using units of measurement, this indicates the unit of measurement type  used to calculate the amounts for this rule.                For a list of units of measurement, use the [ListUnitsOfMeasurement API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListUnitOfMeasurement/).. [optional]  # noqa: E501
            created_date (datetime): The date when this record was created.. [optional]  # noqa: E501
            created_user_id (int): The User ID of the user who created this record.. [optional]  # noqa: E501
            modified_date (datetime): The date/time when this record was last modified.. [optional]  # noqa: E501
            modified_user_id (int): The user ID of the user who last modified this record.. [optional]  # noqa: E501
            unit_of_basis (str): The UnitOfBasis for the TaxRule. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.juris_code = juris_code
        self.tax_rule_type_id = tax_rule_type_id
        self.country = country
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
