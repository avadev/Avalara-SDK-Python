"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError


def lazy_import():
    from Avalara.SDK.model.Avatax.V2.addresses_model import AddressesModel
    from Avalara.SDK.model.Avatax.V2.tax_override_model import TaxOverrideModel
    from Avalara.SDK.model.Avatax.V2.transaction_line_parameter_model import TransactionLineParameterModel
    from Avalara.SDK.model.Avatax.V2.transaction_line_user_defined_field_model import TransactionLineUserDefinedFieldModel
    globals()['AddressesModel'] = AddressesModel
    globals()['TaxOverrideModel'] = TaxOverrideModel
    globals()['TransactionLineParameterModel'] = TransactionLineParameterModel
    globals()['TransactionLineUserDefinedFieldModel'] = TransactionLineUserDefinedFieldModel


class LineItemModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('marketplace_liability_type',): {
            'MARKETPLACE': "Marketplace",
            'SELLER': "Seller",
        },
    }

    validations = {
        ('number',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('tax_code',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('customer_usage_type',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('entity_use_code',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('item_code',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('revenue_account',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('ref1',): {
            'max_length': 250,
            'min_length': 0,
        },
        ('ref2',): {
            'max_length': 250,
            'min_length': 0,
        },
        ('description',): {
            'max_length': 2096,
            'min_length': 0,
        },
        ('business_identification_no',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('hs_code',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('merchant_seller_identifier',): {
            'max_length': 100,
            'min_length': 0,
        },
        ('origination_document_id',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('origination_site',): {
            'max_length': 60,
            'min_length': 0,
        },
        ('category',): {
            'max_length': 4000,
            'min_length': 0,
        },
        ('summary',): {
            'max_length': 4000,
            'min_length': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'amount': (float,),  # noqa: E501
            'number': (str,),  # noqa: E501
            'quantity': (float,),  # noqa: E501
            'addresses': (AddressesModel,),  # noqa: E501
            'tax_code': (str,),  # noqa: E501
            'customer_usage_type': (str,),  # noqa: E501
            'entity_use_code': (str,),  # noqa: E501
            'item_code': (str,),  # noqa: E501
            'exemption_code': (str,),  # noqa: E501
            'discounted': (bool,),  # noqa: E501
            'tax_included': (bool,),  # noqa: E501
            'revenue_account': (str,),  # noqa: E501
            'ref1': (str,),  # noqa: E501
            'ref2': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'business_identification_no': (str,),  # noqa: E501
            'tax_override': (TaxOverrideModel,),  # noqa: E501
            'parameters': ([TransactionLineParameterModel],),  # noqa: E501
            'user_defined_fields': ([TransactionLineUserDefinedFieldModel],),  # noqa: E501
            'hs_code': (str,),  # noqa: E501
            'merchant_seller_id': (int,),  # noqa: E501
            'merchant_seller_identifier': (str,),  # noqa: E501
            'marketplace_liability_type': (str,),  # noqa: E501
            'origination_document_id': (str,),  # noqa: E501
            'origination_site': (str,),  # noqa: E501
            'category': (str,),  # noqa: E501
            'summary': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'amount': 'amount',  # noqa: E501
        'number': 'number',  # noqa: E501
        'quantity': 'quantity',  # noqa: E501
        'addresses': 'addresses',  # noqa: E501
        'tax_code': 'taxCode',  # noqa: E501
        'customer_usage_type': 'customerUsageType',  # noqa: E501
        'entity_use_code': 'entityUseCode',  # noqa: E501
        'item_code': 'itemCode',  # noqa: E501
        'exemption_code': 'exemptionCode',  # noqa: E501
        'discounted': 'discounted',  # noqa: E501
        'tax_included': 'taxIncluded',  # noqa: E501
        'revenue_account': 'revenueAccount',  # noqa: E501
        'ref1': 'ref1',  # noqa: E501
        'ref2': 'ref2',  # noqa: E501
        'description': 'description',  # noqa: E501
        'business_identification_no': 'businessIdentificationNo',  # noqa: E501
        'tax_override': 'taxOverride',  # noqa: E501
        'parameters': 'parameters',  # noqa: E501
        'user_defined_fields': 'userDefinedFields',  # noqa: E501
        'hs_code': 'hsCode',  # noqa: E501
        'merchant_seller_id': 'merchantSellerId',  # noqa: E501
        'merchant_seller_identifier': 'merchantSellerIdentifier',  # noqa: E501
        'marketplace_liability_type': 'marketplaceLiabilityType',  # noqa: E501
        'origination_document_id': 'originationDocumentId',  # noqa: E501
        'origination_site': 'originationSite',  # noqa: E501
        'category': 'category',  # noqa: E501
        'summary': 'summary',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, amount, *args, **kwargs):  # noqa: E501
        """LineItemModel - a model defined in OpenAPI

        Args:
            amount (float): Total amount for this line.  The amount represents the net currency value that changed hands from the customer (represented by the `customerCode` field) to the company (represented by the `companyCode`) field.                For sale transactions, this value must be positive.  It indicates the amount of money paid by the customer to the company.                For refund or return transactions, this value must be negative.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            number (str): The line number of this line within the document.  This can be any text that is useful to you, such as numeric line numbers, alphabetic line numbers, or other text.. [optional]  # noqa: E501
            quantity (float): Quantity of items in this line.  This quantity value should always be a positive value representing the quantity of product that changed hands, even when handling returns or refunds.                If not provided, or if set to zero, the quantity value is assumed to be one (1).. [optional]  # noqa: E501
            addresses (AddressesModel): [optional]  # noqa: E501
            tax_code (str): Tax Code - System or Custom Tax Code.                You can use your own tax code mapping or standard Avalara tax codes.  For a full list of tax codes, see `ListTaxCodes`.. [optional]  # noqa: E501
            customer_usage_type (str): DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use `entityUseCode` instead.  . [optional]  # noqa: E501
            entity_use_code (str): Entity Use Code - The client application customer or usage type.  This field allows you to designate a type of usage that  may make this transaction considered exempt by reason of exempt usage.                For a list of entity use codes, see the Definitions API `ListEntityUseCodes`.. [optional]  # noqa: E501
            item_code (str): Item Code (SKU).  If you provide an `itemCode` field, the AvaTax API will look up the item you created with the `CreateItems` API call  and use all the information available about that item for this transaction.. [optional]  # noqa: E501
            exemption_code (str): The customer Tax Id Number (tax_number) associated with a certificate - Sales tax calculation requests first determine if there is an applicable  ECMS entry available, and will utilize it for exemption processing. If no applicable ECMS entry is available, the AvaTax service  will determine if an Exemption Number field is populated or an Entity/Use Code is included in the sales tax calculation request,  and will perform exemption processing using either of those two options.  Note: This is same as 'exemptNo' in TransactionModel.. [optional]  # noqa: E501
            discounted (bool): True if the document discount should be applied to this line.  If this value is false, or not provided, discounts will not be  applied to this line even if they are specified on the root `discount` element.. [optional]  # noqa: E501
            tax_included (bool): Indicates whether the `amount` for this line already includes tax.                If this value is `true`, the final price of this line including tax will equal the value in `amount`.                If this value is `null` or `false`, the final price will equal `amount` plus whatever taxes apply to this line.. [optional]  # noqa: E501
            revenue_account (str): Revenue Account (Customer Defined Field).                This field is available for you to use to provide whatever information your implementation requires.  It does not affect tax calculation.. [optional]  # noqa: E501
            ref1 (str): Ref1 (Customer Defined Field)                This field is available for you to use to provide whatever information your implementation requires.  It does not affect tax calculation.. [optional]  # noqa: E501
            ref2 (str): Ref2 (Customer Defined Field)                This field is available for you to use to provide whatever information your implementation requires.  It does not affect tax calculation.. [optional]  # noqa: E501
            description (str): Item description.                For Streamlined Sales Tax (SST) customers, this field is required if an unmapped `itemCode` is used.. [optional]  # noqa: E501
            business_identification_no (str): VAT business identification number for the customer for this line item.  If you leave this field empty,  this line item will use whatever business identification number you provided at the transaction level.                If you specify a VAT business identification number for the customer in this transaction and you have also set up  a business identification number for your company during company setup, this transaction will be treated as a  business-to-business transaction for VAT purposes and it will be calculated according to VAT tax rules.. [optional]  # noqa: E501
            tax_override (TaxOverrideModel): [optional]  # noqa: E501
            parameters ([TransactionLineParameterModel]): Special parameters that apply to this line within this transaction.                To get a full list of available parameters, please use the `ListParameters` API.. [optional]  # noqa: E501
            user_defined_fields ([TransactionLineUserDefinedFieldModel]): Custom user fields/flex fields for this line.. [optional]  # noqa: E501
            hs_code (str): The Item code for Custom Duty / Global Import tax determination  Harmonized Tariff System code for this transaction.                For a list of harmonized tariff codes, see the Definitions API for harmonized tariff codes.. [optional]  # noqa: E501
            merchant_seller_id (int): DEPRECATED - Date: 04/15/2021, Version: 21.4, Message: Please use merchantSellerIdentifier instead.  ID of the merchant selling on the Marketplace. This field must be populated by Marketplace.. [optional]  # noqa: E501
            merchant_seller_identifier (str): ID of the merchant selling on the Marketplace. This field must be populated by Marketplace.. [optional]  # noqa: E501
            marketplace_liability_type (str): This field will identify who is remitting Marketplace or Seller. This field must be populated by Marketplace.. [optional]  # noqa: E501
            origination_document_id (str): The transaction's original ID in its origination system. [optional]  # noqa: E501
            origination_site (str): Synonym of Marketplace Origination. Name of the Marketplace where the transaction originated from.. [optional]  # noqa: E501
            category (str): Product category breadcrumbs. This is the full path to the category where item is included. Categories should be separated by “ > “.  Multiple category paths per item are accepted. In this case, category paths should be separated by “;”.. [optional]  # noqa: E501
            summary (str): A long description of the product.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.amount = amount
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, amount, *args, **kwargs):  # noqa: E501
        """LineItemModel - a model defined in OpenAPI

        Args:
            amount (float): Total amount for this line.  The amount represents the net currency value that changed hands from the customer (represented by the `customerCode` field) to the company (represented by the `companyCode`) field.                For sale transactions, this value must be positive.  It indicates the amount of money paid by the customer to the company.                For refund or return transactions, this value must be negative.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            number (str): The line number of this line within the document.  This can be any text that is useful to you, such as numeric line numbers, alphabetic line numbers, or other text.. [optional]  # noqa: E501
            quantity (float): Quantity of items in this line.  This quantity value should always be a positive value representing the quantity of product that changed hands, even when handling returns or refunds.                If not provided, or if set to zero, the quantity value is assumed to be one (1).. [optional]  # noqa: E501
            addresses (AddressesModel): [optional]  # noqa: E501
            tax_code (str): Tax Code - System or Custom Tax Code.                You can use your own tax code mapping or standard Avalara tax codes.  For a full list of tax codes, see `ListTaxCodes`.. [optional]  # noqa: E501
            customer_usage_type (str): DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use `entityUseCode` instead.  . [optional]  # noqa: E501
            entity_use_code (str): Entity Use Code - The client application customer or usage type.  This field allows you to designate a type of usage that  may make this transaction considered exempt by reason of exempt usage.                For a list of entity use codes, see the Definitions API `ListEntityUseCodes`.. [optional]  # noqa: E501
            item_code (str): Item Code (SKU).  If you provide an `itemCode` field, the AvaTax API will look up the item you created with the `CreateItems` API call  and use all the information available about that item for this transaction.. [optional]  # noqa: E501
            exemption_code (str): The customer Tax Id Number (tax_number) associated with a certificate - Sales tax calculation requests first determine if there is an applicable  ECMS entry available, and will utilize it for exemption processing. If no applicable ECMS entry is available, the AvaTax service  will determine if an Exemption Number field is populated or an Entity/Use Code is included in the sales tax calculation request,  and will perform exemption processing using either of those two options.  Note: This is same as 'exemptNo' in TransactionModel.. [optional]  # noqa: E501
            discounted (bool): True if the document discount should be applied to this line.  If this value is false, or not provided, discounts will not be  applied to this line even if they are specified on the root `discount` element.. [optional]  # noqa: E501
            tax_included (bool): Indicates whether the `amount` for this line already includes tax.                If this value is `true`, the final price of this line including tax will equal the value in `amount`.                If this value is `null` or `false`, the final price will equal `amount` plus whatever taxes apply to this line.. [optional]  # noqa: E501
            revenue_account (str): Revenue Account (Customer Defined Field).                This field is available for you to use to provide whatever information your implementation requires.  It does not affect tax calculation.. [optional]  # noqa: E501
            ref1 (str): Ref1 (Customer Defined Field)                This field is available for you to use to provide whatever information your implementation requires.  It does not affect tax calculation.. [optional]  # noqa: E501
            ref2 (str): Ref2 (Customer Defined Field)                This field is available for you to use to provide whatever information your implementation requires.  It does not affect tax calculation.. [optional]  # noqa: E501
            description (str): Item description.                For Streamlined Sales Tax (SST) customers, this field is required if an unmapped `itemCode` is used.. [optional]  # noqa: E501
            business_identification_no (str): VAT business identification number for the customer for this line item.  If you leave this field empty,  this line item will use whatever business identification number you provided at the transaction level.                If you specify a VAT business identification number for the customer in this transaction and you have also set up  a business identification number for your company during company setup, this transaction will be treated as a  business-to-business transaction for VAT purposes and it will be calculated according to VAT tax rules.. [optional]  # noqa: E501
            tax_override (TaxOverrideModel): [optional]  # noqa: E501
            parameters ([TransactionLineParameterModel]): Special parameters that apply to this line within this transaction.                To get a full list of available parameters, please use the `ListParameters` API.. [optional]  # noqa: E501
            user_defined_fields ([TransactionLineUserDefinedFieldModel]): Custom user fields/flex fields for this line.. [optional]  # noqa: E501
            hs_code (str): The Item code for Custom Duty / Global Import tax determination  Harmonized Tariff System code for this transaction.                For a list of harmonized tariff codes, see the Definitions API for harmonized tariff codes.. [optional]  # noqa: E501
            merchant_seller_id (int): DEPRECATED - Date: 04/15/2021, Version: 21.4, Message: Please use merchantSellerIdentifier instead.  ID of the merchant selling on the Marketplace. This field must be populated by Marketplace.. [optional]  # noqa: E501
            merchant_seller_identifier (str): ID of the merchant selling on the Marketplace. This field must be populated by Marketplace.. [optional]  # noqa: E501
            marketplace_liability_type (str): This field will identify who is remitting Marketplace or Seller. This field must be populated by Marketplace.. [optional]  # noqa: E501
            origination_document_id (str): The transaction's original ID in its origination system. [optional]  # noqa: E501
            origination_site (str): Synonym of Marketplace Origination. Name of the Marketplace where the transaction originated from.. [optional]  # noqa: E501
            category (str): Product category breadcrumbs. This is the full path to the category where item is included. Categories should be separated by “ > “.  Multiple category paths per item are accepted. In this case, category paths should be separated by “;”.. [optional]  # noqa: E501
            summary (str): A long description of the product.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.amount = amount
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
