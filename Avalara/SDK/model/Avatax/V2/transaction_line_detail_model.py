"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError



class TransactionLineDetailModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('juris_type',): {
            'STA': "STA",
            'CTY': "CTY",
            'CIT': "CIT",
            'STJ': "STJ",
            'CNT': "CNT",
        },
        ('jurisdiction_type',): {
            'COUNTRY': "Country",
            'STATE': "State",
            'COUNTY': "County",
            'CITY': "City",
            'SPECIAL': "Special",
        },
        ('non_taxable_type',): {
            'RATERULE': "RateRule",
            'RATEOVERRIDERULE': "RateOverrideRule",
            'BASERULE': "BaseRule",
            'EXEMPTENTITYRULE': "ExemptEntityRule",
            'PRODUCTTAXABILITYRULE': "ProductTaxabilityRule",
            'NEXUSRULE': "NexusRule",
            'RATECAPRULE': "RateCapRule",
            'TAXOVERRIDERULE': "TaxOverrideRule",
            'FEERULE': "FeeRule",
            'OTHERRULE': "OtherRule",
        },
        ('sourcing',): {
            'MIXED': "Mixed",
            'DESTINATION': "Destination",
            'ORIGIN': "Origin",
        },
        ('rate_type',): {
            'REDUCEDA': "ReducedA",
            'REDUCEDB': "ReducedB",
            'FOOD': "Food",
            'GENERAL': "General",
            'INCREASEDSTANDARD': "IncreasedStandard",
            'LINENRENTAL': "LinenRental",
            'MEDICAL': "Medical",
            'CONSTRUCTION': "Construction",
            'PARKING': "Parking",
            'SUPERREDUCED': "SuperReduced",
            'REDUCEDR': "ReducedR",
            'STANDARD': "Standard",
            'LEASING': "Leasing",
            'LEASINGLOW': "LeasingLow",
            'SERVICES': "Services",
            'ZERO': "Zero",
        },
        ('liability_type',): {
            'SELLER': "Seller",
            'BUYERSAGENT': "BuyersAgent",
        },
    }

    validations = {
        ('country',): {
            'max_length': 2,
            'min_length': 2,
        },
        ('rate_type_code',): {
            'max_length': 25,
            'min_length': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'id': (int,),  # noqa: E501
            'transaction_line_id': (int,),  # noqa: E501
            'transaction_id': (int,),  # noqa: E501
            'address_id': (int,),  # noqa: E501
            'country': (str,),  # noqa: E501
            'region': (str,),  # noqa: E501
            'county_fips': (str,),  # noqa: E501
            'state_fips': (str,),  # noqa: E501
            'exempt_amount': (float,),  # noqa: E501
            'exempt_reason_id': (int,),  # noqa: E501
            'in_state': (bool,),  # noqa: E501
            'juris_code': (str,),  # noqa: E501
            'juris_name': (str,),  # noqa: E501
            'jurisdiction_id': (int,),  # noqa: E501
            'signature_code': (str,),  # noqa: E501
            'state_assigned_no': (str,),  # noqa: E501
            'juris_type': (str,),  # noqa: E501
            'jurisdiction_type': (str,),  # noqa: E501
            'non_taxable_amount': (float,),  # noqa: E501
            'non_taxable_rule_id': (int,),  # noqa: E501
            'non_taxable_type': (str,),  # noqa: E501
            'rate': (float,),  # noqa: E501
            'rate_rule_id': (int,),  # noqa: E501
            'rate_source_id': (int,),  # noqa: E501
            'ser_code': (str,),  # noqa: E501
            'sourcing': (str,),  # noqa: E501
            'tax': (float,),  # noqa: E501
            'taxable_amount': (float,),  # noqa: E501
            'tax_type': (str,),  # noqa: E501
            'tax_sub_type_id': (str,),  # noqa: E501
            'tax_type_group_id': (str,),  # noqa: E501
            'tax_name': (str,),  # noqa: E501
            'tax_authority_type_id': (int,),  # noqa: E501
            'tax_region_id': (int,),  # noqa: E501
            'tax_calculated': (float,),  # noqa: E501
            'tax_override': (float,),  # noqa: E501
            'rate_type': (str,),  # noqa: E501
            'rate_type_code': (str,),  # noqa: E501
            'taxable_units': (float,),  # noqa: E501
            'non_taxable_units': (float,),  # noqa: E501
            'exempt_units': (float,),  # noqa: E501
            'unit_of_basis': (str,),  # noqa: E501
            'is_non_pass_thru': (bool,),  # noqa: E501
            'is_fee': (bool,),  # noqa: E501
            'reporting_taxable_units': (float,),  # noqa: E501
            'reporting_non_taxable_units': (float,),  # noqa: E501
            'reporting_exempt_units': (float,),  # noqa: E501
            'reporting_tax': (float,),  # noqa: E501
            'reporting_tax_calculated': (float,),  # noqa: E501
            'liability_type': (str,),  # noqa: E501
            'avt_user_bin': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'transaction_line_id': 'transactionLineId',  # noqa: E501
        'transaction_id': 'transactionId',  # noqa: E501
        'address_id': 'addressId',  # noqa: E501
        'country': 'country',  # noqa: E501
        'region': 'region',  # noqa: E501
        'county_fips': 'countyFIPS',  # noqa: E501
        'state_fips': 'stateFIPS',  # noqa: E501
        'exempt_amount': 'exemptAmount',  # noqa: E501
        'exempt_reason_id': 'exemptReasonId',  # noqa: E501
        'in_state': 'inState',  # noqa: E501
        'juris_code': 'jurisCode',  # noqa: E501
        'juris_name': 'jurisName',  # noqa: E501
        'jurisdiction_id': 'jurisdictionId',  # noqa: E501
        'signature_code': 'signatureCode',  # noqa: E501
        'state_assigned_no': 'stateAssignedNo',  # noqa: E501
        'juris_type': 'jurisType',  # noqa: E501
        'jurisdiction_type': 'jurisdictionType',  # noqa: E501
        'non_taxable_amount': 'nonTaxableAmount',  # noqa: E501
        'non_taxable_rule_id': 'nonTaxableRuleId',  # noqa: E501
        'non_taxable_type': 'nonTaxableType',  # noqa: E501
        'rate': 'rate',  # noqa: E501
        'rate_rule_id': 'rateRuleId',  # noqa: E501
        'rate_source_id': 'rateSourceId',  # noqa: E501
        'ser_code': 'serCode',  # noqa: E501
        'sourcing': 'sourcing',  # noqa: E501
        'tax': 'tax',  # noqa: E501
        'taxable_amount': 'taxableAmount',  # noqa: E501
        'tax_type': 'taxType',  # noqa: E501
        'tax_sub_type_id': 'taxSubTypeId',  # noqa: E501
        'tax_type_group_id': 'taxTypeGroupId',  # noqa: E501
        'tax_name': 'taxName',  # noqa: E501
        'tax_authority_type_id': 'taxAuthorityTypeId',  # noqa: E501
        'tax_region_id': 'taxRegionId',  # noqa: E501
        'tax_calculated': 'taxCalculated',  # noqa: E501
        'tax_override': 'taxOverride',  # noqa: E501
        'rate_type': 'rateType',  # noqa: E501
        'rate_type_code': 'rateTypeCode',  # noqa: E501
        'taxable_units': 'taxableUnits',  # noqa: E501
        'non_taxable_units': 'nonTaxableUnits',  # noqa: E501
        'exempt_units': 'exemptUnits',  # noqa: E501
        'unit_of_basis': 'unitOfBasis',  # noqa: E501
        'is_non_pass_thru': 'isNonPassThru',  # noqa: E501
        'is_fee': 'isFee',  # noqa: E501
        'reporting_taxable_units': 'reportingTaxableUnits',  # noqa: E501
        'reporting_non_taxable_units': 'reportingNonTaxableUnits',  # noqa: E501
        'reporting_exempt_units': 'reportingExemptUnits',  # noqa: E501
        'reporting_tax': 'reportingTax',  # noqa: E501
        'reporting_tax_calculated': 'reportingTaxCalculated',  # noqa: E501
        'liability_type': 'liabilityType',  # noqa: E501
        'avt_user_bin': 'avtUserBIN',  # noqa: E501
    }

    read_only_vars = {
        'id',  # noqa: E501
        'transaction_line_id',  # noqa: E501
        'transaction_id',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """TransactionLineDetailModel - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): The unique ID number of this tax detail.. [optional]  # noqa: E501
            transaction_line_id (int): The unique ID number of the line within this transaction.. [optional]  # noqa: E501
            transaction_id (int): The unique ID number of this transaction.. [optional]  # noqa: E501
            address_id (int): The unique ID number of the address used for this tax detail.. [optional]  # noqa: E501
            country (str): The two character ISO 3166 country code of the country where this tax detail is assigned.. [optional]  # noqa: E501
            region (str): The two-or-three character ISO region code for the region where this tax detail is assigned.. [optional]  # noqa: E501
            county_fips (str): For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the county where this tax detail is assigned.. [optional]  # noqa: E501
            state_fips (str): For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the state where this tax detail is assigned.. [optional]  # noqa: E501
            exempt_amount (float): The amount of this line that was considered exempt in this tax detail.. [optional]  # noqa: E501
            exempt_reason_id (int): The unique ID number of the exemption reason for this tax detail.. [optional]  # noqa: E501
            in_state (bool): True if this detail element represented an in-state transaction.. [optional]  # noqa: E501
            juris_code (str): The code of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            juris_name (str): The name of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            jurisdiction_id (int): The unique ID number of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            signature_code (str): The Avalara-specified signature code of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            state_assigned_no (str): The state assigned number of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            juris_type (str): DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Use jurisdictionTypeId instead.  The type of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            jurisdiction_type (str): The type of the jurisdiction in which this tax detail applies.. [optional]  # noqa: E501
            non_taxable_amount (float): The amount of this line item that was considered nontaxable in this tax detail.. [optional]  # noqa: E501
            non_taxable_rule_id (int): The rule according to which portion of this detail was considered nontaxable.. [optional]  # noqa: E501
            non_taxable_type (str): The type of nontaxability that was applied to this tax detail.. [optional]  # noqa: E501
            rate (float): The rate at which this tax detail was calculated.. [optional]  # noqa: E501
            rate_rule_id (int): The unique ID number of the rule according to which this tax detail was calculated.. [optional]  # noqa: E501
            rate_source_id (int): The unique ID number of the source of the rate according to which this tax detail was calculated.. [optional]  # noqa: E501
            ser_code (str): For Streamlined Sales Tax customers, the SST Electronic Return code under which this tax detail should be applied.. [optional]  # noqa: E501
            sourcing (str): Indicates whether this tax detail applies to the origin or destination of the transaction.. [optional]  # noqa: E501
            tax (float): The amount of tax for this tax detail.. [optional]  # noqa: E501
            taxable_amount (float): The taxable amount of this tax detail.. [optional]  # noqa: E501
            tax_type (str): The type of tax that was calculated.  Depends on the company's nexus settings as well as the jurisdiction's tax laws.. [optional]  # noqa: E501
            tax_sub_type_id (str): The id of the tax subtype.. [optional]  # noqa: E501
            tax_type_group_id (str): The id of the tax type group.. [optional]  # noqa: E501
            tax_name (str): The name of the tax against which this tax amount was calculated.. [optional]  # noqa: E501
            tax_authority_type_id (int): The type of the tax authority to which this tax will be remitted.. [optional]  # noqa: E501
            tax_region_id (int): The unique ID number of the tax region.. [optional]  # noqa: E501
            tax_calculated (float): The amount of tax that AvaTax calculated.  If an override for tax amount is used, there may be a difference between the tax  field which applies your override, and the this amount that is calculated without override.. [optional]  # noqa: E501
            tax_override (float): The amount of tax override that was specified for this tax line.. [optional]  # noqa: E501
            rate_type (str): DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Please use rateTypeCode instead.  The rate type for this tax detail.. [optional]  # noqa: E501
            rate_type_code (str): Indicates the code of the rate type that was used to calculate this tax detail.  Use [ListRateTypesByCountry](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListRateTypesByCountry/) API for a full list of rate type codes.. [optional]  # noqa: E501
            taxable_units (float): Number of units in this line item that were calculated to be taxable according to this rate detail.. [optional]  # noqa: E501
            non_taxable_units (float): Number of units in this line item that were calculated to be nontaxable according to this rate detail.. [optional]  # noqa: E501
            exempt_units (float): Number of units in this line item that were calculated to be exempt according to this rate detail.. [optional]  # noqa: E501
            unit_of_basis (str): When calculating units, what basis of measurement did we use for calculating the units?. [optional]  # noqa: E501
            is_non_pass_thru (bool): True if this value is a non-passthrough tax.                A non-passthrough tax is a tax that may not be charged to a customer; it must be paid directly by the company.. [optional]  # noqa: E501
            is_fee (bool): The Taxes/Fee component. True if the fee is applied.. [optional]  # noqa: E501
            reporting_taxable_units (float): Number of units in this line item that were calculated to be taxable according to this rate detail in the reporting currency.. [optional]  # noqa: E501
            reporting_non_taxable_units (float): Number of units in this line item that were calculated to be nontaxable according to this rate detail in the reporting currency.. [optional]  # noqa: E501
            reporting_exempt_units (float): Number of units in this line item that were calculated to be exempt according to this rate detail in the reporting currency.. [optional]  # noqa: E501
            reporting_tax (float): The amount of tax for this tax detail in the reporting currency.. [optional]  # noqa: E501
            reporting_tax_calculated (float): The amount of tax that AvaTax calculated in the reporting currency.  If an override for tax amount is used, there may be a difference between the tax  field which applies your override, and the this amount that is calculated without override.. [optional]  # noqa: E501
            liability_type (str): LiabilityType identifies the party liable to file the tax. This field is used to filter taxes from reports and tax filings as appropriate.. [optional]  # noqa: E501
            avt_user_bin (str): ID of the AvaTax user creating the transaction. This field will be calculated by AvaTax based on the Company settings and the transaction details.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """TransactionLineDetailModel - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): The unique ID number of this tax detail.. [optional]  # noqa: E501
            transaction_line_id (int): The unique ID number of the line within this transaction.. [optional]  # noqa: E501
            transaction_id (int): The unique ID number of this transaction.. [optional]  # noqa: E501
            address_id (int): The unique ID number of the address used for this tax detail.. [optional]  # noqa: E501
            country (str): The two character ISO 3166 country code of the country where this tax detail is assigned.. [optional]  # noqa: E501
            region (str): The two-or-three character ISO region code for the region where this tax detail is assigned.. [optional]  # noqa: E501
            county_fips (str): For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the county where this tax detail is assigned.. [optional]  # noqa: E501
            state_fips (str): For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the state where this tax detail is assigned.. [optional]  # noqa: E501
            exempt_amount (float): The amount of this line that was considered exempt in this tax detail.. [optional]  # noqa: E501
            exempt_reason_id (int): The unique ID number of the exemption reason for this tax detail.. [optional]  # noqa: E501
            in_state (bool): True if this detail element represented an in-state transaction.. [optional]  # noqa: E501
            juris_code (str): The code of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            juris_name (str): The name of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            jurisdiction_id (int): The unique ID number of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            signature_code (str): The Avalara-specified signature code of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            state_assigned_no (str): The state assigned number of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            juris_type (str): DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Use jurisdictionTypeId instead.  The type of the jurisdiction to which this tax detail applies.. [optional]  # noqa: E501
            jurisdiction_type (str): The type of the jurisdiction in which this tax detail applies.. [optional]  # noqa: E501
            non_taxable_amount (float): The amount of this line item that was considered nontaxable in this tax detail.. [optional]  # noqa: E501
            non_taxable_rule_id (int): The rule according to which portion of this detail was considered nontaxable.. [optional]  # noqa: E501
            non_taxable_type (str): The type of nontaxability that was applied to this tax detail.. [optional]  # noqa: E501
            rate (float): The rate at which this tax detail was calculated.. [optional]  # noqa: E501
            rate_rule_id (int): The unique ID number of the rule according to which this tax detail was calculated.. [optional]  # noqa: E501
            rate_source_id (int): The unique ID number of the source of the rate according to which this tax detail was calculated.. [optional]  # noqa: E501
            ser_code (str): For Streamlined Sales Tax customers, the SST Electronic Return code under which this tax detail should be applied.. [optional]  # noqa: E501
            sourcing (str): Indicates whether this tax detail applies to the origin or destination of the transaction.. [optional]  # noqa: E501
            tax (float): The amount of tax for this tax detail.. [optional]  # noqa: E501
            taxable_amount (float): The taxable amount of this tax detail.. [optional]  # noqa: E501
            tax_type (str): The type of tax that was calculated.  Depends on the company's nexus settings as well as the jurisdiction's tax laws.. [optional]  # noqa: E501
            tax_sub_type_id (str): The id of the tax subtype.. [optional]  # noqa: E501
            tax_type_group_id (str): The id of the tax type group.. [optional]  # noqa: E501
            tax_name (str): The name of the tax against which this tax amount was calculated.. [optional]  # noqa: E501
            tax_authority_type_id (int): The type of the tax authority to which this tax will be remitted.. [optional]  # noqa: E501
            tax_region_id (int): The unique ID number of the tax region.. [optional]  # noqa: E501
            tax_calculated (float): The amount of tax that AvaTax calculated.  If an override for tax amount is used, there may be a difference between the tax  field which applies your override, and the this amount that is calculated without override.. [optional]  # noqa: E501
            tax_override (float): The amount of tax override that was specified for this tax line.. [optional]  # noqa: E501
            rate_type (str): DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Please use rateTypeCode instead.  The rate type for this tax detail.. [optional]  # noqa: E501
            rate_type_code (str): Indicates the code of the rate type that was used to calculate this tax detail.  Use [ListRateTypesByCountry](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListRateTypesByCountry/) API for a full list of rate type codes.. [optional]  # noqa: E501
            taxable_units (float): Number of units in this line item that were calculated to be taxable according to this rate detail.. [optional]  # noqa: E501
            non_taxable_units (float): Number of units in this line item that were calculated to be nontaxable according to this rate detail.. [optional]  # noqa: E501
            exempt_units (float): Number of units in this line item that were calculated to be exempt according to this rate detail.. [optional]  # noqa: E501
            unit_of_basis (str): When calculating units, what basis of measurement did we use for calculating the units?. [optional]  # noqa: E501
            is_non_pass_thru (bool): True if this value is a non-passthrough tax.                A non-passthrough tax is a tax that may not be charged to a customer; it must be paid directly by the company.. [optional]  # noqa: E501
            is_fee (bool): The Taxes/Fee component. True if the fee is applied.. [optional]  # noqa: E501
            reporting_taxable_units (float): Number of units in this line item that were calculated to be taxable according to this rate detail in the reporting currency.. [optional]  # noqa: E501
            reporting_non_taxable_units (float): Number of units in this line item that were calculated to be nontaxable according to this rate detail in the reporting currency.. [optional]  # noqa: E501
            reporting_exempt_units (float): Number of units in this line item that were calculated to be exempt according to this rate detail in the reporting currency.. [optional]  # noqa: E501
            reporting_tax (float): The amount of tax for this tax detail in the reporting currency.. [optional]  # noqa: E501
            reporting_tax_calculated (float): The amount of tax that AvaTax calculated in the reporting currency.  If an override for tax amount is used, there may be a difference between the tax  field which applies your override, and the this amount that is calculated without override.. [optional]  # noqa: E501
            liability_type (str): LiabilityType identifies the party liable to file the tax. This field is used to filter taxes from reports and tax filings as appropriate.. [optional]  # noqa: E501
            avt_user_bin (str): ID of the AvaTax user creating the transaction. This field will be calculated by AvaTax based on the Company settings and the transaction details.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
