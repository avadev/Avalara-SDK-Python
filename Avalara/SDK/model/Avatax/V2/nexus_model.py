"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError


def lazy_import():
    from Avalara.SDK.model.Avatax.V2.nexus_parameter_detail_model import NexusParameterDetailModel
    globals()['NexusParameterDetailModel'] = NexusParameterDetailModel


class NexusModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('juris_type_id',): {
            'STA': "STA",
            'CTY': "CTY",
            'CIT': "CIT",
            'STJ': "STJ",
            'CNT': "CNT",
        },
        ('jurisdiction_type_id',): {
            'COUNTRY': "Country",
            'STATE': "State",
            'COUNTY': "County",
            'CITY': "City",
            'SPECIAL': "Special",
        },
        ('nexus_type_id',): {
            'NONE': "None",
            'SALESORSELLERSUSETAX': "SalesOrSellersUseTax",
            'SALESTAX': "SalesTax",
            'SSTVOLUNTEER': "SSTVolunteer",
            'SSTNONVOLUNTEER': "SSTNonVolunteer",
        },
        ('sourcing',): {
            'MIXED': "Mixed",
            'DESTINATION': "Destination",
            'ORIGIN': "Origin",
        },
        ('local_nexus_type_id',): {
            'SELECTED': "Selected",
            'STATEADMINISTERED': "StateAdministered",
            'ALL': "All",
        },
    }

    validations = {
        ('juris_code',): {
            'max_length': 10,
            'min_length': 0,
        },
        ('juris_name',): {
            'max_length': 200,
            'min_length': 0,
        },
        ('short_name',): {
            'max_length': 15,
            'min_length': 0,
        },
        ('signature_code',): {
            'max_length': 4,
            'min_length': 0,
        },
        ('state_assigned_no',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('tax_id',): {
            'max_length': 25,
            'min_length': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'country': (str,),  # noqa: E501
            'region': (str,),  # noqa: E501
            'juris_code': (str,),  # noqa: E501
            'juris_name': (str,),  # noqa: E501
            'id': (int,),  # noqa: E501
            'company_id': (int,),  # noqa: E501
            'juris_type_id': (str,),  # noqa: E501
            'jurisdiction_type_id': (str,),  # noqa: E501
            'effective_date': (date,),  # noqa: E501
            'end_date': (date,),  # noqa: E501
            'short_name': (str,),  # noqa: E501
            'signature_code': (str,),  # noqa: E501
            'state_assigned_no': (str,),  # noqa: E501
            'nexus_type_id': (str,),  # noqa: E501
            'sourcing': (str,),  # noqa: E501
            'has_local_nexus': (bool,),  # noqa: E501
            'local_nexus_type_id': (str,),  # noqa: E501
            'has_permanent_establishment': (bool,),  # noqa: E501
            'tax_id': (str,),  # noqa: E501
            'streamlined_sales_tax': (bool,),  # noqa: E501
            'is_sst_active': (bool,),  # noqa: E501
            'created_date': (datetime,),  # noqa: E501
            'created_user_id': (int,),  # noqa: E501
            'modified_date': (datetime,),  # noqa: E501
            'modified_user_id': (int,),  # noqa: E501
            'tax_type_group': (str,),  # noqa: E501
            'nexus_tax_type_group': (str,),  # noqa: E501
            'tax_authority_id': (int,),  # noqa: E501
            'is_seller_importer_of_record': (bool,),  # noqa: E501
            'tax_name': (str,),  # noqa: E501
            'parameters': ([NexusParameterDetailModel],),  # noqa: E501
            'taxable_nexus': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'country': 'country',  # noqa: E501
        'region': 'region',  # noqa: E501
        'juris_code': 'jurisCode',  # noqa: E501
        'juris_name': 'jurisName',  # noqa: E501
        'id': 'id',  # noqa: E501
        'company_id': 'companyId',  # noqa: E501
        'juris_type_id': 'jurisTypeId',  # noqa: E501
        'jurisdiction_type_id': 'jurisdictionTypeId',  # noqa: E501
        'effective_date': 'effectiveDate',  # noqa: E501
        'end_date': 'endDate',  # noqa: E501
        'short_name': 'shortName',  # noqa: E501
        'signature_code': 'signatureCode',  # noqa: E501
        'state_assigned_no': 'stateAssignedNo',  # noqa: E501
        'nexus_type_id': 'nexusTypeId',  # noqa: E501
        'sourcing': 'sourcing',  # noqa: E501
        'has_local_nexus': 'hasLocalNexus',  # noqa: E501
        'local_nexus_type_id': 'localNexusTypeId',  # noqa: E501
        'has_permanent_establishment': 'hasPermanentEstablishment',  # noqa: E501
        'tax_id': 'taxId',  # noqa: E501
        'streamlined_sales_tax': 'streamlinedSalesTax',  # noqa: E501
        'is_sst_active': 'isSSTActive',  # noqa: E501
        'created_date': 'createdDate',  # noqa: E501
        'created_user_id': 'createdUserId',  # noqa: E501
        'modified_date': 'modifiedDate',  # noqa: E501
        'modified_user_id': 'modifiedUserId',  # noqa: E501
        'tax_type_group': 'taxTypeGroup',  # noqa: E501
        'nexus_tax_type_group': 'nexusTaxTypeGroup',  # noqa: E501
        'tax_authority_id': 'taxAuthorityId',  # noqa: E501
        'is_seller_importer_of_record': 'isSellerImporterOfRecord',  # noqa: E501
        'tax_name': 'taxName',  # noqa: E501
        'parameters': 'parameters',  # noqa: E501
        'taxable_nexus': 'taxableNexus',  # noqa: E501
    }

    read_only_vars = {
        'id',  # noqa: E501
        'short_name',  # noqa: E501
        'signature_code',  # noqa: E501
        'state_assigned_no',  # noqa: E501
        'streamlined_sales_tax',  # noqa: E501
        'is_sst_active',  # noqa: E501
        'created_date',  # noqa: E501
        'created_user_id',  # noqa: E501
        'modified_date',  # noqa: E501
        'modified_user_id',  # noqa: E501
        'tax_name',  # noqa: E501
        'parameters',  # noqa: E501
        'taxable_nexus',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, country, region, juris_code, juris_name, *args, **kwargs):  # noqa: E501
        """NexusModel - a model defined in OpenAPI

        Args:
            country (str): Name or ISO 3166 code identifying the country in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
            region (str): Name or ISO 3166 code identifying the region within the country.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
            juris_code (str): The code identifying the jurisdiction in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
            juris_name (str): The common name of the jurisdiction in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): The unique ID number of this declaration of nexus.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.. [optional]  # noqa: E501
            company_id (int): The unique ID number of the company that declared nexus.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            juris_type_id (str): DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Please use jurisdictionTypeId instead.  The jurisdiction type of the jurisdiction in which this company declared nexus.. [optional]  # noqa: E501
            jurisdiction_type_id (str): The type of the jurisdiction in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            effective_date (date): The date when this nexus began.  If not known, set to null.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            end_date (date): If this nexus will end or has ended on a specific date, set this to the date when this nexus ends.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            short_name (str): The short name of the jurisdiction.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            signature_code (str): The signature code of the boundary region as defined by Avalara.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            state_assigned_no (str): The state assigned number of this jurisdiction.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            nexus_type_id (str): The type of nexus that this company is declaring.                If you are voluntarily declaring nexus in a jurisdiction, you should select `SalesOrSellersUseTax` for your  nexus type option.  This option allows you to calculate tax correctly whether you are selling in-state or  shipping from an out-of-state location.                If you are legally obligated to declare nexus due to physical presence or other sufficient nexus, you  should select `SalesTax`.  This indicates that, as a legal requirement, your company must always collect  and remit full sales tax in this jurisdiction.                If you are participating in the Streamlined Sales Tax program, your SST administrator will select nexus  settings for you in all SST jurisdictions.  Do not select any SST options by yourself.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            sourcing (str): Indicates whether this nexus is defined as origin or destination nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            has_local_nexus (bool): True if you are also declaring local nexus within this jurisdiction.  Many U.S. states have options for declaring nexus in local jurisdictions as well as within the state.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            local_nexus_type_id (str): If you are declaring local nexus within this jurisdiction, this indicates whether you are declaring only  a specified list of local jurisdictions, all state-administered local jurisdictions, or all local jurisdictions.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            has_permanent_establishment (bool): Set this value to true if your company has a permanent establishment within this jurisdiction.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            tax_id (str): Optional - the tax identification number under which you declared nexus.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            streamlined_sales_tax (bool): DEPRECATED - Date: 4/29/2017, Version: 19.4, Message: Please use isSSTActive instead.  For the United States, this flag indicates whether this particular nexus falls within a U.S. State that participates  in the Streamlined Sales Tax program.  For countries other than the US, this flag is null.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            is_sst_active (bool): For the United States, this flag indicates whether this particular nexus falls within a U.S. State that participates  in the Streamlined Sales Tax program and if the account associated with the Nexus has an active AvaTaxCsp subscription.  For countries other than the US, this flag is null.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            created_date (datetime): The date when this record was created.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.. [optional]  # noqa: E501
            created_user_id (int): The User ID of the user who created this record.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.. [optional]  # noqa: E501
            modified_date (datetime): The date/time when this record was last modified.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.. [optional]  # noqa: E501
            modified_user_id (int): The user ID of the user who last modified this record.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.. [optional]  # noqa: E501
            tax_type_group (str): The type group of nexus that this company is declaring  Use [ListTaxTypeGroups](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListTaxTypeGroups/) API for a list of nexus tax type groups.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.  NOTE: This optional field will trigger nexus subtype lookup when populated. When using make sure TaxTypeGroup matches corresponding NexusTaxTypeGroup. [optional]  # noqa: E501
            nexus_tax_type_group (str): The type of nexus that this company is declaring.Replaces NexusTypeId.  Use [ListNexusTaxTypeGroups](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListNexusTaxTypeGroups/) API for a list of nexus tax type groups.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            tax_authority_id (int): A unique ID number of the tax authority that is associated with this nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            is_seller_importer_of_record (bool): For nexus declarations at the country level, specifies whether this company is considered the importer of record in this nexus region.                Some taxes only apply if the seller is the importer of record for a product.  In cases where companies are working together to  ship products, there may be mutual agreement as to which company is the entity designated as importer of record.  The importer  of record will then be the company designated to pay taxes marked as being obligated to the importer of record.                Set this value to `true` to consider your company as the importer of record and collect these taxes.  Leave this value as false  or null and taxes will be calculated as if your company is not the importer of record.                This value may also be set during each transaction API call.  See `CreateTransaction()` for more information.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            tax_name (str): A description of corresponding tax type applied to the nexus.                When a custom nexus is created, it'll have to be matched to a system nexus to be validated successfully. The matched system nexus has a  field to describe the tax type applied to it, that field will be copied over to the nexus that is being created.                This field is defined by Avalara. Its main purpose is to give a simple description of the tax type associated with the nexus so  users have a better understanding of the nexus when it is displayed.. [optional]  # noqa: E501
            parameters ([NexusParameterDetailModel]): List of nexus parameters.. [optional]  # noqa: E501
            taxable_nexus (bool): Shows if system nexus records are associated with tax collection. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.country = country
        self.region = region
        self.juris_code = juris_code
        self.juris_name = juris_name
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, country, region, juris_code, juris_name, *args, **kwargs):  # noqa: E501
        """NexusModel - a model defined in OpenAPI

        Args:
            country (str): Name or ISO 3166 code identifying the country in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
            region (str): Name or ISO 3166 code identifying the region within the country.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
            juris_code (str): The code identifying the jurisdiction in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
            juris_name (str): The common name of the jurisdiction in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): The unique ID number of this declaration of nexus.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.. [optional]  # noqa: E501
            company_id (int): The unique ID number of the company that declared nexus.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            juris_type_id (str): DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Please use jurisdictionTypeId instead.  The jurisdiction type of the jurisdiction in which this company declared nexus.. [optional]  # noqa: E501
            jurisdiction_type_id (str): The type of the jurisdiction in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            effective_date (date): The date when this nexus began.  If not known, set to null.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            end_date (date): If this nexus will end or has ended on a specific date, set this to the date when this nexus ends.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            short_name (str): The short name of the jurisdiction.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            signature_code (str): The signature code of the boundary region as defined by Avalara.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            state_assigned_no (str): The state assigned number of this jurisdiction.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            nexus_type_id (str): The type of nexus that this company is declaring.                If you are voluntarily declaring nexus in a jurisdiction, you should select `SalesOrSellersUseTax` for your  nexus type option.  This option allows you to calculate tax correctly whether you are selling in-state or  shipping from an out-of-state location.                If you are legally obligated to declare nexus due to physical presence or other sufficient nexus, you  should select `SalesTax`.  This indicates that, as a legal requirement, your company must always collect  and remit full sales tax in this jurisdiction.                If you are participating in the Streamlined Sales Tax program, your SST administrator will select nexus  settings for you in all SST jurisdictions.  Do not select any SST options by yourself.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            sourcing (str): Indicates whether this nexus is defined as origin or destination nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            has_local_nexus (bool): True if you are also declaring local nexus within this jurisdiction.  Many U.S. states have options for declaring nexus in local jurisdictions as well as within the state.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            local_nexus_type_id (str): If you are declaring local nexus within this jurisdiction, this indicates whether you are declaring only  a specified list of local jurisdictions, all state-administered local jurisdictions, or all local jurisdictions.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            has_permanent_establishment (bool): Set this value to true if your company has a permanent establishment within this jurisdiction.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            tax_id (str): Optional - the tax identification number under which you declared nexus.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            streamlined_sales_tax (bool): DEPRECATED - Date: 4/29/2017, Version: 19.4, Message: Please use isSSTActive instead.  For the United States, this flag indicates whether this particular nexus falls within a U.S. State that participates  in the Streamlined Sales Tax program.  For countries other than the US, this flag is null.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            is_sst_active (bool): For the United States, this flag indicates whether this particular nexus falls within a U.S. State that participates  in the Streamlined Sales Tax program and if the account associated with the Nexus has an active AvaTaxCsp subscription.  For countries other than the US, this flag is null.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            created_date (datetime): The date when this record was created.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.. [optional]  # noqa: E501
            created_user_id (int): The User ID of the user who created this record.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.. [optional]  # noqa: E501
            modified_date (datetime): The date/time when this record was last modified.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.. [optional]  # noqa: E501
            modified_user_id (int): The user ID of the user who last modified this record.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.. [optional]  # noqa: E501
            tax_type_group (str): The type group of nexus that this company is declaring  Use [ListTaxTypeGroups](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListTaxTypeGroups/) API for a list of nexus tax type groups.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.  NOTE: This optional field will trigger nexus subtype lookup when populated. When using make sure TaxTypeGroup matches corresponding NexusTaxTypeGroup. [optional]  # noqa: E501
            nexus_tax_type_group (str): The type of nexus that this company is declaring.Replaces NexusTypeId.  Use [ListNexusTaxTypeGroups](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListNexusTaxTypeGroups/) API for a list of nexus tax type groups.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            tax_authority_id (int): A unique ID number of the tax authority that is associated with this nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.. [optional]  # noqa: E501
            is_seller_importer_of_record (bool): For nexus declarations at the country level, specifies whether this company is considered the importer of record in this nexus region.                Some taxes only apply if the seller is the importer of record for a product.  In cases where companies are working together to  ship products, there may be mutual agreement as to which company is the entity designated as importer of record.  The importer  of record will then be the company designated to pay taxes marked as being obligated to the importer of record.                Set this value to `true` to consider your company as the importer of record and collect these taxes.  Leave this value as false  or null and taxes will be calculated as if your company is not the importer of record.                This value may also be set during each transaction API call.  See `CreateTransaction()` for more information.                This field is user-selectable and should be provided when creating or updating a nexus object.. [optional]  # noqa: E501
            tax_name (str): A description of corresponding tax type applied to the nexus.                When a custom nexus is created, it'll have to be matched to a system nexus to be validated successfully. The matched system nexus has a  field to describe the tax type applied to it, that field will be copied over to the nexus that is being created.                This field is defined by Avalara. Its main purpose is to give a simple description of the tax type associated with the nexus so  users have a better understanding of the nexus when it is displayed.. [optional]  # noqa: E501
            parameters ([NexusParameterDetailModel]): List of nexus parameters.. [optional]  # noqa: E501
            taxable_nexus (bool): Shows if system nexus records are associated with tax collection. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.country = country
        self.region = region
        self.juris_code = juris_code
        self.juris_name = juris_name
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
