"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError


def lazy_import():
    from Avalara.SDK.model.Avatax.V2.addresses_model import AddressesModel
    from Avalara.SDK.model.Avatax.V2.line_item_model import LineItemModel
    from Avalara.SDK.model.Avatax.V2.tax_override_model import TaxOverrideModel
    from Avalara.SDK.model.Avatax.V2.transaction_parameter_model import TransactionParameterModel
    from Avalara.SDK.model.Avatax.V2.transaction_user_defined_field_model import TransactionUserDefinedFieldModel
    globals()['AddressesModel'] = AddressesModel
    globals()['LineItemModel'] = LineItemModel
    globals()['TaxOverrideModel'] = TaxOverrideModel
    globals()['TransactionParameterModel'] = TransactionParameterModel
    globals()['TransactionUserDefinedFieldModel'] = TransactionUserDefinedFieldModel


class CreateTransactionModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('type',): {
            'SALESORDER': "SalesOrder",
            'SALESINVOICE': "SalesInvoice",
            'PURCHASEORDER': "PurchaseOrder",
            'PURCHASEINVOICE': "PurchaseInvoice",
            'RETURNORDER': "ReturnOrder",
            'RETURNINVOICE': "ReturnInvoice",
            'INVENTORYTRANSFERORDER': "InventoryTransferOrder",
            'INVENTORYTRANSFERINVOICE': "InventoryTransferInvoice",
            'REVERSECHARGEORDER': "ReverseChargeOrder",
            'REVERSECHARGEINVOICE': "ReverseChargeInvoice",
            'CUSTOMSINVOICE': "CustomsInvoice",
            'CUSTOMSORDER': "CustomsOrder",
            'ANY': "Any",
        },
        ('service_mode',): {
            'AUTOMATIC': "Automatic",
            'LOCAL': "Local",
            'REMOTE': "Remote",
        },
        ('debug_level',): {
            'NORMAL': "Normal",
            'DIAGNOSTIC': "Diagnostic",
        },
        ('delivery_terms',): {
            'DAP': "DAP",
            'DDP': "DDP",
        },
    }

    validations = {
        ('customer_code',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('code',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('company_code',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('salesperson_code',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('customer_usage_type',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('entity_use_code',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('purchase_order_no',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('exemption_no',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('reference_code',): {
            'max_length': 1024,
            'min_length': 0,
        },
        ('reporting_location_code',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('batch_code',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('currency_code',): {
            'max_length': 3,
            'min_length': 0,
        },
        ('exchange_rate_currency_code',): {
            'max_length': 3,
            'min_length': 0,
        },
        ('pos_lane_code',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('business_identification_no',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('description',): {
            'max_length': 2048,
            'min_length': 0,
        },
        ('email',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('customer_supplier_name',): {
            'max_length': 200,
            'min_length': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'lines': ([LineItemModel],),  # noqa: E501
            'date': (date,),  # noqa: E501
            'customer_code': (str,),  # noqa: E501
            'code': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'company_code': (str,),  # noqa: E501
            'salesperson_code': (str,),  # noqa: E501
            'customer_usage_type': (str,),  # noqa: E501
            'entity_use_code': (str,),  # noqa: E501
            'discount': (float,),  # noqa: E501
            'purchase_order_no': (str,),  # noqa: E501
            'exemption_no': (str,),  # noqa: E501
            'addresses': (AddressesModel,),  # noqa: E501
            'parameters': ([TransactionParameterModel],),  # noqa: E501
            'user_defined_fields': ([TransactionUserDefinedFieldModel],),  # noqa: E501
            'reference_code': (str,),  # noqa: E501
            'reporting_location_code': (str,),  # noqa: E501
            'commit': (bool,),  # noqa: E501
            'batch_code': (str,),  # noqa: E501
            'tax_override': (TaxOverrideModel,),  # noqa: E501
            'currency_code': (str,),  # noqa: E501
            'service_mode': (str,),  # noqa: E501
            'exchange_rate': (float,),  # noqa: E501
            'exchange_rate_effective_date': (date,),  # noqa: E501
            'exchange_rate_currency_code': (str,),  # noqa: E501
            'pos_lane_code': (str,),  # noqa: E501
            'business_identification_no': (str,),  # noqa: E501
            'is_seller_importer_of_record': (bool,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'email': (str,),  # noqa: E501
            'debug_level': (str,),  # noqa: E501
            'customer_supplier_name': (str,),  # noqa: E501
            'data_source_id': (int,),  # noqa: E501
            'delivery_terms': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'lines': 'lines',  # noqa: E501
        'date': 'date',  # noqa: E501
        'customer_code': 'customerCode',  # noqa: E501
        'code': 'code',  # noqa: E501
        'type': 'type',  # noqa: E501
        'company_code': 'companyCode',  # noqa: E501
        'salesperson_code': 'salespersonCode',  # noqa: E501
        'customer_usage_type': 'customerUsageType',  # noqa: E501
        'entity_use_code': 'entityUseCode',  # noqa: E501
        'discount': 'discount',  # noqa: E501
        'purchase_order_no': 'purchaseOrderNo',  # noqa: E501
        'exemption_no': 'exemptionNo',  # noqa: E501
        'addresses': 'addresses',  # noqa: E501
        'parameters': 'parameters',  # noqa: E501
        'user_defined_fields': 'userDefinedFields',  # noqa: E501
        'reference_code': 'referenceCode',  # noqa: E501
        'reporting_location_code': 'reportingLocationCode',  # noqa: E501
        'commit': 'commit',  # noqa: E501
        'batch_code': 'batchCode',  # noqa: E501
        'tax_override': 'taxOverride',  # noqa: E501
        'currency_code': 'currencyCode',  # noqa: E501
        'service_mode': 'serviceMode',  # noqa: E501
        'exchange_rate': 'exchangeRate',  # noqa: E501
        'exchange_rate_effective_date': 'exchangeRateEffectiveDate',  # noqa: E501
        'exchange_rate_currency_code': 'exchangeRateCurrencyCode',  # noqa: E501
        'pos_lane_code': 'posLaneCode',  # noqa: E501
        'business_identification_no': 'businessIdentificationNo',  # noqa: E501
        'is_seller_importer_of_record': 'isSellerImporterOfRecord',  # noqa: E501
        'description': 'description',  # noqa: E501
        'email': 'email',  # noqa: E501
        'debug_level': 'debugLevel',  # noqa: E501
        'customer_supplier_name': 'customerSupplierName',  # noqa: E501
        'data_source_id': 'dataSourceId',  # noqa: E501
        'delivery_terms': 'deliveryTerms',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, lines, date, customer_code, *args, **kwargs):  # noqa: E501
        """CreateTransactionModel - a model defined in OpenAPI

        Args:
            lines ([LineItemModel]): A list of line items that will appear on this transaction.
            date (date): Transaction Date - The date on the invoice, purchase order, etc.                By default, this date will be used to calculate the tax rates for the transaction.  If you wish to use a  different date to calculate tax rates, please specify a `taxOverride` of type `taxDate`.
            customer_code (str): Customer Code - The client application customer reference code.  Note: This field is case sensitive. To have exemption certificates apply, this value should  be the same as the one passed to create a customer.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            code (str): The internal reference code used by the client application.  This is used for operations such as  Get, Adjust, Settle, and Void.  If you leave the transaction code blank, a GUID will be assigned to each transaction.. [optional]  # noqa: E501
            type (str): Specifies the type of document to create.  A document type ending with `Invoice` is a permanent transaction  that will be recorded in AvaTax.  A document type ending with `Order` is a temporary estimate that will not  be preserved.                If you omit this value, the API will assume you want to create a `SalesOrder`.. [optional]  # noqa: E501
            company_code (str): Company Code - Specify the code of the company creating this transaction here.  If you leave this value null,  your account's default company will be used instead.. [optional]  # noqa: E501
            salesperson_code (str): Salesperson Code - The client application salesperson reference code.. [optional]  # noqa: E501
            customer_usage_type (str): DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use entityUseCode instead.  Customer Usage Type - The client application customer or usage type.. [optional]  # noqa: E501
            entity_use_code (str): Entity Use Code - The client application customer or usage type.  For a list of  available usage types, use [ListEntityUseCodes](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListEntityUseCodes/) API.. [optional]  # noqa: E501
            discount (float): Discount - The discount amount to apply to the document.  This value will be applied only to lines  that have the `discounted` flag set to true.  If no lines have `discounted` set to true, this discount  cannot be applied.. [optional]  # noqa: E501
            purchase_order_no (str): Purchase Order Number for this document.                This is required for single use exemption certificates to match the order and invoice with the certificate.. [optional]  # noqa: E501
            exemption_no (str): Exemption Number for this document.                If you specify an exemption number for this document, this document will be considered exempt, and you  may be asked to provide proof of this exemption certificate in the event that you are asked by an auditor  to verify your exemptions.  Note: This is same as 'exemptNo' in TransactionModel.. [optional]  # noqa: E501
            addresses (AddressesModel): [optional]  # noqa: E501
            parameters ([TransactionParameterModel]): Special parameters for this transaction.                To get a full list of available parameters, please use the [ListParameters](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListParameters/) endpoint.. [optional]  # noqa: E501
            user_defined_fields ([TransactionUserDefinedFieldModel]): Custom user fields/flex fields for this transaction.. [optional]  # noqa: E501
            reference_code (str): Customer-provided Reference Code with information about this transaction.                This field could be used to reference the original document for a return invoice, or for any other  reference purpose.. [optional]  # noqa: E501
            reporting_location_code (str): Sets the sale location code (Outlet ID) for reporting this document to the tax authority.                This value is used by Avalara Managed Returns to group documents together by reporting locations  for tax authorities that require location-based reporting.. [optional]  # noqa: E501
            commit (bool): Causes the document to be committed if true.  This option is only applicable for invoice document  types, not orders.. [optional]  # noqa: E501
            batch_code (str): BatchCode for batch operations.. [optional]  # noqa: E501
            tax_override (TaxOverrideModel): [optional]  # noqa: E501
            currency_code (str): The three-character ISO 4217 currency code for this transaction.. [optional]  # noqa: E501
            service_mode (str): Specifies whether the tax calculation is handled Local, Remote, or Automatic (default).  This only  applies when using an AvaLocal server.. [optional]  # noqa: E501
            exchange_rate (float): Currency exchange rate from this transaction to the company base currency.                This only needs to be set if the transaction currency is different than the company base currency.  It defaults to 1.0.. [optional]  # noqa: E501
            exchange_rate_effective_date (date): Effective date of the exchange rate.. [optional]  # noqa: E501
            exchange_rate_currency_code (str): Optional three-character ISO 4217 reporting exchange rate currency code for this transaction. The default value is USD.. [optional]  # noqa: E501
            pos_lane_code (str): Sets the Point of Sale Lane Code sent by the User for this document.. [optional]  # noqa: E501
            business_identification_no (str): VAT business identification number for the customer for this transaction.  This number will be used for all lines  in the transaction, except for those lines where you have defined a different business identification number.                If you specify a VAT business identification number for the customer in this transaction and you have also set up  a business identification number for your company during company setup, this transaction will be treated as a  business-to-business transaction for VAT purposes and it will be calculated according to VAT tax rules.. [optional]  # noqa: E501
            is_seller_importer_of_record (bool): Specifies if the transaction should have value-added and cross-border taxes calculated with the seller as the importer of record.                Some taxes only apply if the seller is the importer of record for a product.  In cases where companies are working together to  ship products, there may be mutual agreement as to which company is the entity designated as importer of record.  The importer  of record will then be the company designated to pay taxes marked as being obligated to the importer of record.                Set this value to `true` to consider your company as the importer of record and collect these taxes.                This value may also be set at the Nexus level.  See `NexusModel` for more information.. [optional]  # noqa: E501
            description (str): User-supplied description for this transaction.. [optional]  # noqa: E501
            email (str): User-supplied email address relevant for this transaction.. [optional]  # noqa: E501
            debug_level (str): If the user wishes to request additional debug information from this transaction, specify a level higher than `normal`.. [optional]  # noqa: E501
            customer_supplier_name (str): The name of the supplier / exporter / seller.  For sales doctype enter the name of your own company for which you are reporting.  For purchases doctype enter the name of the supplier you have purchased from.. [optional]  # noqa: E501
            data_source_id (int): The Id of the datasource from which this transaction originated.  This value will be overridden by the system to take the datasource Id from the call header.. [optional]  # noqa: E501
            delivery_terms (str): The Delivery Terms is a field used in conjunction with Importer of Record to influence whether AvaTax includes Import Duty and Tax values in the transaction totals or not.  Delivered at Place (DAP) and Delivered Duty Paid (DDP) are two delivery terms that  indicate that Import Duty and Tax should be included in the transaction total.  This field is also used for reports.  This field is used for future feature support. This field is not currently in use.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.lines = lines
        self.date = date
        self.customer_code = customer_code
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, lines, date, customer_code, *args, **kwargs):  # noqa: E501
        """CreateTransactionModel - a model defined in OpenAPI

        Args:
            lines ([LineItemModel]): A list of line items that will appear on this transaction.
            date (date): Transaction Date - The date on the invoice, purchase order, etc.                By default, this date will be used to calculate the tax rates for the transaction.  If you wish to use a  different date to calculate tax rates, please specify a `taxOverride` of type `taxDate`.
            customer_code (str): Customer Code - The client application customer reference code.  Note: This field is case sensitive. To have exemption certificates apply, this value should  be the same as the one passed to create a customer.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            code (str): The internal reference code used by the client application.  This is used for operations such as  Get, Adjust, Settle, and Void.  If you leave the transaction code blank, a GUID will be assigned to each transaction.. [optional]  # noqa: E501
            type (str): Specifies the type of document to create.  A document type ending with `Invoice` is a permanent transaction  that will be recorded in AvaTax.  A document type ending with `Order` is a temporary estimate that will not  be preserved.                If you omit this value, the API will assume you want to create a `SalesOrder`.. [optional]  # noqa: E501
            company_code (str): Company Code - Specify the code of the company creating this transaction here.  If you leave this value null,  your account's default company will be used instead.. [optional]  # noqa: E501
            salesperson_code (str): Salesperson Code - The client application salesperson reference code.. [optional]  # noqa: E501
            customer_usage_type (str): DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use entityUseCode instead.  Customer Usage Type - The client application customer or usage type.. [optional]  # noqa: E501
            entity_use_code (str): Entity Use Code - The client application customer or usage type.  For a list of  available usage types, use [ListEntityUseCodes](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListEntityUseCodes/) API.. [optional]  # noqa: E501
            discount (float): Discount - The discount amount to apply to the document.  This value will be applied only to lines  that have the `discounted` flag set to true.  If no lines have `discounted` set to true, this discount  cannot be applied.. [optional]  # noqa: E501
            purchase_order_no (str): Purchase Order Number for this document.                This is required for single use exemption certificates to match the order and invoice with the certificate.. [optional]  # noqa: E501
            exemption_no (str): Exemption Number for this document.                If you specify an exemption number for this document, this document will be considered exempt, and you  may be asked to provide proof of this exemption certificate in the event that you are asked by an auditor  to verify your exemptions.  Note: This is same as 'exemptNo' in TransactionModel.. [optional]  # noqa: E501
            addresses (AddressesModel): [optional]  # noqa: E501
            parameters ([TransactionParameterModel]): Special parameters for this transaction.                To get a full list of available parameters, please use the [ListParameters](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListParameters/) endpoint.. [optional]  # noqa: E501
            user_defined_fields ([TransactionUserDefinedFieldModel]): Custom user fields/flex fields for this transaction.. [optional]  # noqa: E501
            reference_code (str): Customer-provided Reference Code with information about this transaction.                This field could be used to reference the original document for a return invoice, or for any other  reference purpose.. [optional]  # noqa: E501
            reporting_location_code (str): Sets the sale location code (Outlet ID) for reporting this document to the tax authority.                This value is used by Avalara Managed Returns to group documents together by reporting locations  for tax authorities that require location-based reporting.. [optional]  # noqa: E501
            commit (bool): Causes the document to be committed if true.  This option is only applicable for invoice document  types, not orders.. [optional]  # noqa: E501
            batch_code (str): BatchCode for batch operations.. [optional]  # noqa: E501
            tax_override (TaxOverrideModel): [optional]  # noqa: E501
            currency_code (str): The three-character ISO 4217 currency code for this transaction.. [optional]  # noqa: E501
            service_mode (str): Specifies whether the tax calculation is handled Local, Remote, or Automatic (default).  This only  applies when using an AvaLocal server.. [optional]  # noqa: E501
            exchange_rate (float): Currency exchange rate from this transaction to the company base currency.                This only needs to be set if the transaction currency is different than the company base currency.  It defaults to 1.0.. [optional]  # noqa: E501
            exchange_rate_effective_date (date): Effective date of the exchange rate.. [optional]  # noqa: E501
            exchange_rate_currency_code (str): Optional three-character ISO 4217 reporting exchange rate currency code for this transaction. The default value is USD.. [optional]  # noqa: E501
            pos_lane_code (str): Sets the Point of Sale Lane Code sent by the User for this document.. [optional]  # noqa: E501
            business_identification_no (str): VAT business identification number for the customer for this transaction.  This number will be used for all lines  in the transaction, except for those lines where you have defined a different business identification number.                If you specify a VAT business identification number for the customer in this transaction and you have also set up  a business identification number for your company during company setup, this transaction will be treated as a  business-to-business transaction for VAT purposes and it will be calculated according to VAT tax rules.. [optional]  # noqa: E501
            is_seller_importer_of_record (bool): Specifies if the transaction should have value-added and cross-border taxes calculated with the seller as the importer of record.                Some taxes only apply if the seller is the importer of record for a product.  In cases where companies are working together to  ship products, there may be mutual agreement as to which company is the entity designated as importer of record.  The importer  of record will then be the company designated to pay taxes marked as being obligated to the importer of record.                Set this value to `true` to consider your company as the importer of record and collect these taxes.                This value may also be set at the Nexus level.  See `NexusModel` for more information.. [optional]  # noqa: E501
            description (str): User-supplied description for this transaction.. [optional]  # noqa: E501
            email (str): User-supplied email address relevant for this transaction.. [optional]  # noqa: E501
            debug_level (str): If the user wishes to request additional debug information from this transaction, specify a level higher than `normal`.. [optional]  # noqa: E501
            customer_supplier_name (str): The name of the supplier / exporter / seller.  For sales doctype enter the name of your own company for which you are reporting.  For purchases doctype enter the name of the supplier you have purchased from.. [optional]  # noqa: E501
            data_source_id (int): The Id of the datasource from which this transaction originated.  This value will be overridden by the system to take the datasource Id from the call header.. [optional]  # noqa: E501
            delivery_terms (str): The Delivery Terms is a field used in conjunction with Importer of Record to influence whether AvaTax includes Import Duty and Tax values in the transaction totals or not.  Delivered at Place (DAP) and Delivered Duty Paid (DDP) are two delivery terms that  indicate that Import Duty and Tax should be included in the transaction total.  This field is also used for reports.  This field is used for future feature support. This field is not currently in use.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.lines = lines
        self.date = date
        self.customer_code = customer_code
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
