"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.api_client import ApiClient, Endpoint as _Endpoint
from Avalara.SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from Avalara.SDK.exceptions import ApiTypeError, ApiValueError, ApiException
from Avalara.SDK.oauth_helper import avalara_retry_oauth

class CertificatesApi(object):

    def __init__(self, api_client):
        self.__set_configuration(api_client)
    
    def __verify_api_client(self,api_client):
        if api_client is None:
            raise ApiValueError("APIClient not defined")
    
    def __set_configuration(self, api_client):
        self.__verify_api_client(api_client)
        api_client.set_sdk_version("0.1.1")
        self.api_client = api_client
		
        self.download_certificate_image_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/avatax/companies/{companyId}/certificates/{id}/attachment',
                'operation_id': 'download_certificate_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_id',
                    'id',
                    'page',
                    'type',
                    'x_avalara_client',
                ],
                'required': [
                    'company_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "PDF": "Pdf",
                        "JPEG": "Jpeg"
                    },
                },
                'openapi_types': {
                    'company_id':
                        (int,),
                    'id':
                        (int,),
                    'page':
                        (int,),
                    'type':
                        (str,),
                    'x_avalara_client':
                        (str,),
                },
                'attribute_map': {
                    'company_id': 'companyId',
                    'id': 'id',
                    'page': '$page',
                    'type': '$type',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_id': 'path',
                    'id': 'path',
                    'page': 'query',
                    'type': 'query',
                    'x_avalara_client': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': '2.0',
                'accept': [
                    'application/octet-stream',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )
        self.upload_certificate_image_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/avatax/companies/{companyId}/certificates/{id}/attachment',
                'operation_id': 'upload_certificate_image',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_id',
                    'id',
                    'file',
                    'x_avalara_client',
                ],
                'required': [
                    'company_id',
                    'id',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'company_id':
                        (int,),
                    'id':
                        (int,),
                    'file':
                        (file_type,),
                    'x_avalara_client':
                        (str,),
                },
                'attribute_map': {
                    'company_id': 'companyId',
                    'id': 'id',
                    'file': 'file',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_id': 'path',
                    'id': 'path',
                    'file': 'form',
                    'x_avalara_client': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': '2.0',
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )

    @avalara_retry_oauth(max_retry_attempts=2)
    def download_certificate_image(
        self,
        company_id,
        id,
        **kwargs
    ):
        """Download an image for this certificate  # noqa: E501

        Download an image or PDF file for this certificate.                This API can be used to download either a single-page preview of the certificate or a full PDF document.  To retrieve a preview image, set the `$type` parameter to `Jpeg` and the `$page` parameter to `1`.                A certificate is a document stored in either AvaTax Exemptions or CertCapture.  The certificate document  can contain information about a customer's eligibility for exemption from sales or use taxes based on  criteria you specify when you store the certificate.  To view or manage your certificates directly, please  log onto the administrative website for the product you purchased.                Before you can use any exemption certificates endpoints, you must set up your company for exemption certificate data storage.  Companies that do not have this storage system set up will see `CertCaptureNotConfiguredError` when they call exemption   certificate related APIs. To check if this is set up for a company, call `GetCertificateSetup`.  To request setup of exemption   certificate storage for this company, call `RequestCertificateSetup`.  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, BatchServiceAdmin, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser. * This API depends on the following active services:*Required* (all):  AvaTaxPro.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_certificate_image(company_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (int): The unique ID number of the company that recorded this certificate
            id (int): The unique ID number of this certificate

        Keyword Args:
            page (int): If you choose `$type`=`Jpeg`, you must specify which page number to retrieve.. [optional]
            type (str): The data format in which to retrieve the certificate image. [optional] if omitted the server will use the default value of "Pdf"
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_id'] = \
            company_id
        kwargs['id'] = \
            id
        return self.download_certificate_image_endpoint.call_with_http_info(**kwargs)

    @avalara_retry_oauth(max_retry_attempts=2)
    def upload_certificate_image(
        self,
        company_id,
        id,
        file,
        **kwargs
    ):
        """Upload an image or PDF attachment for this certificate  # noqa: E501

        Upload an image or PDF attachment for this certificate.                Image attachments can be of the format `PDF`, `JPEG`, `TIFF`, or `PNG`.  To upload a multi-page image, please  use the `PDF` data type.                A certificate is a document stored in either AvaTax Exemptions or CertCapture.  The certificate document  can contain information about a customer's eligibility for exemption from sales or use taxes based on  criteria you specify when you store the certificate.  To view or manage your certificates directly, please  log onto the administrative website for the product you purchased.                Before you can use any exemption certificates endpoints, you must set up your company for exemption certificate data storage.  Companies that do not have this storage system set up will see `CertCaptureNotConfiguredError` when they call exemption   certificate related APIs. To check if this is set up for a company, call `GetCertificateSetup`.  To request setup of exemption   certificate storage for this company, call `RequestCertificateSetup`.  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, BatchServiceAdmin, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser. * This API depends on the following active services:*Required* (all):  AvaTaxPro.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_certificate_image(company_id, id, file, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (int): The unique ID number of the company that recorded this certificate
            id (int): The unique ID number of this certificate
            file (file_type): The exemption certificate file you wanted to upload. Accepted formats are: PDF, JPEG, TIFF, PNG.

        Keyword Args:
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_id'] = \
            company_id
        kwargs['id'] = \
            id
        kwargs['file'] = \
            file
        return self.upload_certificate_image_endpoint.call_with_http_info(**kwargs)

