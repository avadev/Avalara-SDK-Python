"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.api_client import ApiClient, Endpoint as _Endpoint
from Avalara.SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from Avalara.SDK.model.ItemClassification.V2.error_detail import ErrorDetail
from Avalara.SDK.model.ItemClassification.V2.item_catalogue_input_model import ItemCatalogueInputModel
from Avalara.SDK.model.ItemClassification.V2.item_catalogue_output_model import ItemCatalogueOutputModel
from Avalara.SDK.model.ItemClassification.V2.item_model import ItemModel
from Avalara.SDK.exceptions import ApiTypeError, ApiValueError, ApiException
from Avalara.SDK.oauth_helper import avalara_retry_oauth

class ItemsApi(object):

    def __init__(self, api_client):
        self.__set_configuration(api_client)
    
    def __verify_api_client(self,api_client):
        if api_client is None:
            raise ApiValueError("APIClient not defined")
    
    def __set_configuration(self, api_client):
        self.__verify_api_client(api_client)
        api_client.set_sdk_version("0.1.1")
        self.api_client = api_client
		
        self.delete_catalogue_item_endpoint = _Endpoint(
            settings={
                'response_type': ([ErrorDetail],),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/ims/companies/{companyId}/itemcatalogue/{itemCode}',
                'operation_id': 'delete_catalogue_item',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_id',
                    'item_code',
                    'x_avalara_client',
                ],
                'required': [
                    'company_id',
                    'item_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'company_id':
                        (int,),
                    'item_code':
                        (str,),
                    'x_avalara_client':
                        (str,),
                },
                'attribute_map': {
                    'company_id': 'companyId',
                    'item_code': 'itemCode',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_id': 'path',
                    'item_code': 'path',
                    'x_avalara_client': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': 'v2',
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )
        self.delete_item_endpoint = _Endpoint(
            settings={
                'response_type': ([ErrorDetail],),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/ims/companies/{companyId}/items/{id}',
                'operation_id': 'delete_item',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_id',
                    'id',
                    'x_avalara_client',
                ],
                'required': [
                    'company_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'company_id':
                        (int,),
                    'id':
                        (int,),
                    'x_avalara_client':
                        (str,),
                },
                'attribute_map': {
                    'company_id': 'companyId',
                    'id': 'id',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_id': 'path',
                    'id': 'path',
                    'x_avalara_client': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': 'v2',
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )
        self.get_item_endpoint = _Endpoint(
            settings={
                'response_type': (ItemModel,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/ims/companies/{companyId}/items/{id}',
                'operation_id': 'get_item',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_id',
                    'id',
                    'include',
                    'x_avalara_client',
                ],
                'required': [
                    'company_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'company_id':
                        (int,),
                    'id':
                        (int,),
                    'include':
                        (str,),
                    'x_avalara_client':
                        (str,),
                },
                'attribute_map': {
                    'company_id': 'companyId',
                    'id': 'id',
                    'include': '$include',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_id': 'path',
                    'id': 'path',
                    'include': 'query',
                    'x_avalara_client': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': 'v2',
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )
        self.sync_item_catalogue_endpoint = _Endpoint(
            settings={
                'response_type': (ItemCatalogueOutputModel,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/ims/companies/{companyId}/itemcatalogue',
                'operation_id': 'sync_item_catalogue',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_id',
                    'x_avalara_client',
                    'body',
                ],
                'required': [
                    'company_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'company_id':
                        (int,),
                    'x_avalara_client':
                        (str,),
                    'body':
                        ([ItemCatalogueInputModel],),
                },
                'attribute_map': {
                    'company_id': 'companyId',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_id': 'path',
                    'x_avalara_client': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': 'v2',
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )
        self.update_item_endpoint = _Endpoint(
            settings={
                'response_type': (ItemModel,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/ims/companies/{companyId}/items/{id}',
                'operation_id': 'update_item',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_id',
                    'id',
                    'x_avalara_client',
                    'body',
                ],
                'required': [
                    'company_id',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'company_id':
                        (int,),
                    'id':
                        (int,),
                    'x_avalara_client':
                        (str,),
                    'body':
                        (ItemModel,),
                },
                'attribute_map': {
                    'company_id': 'companyId',
                    'id': 'id',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_id': 'path',
                    'id': 'path',
                    'x_avalara_client': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': 'v2',
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )

    @avalara_retry_oauth(max_retry_attempts=2)
    def delete_catalogue_item(
        self,
        company_id,
        item_code,
        **kwargs
    ):
        """Delete a single item  # noqa: E501

        Deletes the item object at this URL.                Items are a way of separating your tax calculation process from your tax configuration details.   Use this endpoint to delete an existing item with item code.                Deleting an item will also delete the parameters, classifications, and product categories associated with that item.    NOTE: If your item code contains any of these characters /, +, ? or a space, please use the following encoding before making a request:  * Replace '/' with '\\_-ava2f-\\_'  For example: 'Item/Code' becomes 'Item_-ava2f-_Code'  * Replace '+' with '\\_-ava2b-\\_'  For example: 'Item+Code' becomes 'Item_-ava2b-_Code'  * Replace '?' with '\\_-ava3f-\\_'  For example: 'Item?Code' becomes 'Item_-ava3f-_Code'  * Replace '%' with '\\_-ava25-\\_'  For example: 'Item%Code' becomes 'Item_-ava25-_Code'  * Replace '#' with '\\_-ava23-\\_'  For example: 'Item#Code' becomes 'Item_-ava23-_Code'  * Replace '_'_' with '\\_-ava27-\\_'  For example: 'Item'Code' becomes 'Item_-ava27-_Code'  * Replace '\"' with '\\_-ava22-\\_'  For example: 'Item\"Code' becomes 'Item_-ava22-_Code'  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, BatchServiceAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_catalogue_item(company_id, item_code, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (int): The ID of the company that owns this item.
            item_code (str): The code of the item you want to delete.

        Keyword Args:
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ErrorDetail]
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_id'] = \
            company_id
        kwargs['item_code'] = \
            item_code
        return self.delete_catalogue_item_endpoint.call_with_http_info(**kwargs)

    @avalara_retry_oauth(max_retry_attempts=2)
    def delete_item(
        self,
        company_id,
        id,
        **kwargs
    ):
        """Delete a single item  # noqa: E501

        Deletes the item object at this URL.                Items are a way of separating your tax calculation process from your tax configuration details.  If you choose, you  can provide `itemCode` values for each `CreateTransaction()` API call rather than specifying tax codes, parameters, descriptions,  and other data fields.  AvaTax will automatically look up each `itemCode` and apply the correct tax codes and parameters  from the item table instead.  This allows your CreateTransaction call to be as simple as possible, and your tax compliance  team can manage your item catalog and adjust the tax behavior of items without having to modify your software.                Deleting an item will also delete the parameters and classifications associated with that item.  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, BatchServiceAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_item(company_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (int): The ID of the company that owns this item.
            id (int): The ID of the item you wish to delete.

        Keyword Args:
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ErrorDetail]
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_id'] = \
            company_id
        kwargs['id'] = \
            id
        return self.delete_item_endpoint.call_with_http_info(**kwargs)

    @avalara_retry_oauth(max_retry_attempts=2)
    def get_item(
        self,
        company_id,
        id,
        **kwargs
    ):
        """Retrieve a single item  # noqa: E501

        Get the `Item` object identified by this URL.                Items are a way of separating your tax calculation process from your tax configuration details.  If you choose, you  can provide `itemCode` values for each `CreateTransaction()` API call rather than specifying tax codes, parameters, descriptions,  and other data fields.  AvaTax will automatically look up each `itemCode` and apply the correct tax codes and parameters  from the item table instead.  This allows your CreateTransaction call to be as simple as possible, and your tax compliance  team can manage your item catalog and adjust the tax behavior of items without having to modify your software.  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, AccountUser, BatchServiceAdmin, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_item(company_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (int): The ID of the company that owns this item object
            id (int): The primary key of this item

        Keyword Args:
            include (str): A comma separated list of additional data to retrieve.. [optional]
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ItemModel
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_id'] = \
            company_id
        kwargs['id'] = \
            id
        return self.get_item_endpoint.call_with_http_info(**kwargs)

    @avalara_retry_oauth(max_retry_attempts=2)
    def sync_item_catalogue(
        self,
        company_id,
        **kwargs
    ):
        """Create or update items from a product catalog.  # noqa: E501

        Creates/updates one or more item objects with additional properties and the AvaTax category attached to this company.                Items are a way of separating your tax calculation process from your tax configuration details. Use this endpoint to create  a new or update an existing item. This can be used to sync the items with Avalara. For example, an accounting software  system can use this to sync all their items from an ERP with Avalara.  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, BatchServiceAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sync_item_catalogue(company_id, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (int): The ID of the company that owns this item.

        Keyword Args:
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            body ([ItemCatalogueInputModel]): The items you want to create or update.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ItemCatalogueOutputModel
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_id'] = \
            company_id
        return self.sync_item_catalogue_endpoint.call_with_http_info(**kwargs)

    @avalara_retry_oauth(max_retry_attempts=2)
    def update_item(
        self,
        company_id,
        id,
        **kwargs
    ):
        """Update a single item  # noqa: E501

        Replace the existing `Item` object at this URL with an updated object.                Items are a way of separating your tax calculation process from your tax configuration details.  If you choose, you  can provide `itemCode` values for each `CreateTransaction()` API call rather than specifying tax codes, parameters, descriptions,  and other data fields.  AvaTax will automatically look up each `itemCode` and apply the correct tax codes and parameters  from the item table instead.  This allows your CreateTransaction call to be as simple as possible, and your tax compliance  team can manage your item catalog and adjust the tax behavior of items without having to modify your software.                All data from the existing object will be replaced with data in the object you PUT.  To set a field's value to null,  you may either set its value to null or omit that field from the object you post.                The tax code takes precedence over the tax code id if both are provided.  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, BatchServiceAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_item(company_id, id, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (int): The ID of the company that this item belongs to.
            id (int): The ID of the item you wish to update

        Keyword Args:
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            body (ItemModel): The item object you wish to update.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ItemModel
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_id'] = \
            company_id
        kwargs['id'] = \
            id
        return self.update_item_endpoint.call_with_http_info(**kwargs)

