"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError


def lazy_import():
    from Avalara.SDK.model.Avatax.V2.certificate_attribute_model import CertificateAttributeModel
    from Avalara.SDK.model.Avatax.V2.customer_model import CustomerModel
    from Avalara.SDK.model.Avatax.V2.exemption_reason_model import ExemptionReasonModel
    from Avalara.SDK.model.Avatax.V2.exposure_zone_model import ExposureZoneModel
    from Avalara.SDK.model.Avatax.V2.po_number_model import PoNumberModel
    globals()['CertificateAttributeModel'] = CertificateAttributeModel
    globals()['CustomerModel'] = CustomerModel
    globals()['ExemptionReasonModel'] = ExemptionReasonModel
    globals()['ExposureZoneModel'] = ExposureZoneModel
    globals()['PoNumberModel'] = PoNumberModel


class CertificateModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'signed_date': (date,),  # noqa: E501
            'expiration_date': (date,),  # noqa: E501
            'exemption_reason': (ExemptionReasonModel,),  # noqa: E501
            'exposure_zone': (ExposureZoneModel,),  # noqa: E501
            'id': (int,),  # noqa: E501
            'company_id': (int,),  # noqa: E501
            'filename': (str,),  # noqa: E501
            'document_exists': (bool,),  # noqa: E501
            'valid': (bool,),  # noqa: E501
            'verified': (bool,),  # noqa: E501
            'exempt_percentage': (float,),  # noqa: E501
            'is_single_certificate': (bool,),  # noqa: E501
            'exemption_number': (str,),  # noqa: E501
            'validated_exemption_reason': (ExemptionReasonModel,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'created_date': (datetime,),  # noqa: E501
            'modified_date': (date,),  # noqa: E501
            'tax_number_type': (str,),  # noqa: E501
            'business_number_type': (str,),  # noqa: E501
            'page_count': (int,),  # noqa: E501
            'customers': ([CustomerModel],),  # noqa: E501
            'po_numbers': ([PoNumberModel],),  # noqa: E501
            'attributes': ([CertificateAttributeModel],),  # noqa: E501
            'ecms_id': (int,),  # noqa: E501
            'ecms_status': (str,),  # noqa: E501
            'pdf': (str,),  # noqa: E501
            'pages': ([str],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'signed_date': 'signedDate',  # noqa: E501
        'expiration_date': 'expirationDate',  # noqa: E501
        'exemption_reason': 'exemptionReason',  # noqa: E501
        'exposure_zone': 'exposureZone',  # noqa: E501
        'id': 'id',  # noqa: E501
        'company_id': 'companyId',  # noqa: E501
        'filename': 'filename',  # noqa: E501
        'document_exists': 'documentExists',  # noqa: E501
        'valid': 'valid',  # noqa: E501
        'verified': 'verified',  # noqa: E501
        'exempt_percentage': 'exemptPercentage',  # noqa: E501
        'is_single_certificate': 'isSingleCertificate',  # noqa: E501
        'exemption_number': 'exemptionNumber',  # noqa: E501
        'validated_exemption_reason': 'validatedExemptionReason',  # noqa: E501
        'status': 'status',  # noqa: E501
        'created_date': 'createdDate',  # noqa: E501
        'modified_date': 'modifiedDate',  # noqa: E501
        'tax_number_type': 'taxNumberType',  # noqa: E501
        'business_number_type': 'businessNumberType',  # noqa: E501
        'page_count': 'pageCount',  # noqa: E501
        'customers': 'customers',  # noqa: E501
        'po_numbers': 'poNumbers',  # noqa: E501
        'attributes': 'attributes',  # noqa: E501
        'ecms_id': 'ecmsId',  # noqa: E501
        'ecms_status': 'ecmsStatus',  # noqa: E501
        'pdf': 'pdf',  # noqa: E501
        'pages': 'pages',  # noqa: E501
    }

    read_only_vars = {
        'document_exists',  # noqa: E501
        'verified',  # noqa: E501
        'is_single_certificate',  # noqa: E501
        'status',  # noqa: E501
        'page_count',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, signed_date, expiration_date, exemption_reason, exposure_zone, *args, **kwargs):  # noqa: E501
        """CertificateModel - a model defined in OpenAPI

        Args:
            signed_date (date): The date when this certificate was signed.
            expiration_date (date): Expiration date when this certificate will no longer be valid.
            exemption_reason (ExemptionReasonModel):
            exposure_zone (ExposureZoneModel):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): Unique ID number of this certificate.. [optional]  # noqa: E501
            company_id (int): The unique ID number of the AvaTax company that recorded this certificate.. [optional]  # noqa: E501
            filename (str): File name for the image of this certificate.                When creating a certificate, if you do not upload a PDF or JPG image, you must specify the filename  of the certificate as it is tracked in your repository.                To create a certificate, you must provide one of the following fields: either a `filename`, a `pdf` file,  or an array of JPG `pages`.  The API will return an error if you omit these fields or if you attempt to  put values in more than one of them.. [optional]  # noqa: E501
            document_exists (bool): This value is true if there exists scanned PDF copy of this certificate or the PDF version of the form that the customer filled via the CertCapture wizard on S3 bucket.. [optional]  # noqa: E501
            valid (bool): True if this certificate is marked as valid.  A valid certificate can be considered for exemption purposes.  When a certificate is marked invalid, it will no longer be considered when calculating exemption for  a customer.. [optional]  # noqa: E501
            verified (bool): This value is true if the certificate has gone through the certificate validation process.  For more information on the certificate validation process, please see the Avalara Help Center.. [optional]  # noqa: E501
            exempt_percentage (float): If this certificate provides exemption from transactional taxes, what percentage of the transaction  is considered exempt?                For a fully exempt certificate, this percentage should be 100.. [optional]  # noqa: E501
            is_single_certificate (bool): This value is true if this certificate is a single (or standalone) certificate.  This value is set  during the audit stage of the certificate validation process.. [optional]  # noqa: E501
            exemption_number (str): Indicates the tax number passed in for the certificate.. [optional]  # noqa: E501
            validated_exemption_reason (ExemptionReasonModel): [optional]  # noqa: E501
            status (str): The status of the certificate. [optional]  # noqa: E501
            created_date (datetime): The date/time when this record was created.. [optional]  # noqa: E501
            modified_date (date): The date/time when this record was last modified.. [optional]  # noqa: E501
            tax_number_type (str): The tax number type for the certificate. For example, `FEIN`, `Social Security Number`, or `Employer Identification Number`.. [optional]  # noqa: E501
            business_number_type (str): Description of business for the certificate. For example, `Retail trade`, `Professional services`, or `Construction`.. [optional]  # noqa: E501
            page_count (int): Number of pages contained within this certificate.. [optional]  # noqa: E501
            customers ([CustomerModel]): A list of customers to which this certificate applies.  You can fetch this data by specifying  `$include=customers` when calling a certificate fetch API.. [optional]  # noqa: E501
            po_numbers ([PoNumberModel]): A list of purchase order numbers that are valid for use with this certificate.                If this certificate is applicable for all purchase order numbers, this field will be empty.                You can fetch this data by specifying `$include=po_numbers` when calling a certificate fetch API.. [optional]  # noqa: E501
            attributes ([CertificateAttributeModel]): A list of certificate attributes that apply to this certificate.                You can fetch this data by specifying `$include=attributes` when calling a certificate fetch API.. [optional]  # noqa: E501
            ecms_id (int): The unique ID number of current AvaTax Exemption Certificate that refers this certificate.. [optional]  # noqa: E501
            ecms_status (str): The status of current AvaTax Exemption Certificate  that refers to this certificate.. [optional]  # noqa: E501
            pdf (str): This field is available for input only.  To retrieve the image after creation, use the  `DownloadCertificateImage` API.                When creating a certificate, you may optionally provide a PDF image in Base64 URLEncoded format.  PDFs are automatically parsed into individual page JPG images and can be retrieved back  later as either the original PDF or the individual pages.                To create a certificate, you must provide one of the following fields: either a `filename`, a `pdf` file,  or an array of JPG `pages`.  The API will return an error if you omit these fields or if you attempt to  put values in more than one of them.. [optional]  # noqa: E501
            pages ([str]): This field is available for input only.  To retrieve the image after creation, use the  `DownloadCertificateImage` API.                When creating a certificate, you may optionally provide a list of JPG images, one per page, in  Base64 URLEncoded format.  These JPG images are automatically combined into a single downloadable  PDF and can be retrieved back later as either the original JPG images or the combined PDF.                To create a certificate, you must provide one of the following fields: either a `filename`, a `pdf` file,  or an array of JPG `pages`.  The API will return an error if you omit these fields or if you attempt to  put values in more than one of them.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.signed_date = signed_date
        self.expiration_date = expiration_date
        self.exemption_reason = exemption_reason
        self.exposure_zone = exposure_zone
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, signed_date, expiration_date, exemption_reason, exposure_zone, *args, **kwargs):  # noqa: E501
        """CertificateModel - a model defined in OpenAPI

        Args:
            signed_date (date): The date when this certificate was signed.
            expiration_date (date): Expiration date when this certificate will no longer be valid.
            exemption_reason (ExemptionReasonModel):
            exposure_zone (ExposureZoneModel):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): Unique ID number of this certificate.. [optional]  # noqa: E501
            company_id (int): The unique ID number of the AvaTax company that recorded this certificate.. [optional]  # noqa: E501
            filename (str): File name for the image of this certificate.                When creating a certificate, if you do not upload a PDF or JPG image, you must specify the filename  of the certificate as it is tracked in your repository.                To create a certificate, you must provide one of the following fields: either a `filename`, a `pdf` file,  or an array of JPG `pages`.  The API will return an error if you omit these fields or if you attempt to  put values in more than one of them.. [optional]  # noqa: E501
            document_exists (bool): This value is true if there exists scanned PDF copy of this certificate or the PDF version of the form that the customer filled via the CertCapture wizard on S3 bucket.. [optional]  # noqa: E501
            valid (bool): True if this certificate is marked as valid.  A valid certificate can be considered for exemption purposes.  When a certificate is marked invalid, it will no longer be considered when calculating exemption for  a customer.. [optional]  # noqa: E501
            verified (bool): This value is true if the certificate has gone through the certificate validation process.  For more information on the certificate validation process, please see the Avalara Help Center.. [optional]  # noqa: E501
            exempt_percentage (float): If this certificate provides exemption from transactional taxes, what percentage of the transaction  is considered exempt?                For a fully exempt certificate, this percentage should be 100.. [optional]  # noqa: E501
            is_single_certificate (bool): This value is true if this certificate is a single (or standalone) certificate.  This value is set  during the audit stage of the certificate validation process.. [optional]  # noqa: E501
            exemption_number (str): Indicates the tax number passed in for the certificate.. [optional]  # noqa: E501
            validated_exemption_reason (ExemptionReasonModel): [optional]  # noqa: E501
            status (str): The status of the certificate. [optional]  # noqa: E501
            created_date (datetime): The date/time when this record was created.. [optional]  # noqa: E501
            modified_date (date): The date/time when this record was last modified.. [optional]  # noqa: E501
            tax_number_type (str): The tax number type for the certificate. For example, `FEIN`, `Social Security Number`, or `Employer Identification Number`.. [optional]  # noqa: E501
            business_number_type (str): Description of business for the certificate. For example, `Retail trade`, `Professional services`, or `Construction`.. [optional]  # noqa: E501
            page_count (int): Number of pages contained within this certificate.. [optional]  # noqa: E501
            customers ([CustomerModel]): A list of customers to which this certificate applies.  You can fetch this data by specifying  `$include=customers` when calling a certificate fetch API.. [optional]  # noqa: E501
            po_numbers ([PoNumberModel]): A list of purchase order numbers that are valid for use with this certificate.                If this certificate is applicable for all purchase order numbers, this field will be empty.                You can fetch this data by specifying `$include=po_numbers` when calling a certificate fetch API.. [optional]  # noqa: E501
            attributes ([CertificateAttributeModel]): A list of certificate attributes that apply to this certificate.                You can fetch this data by specifying `$include=attributes` when calling a certificate fetch API.. [optional]  # noqa: E501
            ecms_id (int): The unique ID number of current AvaTax Exemption Certificate that refers this certificate.. [optional]  # noqa: E501
            ecms_status (str): The status of current AvaTax Exemption Certificate  that refers to this certificate.. [optional]  # noqa: E501
            pdf (str): This field is available for input only.  To retrieve the image after creation, use the  `DownloadCertificateImage` API.                When creating a certificate, you may optionally provide a PDF image in Base64 URLEncoded format.  PDFs are automatically parsed into individual page JPG images and can be retrieved back  later as either the original PDF or the individual pages.                To create a certificate, you must provide one of the following fields: either a `filename`, a `pdf` file,  or an array of JPG `pages`.  The API will return an error if you omit these fields or if you attempt to  put values in more than one of them.. [optional]  # noqa: E501
            pages ([str]): This field is available for input only.  To retrieve the image after creation, use the  `DownloadCertificateImage` API.                When creating a certificate, you may optionally provide a list of JPG images, one per page, in  Base64 URLEncoded format.  These JPG images are automatically combined into a single downloadable  PDF and can be retrieved back later as either the original JPG images or the combined PDF.                To create a certificate, you must provide one of the following fields: either a `filename`, a `pdf` file,  or an array of JPG `pages`.  The API will return an error if you omit these fields or if you attempt to  put values in more than one of them.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.signed_date = signed_date
        self.expiration_date = expiration_date
        self.exemption_reason = exemption_reason
        self.exposure_zone = exposure_zone
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
