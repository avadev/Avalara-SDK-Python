"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError


def lazy_import():
    from Avalara.SDK.model.Avatax.V2.certificate_model import CertificateModel
    from Avalara.SDK.model.Avatax.V2.custom_field_model import CustomFieldModel
    from Avalara.SDK.model.Avatax.V2.customer_attribute_model import CustomerAttributeModel
    from Avalara.SDK.model.Avatax.V2.exposure_zone_model import ExposureZoneModel
    globals()['CertificateModel'] = CertificateModel
    globals()['CustomFieldModel'] = CustomFieldModel
    globals()['CustomerAttributeModel'] = CustomerAttributeModel
    globals()['ExposureZoneModel'] = ExposureZoneModel


class CustomerModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('region',): {
            'max_length': 3,
            'min_length': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'company_id': (int,),  # noqa: E501
            'customer_code': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'line1': (str,),  # noqa: E501
            'city': (str,),  # noqa: E501
            'postal_code': (str,),  # noqa: E501
            'country': (str,),  # noqa: E501
            'id': (int,),  # noqa: E501
            'alternate_id': (str,),  # noqa: E501
            'attn_name': (str,),  # noqa: E501
            'line2': (str,),  # noqa: E501
            'phone_number': (str,),  # noqa: E501
            'fax_number': (str,),  # noqa: E501
            'email_address': (str,),  # noqa: E501
            'contact_name': (str,),  # noqa: E501
            'last_transaction': (datetime,),  # noqa: E501
            'created_date': (datetime,),  # noqa: E501
            'modified_date': (datetime,),  # noqa: E501
            'region': (str,),  # noqa: E501
            'is_bill': (bool,),  # noqa: E501
            'is_ship': (bool,),  # noqa: E501
            'taxpayer_id_number': (str,),  # noqa: E501
            'certificates': ([CertificateModel],),  # noqa: E501
            'custom_fields': ([CustomFieldModel],),  # noqa: E501
            'exposure_zones': ([ExposureZoneModel],),  # noqa: E501
            'ship_tos': ([CustomerModel],),  # noqa: E501
            'attributes': ([CustomerAttributeModel],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'company_id': 'companyId',  # noqa: E501
        'customer_code': 'customerCode',  # noqa: E501
        'name': 'name',  # noqa: E501
        'line1': 'line1',  # noqa: E501
        'city': 'city',  # noqa: E501
        'postal_code': 'postalCode',  # noqa: E501
        'country': 'country',  # noqa: E501
        'id': 'id',  # noqa: E501
        'alternate_id': 'alternateId',  # noqa: E501
        'attn_name': 'attnName',  # noqa: E501
        'line2': 'line2',  # noqa: E501
        'phone_number': 'phoneNumber',  # noqa: E501
        'fax_number': 'faxNumber',  # noqa: E501
        'email_address': 'emailAddress',  # noqa: E501
        'contact_name': 'contactName',  # noqa: E501
        'last_transaction': 'lastTransaction',  # noqa: E501
        'created_date': 'createdDate',  # noqa: E501
        'modified_date': 'modifiedDate',  # noqa: E501
        'region': 'region',  # noqa: E501
        'is_bill': 'isBill',  # noqa: E501
        'is_ship': 'isShip',  # noqa: E501
        'taxpayer_id_number': 'taxpayerIdNumber',  # noqa: E501
        'certificates': 'certificates',  # noqa: E501
        'custom_fields': 'customFields',  # noqa: E501
        'exposure_zones': 'exposureZones',  # noqa: E501
        'ship_tos': 'shipTos',  # noqa: E501
        'attributes': 'attributes',  # noqa: E501
    }

    read_only_vars = {
        'id',  # noqa: E501
        'last_transaction',  # noqa: E501
        'created_date',  # noqa: E501
        'modified_date',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, company_id, customer_code, name, line1, city, postal_code, country, *args, **kwargs):  # noqa: E501
        """CustomerModel - a model defined in OpenAPI

        Args:
            company_id (int): The unique ID number of the AvaTax company that recorded this customer.
            customer_code (str): The unique code identifying this customer.  Must be unique within your company.                This code should be used in the `customerCode` field of any call that creates or adjusts a transaction  in order to ensure that all exemptions that apply to this customer are correctly considered.                Note: This field is case sensitive.
            name (str): A friendly name identifying this customer.
            line1 (str): First line of the street address of this customer.
            city (str): City component of the street address of this customer.
            postal_code (str): Postal Code / Zip Code component of the address of this customer.
            country (str): Name or ISO 3166 code identifying the country.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): Unique ID number of this customer.. [optional]  # noqa: E501
            alternate_id (str): A customer-configurable alternate ID number for this customer.  You may set this value to match any  other system that would like to reference this customer record.. [optional]  # noqa: E501
            attn_name (str): Indicates the \"Attn:\" component of the address for this customer, if this customer requires mailings to be shipped  to the attention of a specific person or department name.. [optional]  # noqa: E501
            line2 (str): Second line of the street address of this customer.. [optional]  # noqa: E501
            phone_number (str): The main phone number for this customer.. [optional]  # noqa: E501
            fax_number (str): The fax phone number for this customer, if any.. [optional]  # noqa: E501
            email_address (str): The main email address for this customer.. [optional]  # noqa: E501
            contact_name (str): The name of the main contact person for this customer.. [optional]  # noqa: E501
            last_transaction (datetime): Date when this customer last executed a transaction.. [optional]  # noqa: E501
            created_date (datetime): The date when this record was created.. [optional]  # noqa: E501
            modified_date (datetime): The date/time when this record was last modified.. [optional]  # noqa: E501
            region (str): ISO 3166 code identifying the region within the country.  Two and three character ISO 3166 region codes.  This is a required field if the country is US or CA. For other countries, this is an optional field.  For a full list of all supported codes, please see the Definitions API `ListRegions`.. [optional]  # noqa: E501
            is_bill (bool): True if this customer record is specifically used for bill-to purposes.. [optional]  # noqa: E501
            is_ship (bool): True if this customer record is specifically used for ship-to purposes.. [optional]  # noqa: E501
            taxpayer_id_number (str): For customers in the United States, this field is the federal taxpayer ID number.  For businesses, this is  a Federal Employer Identification Number.  For individuals, this will be a Social Security Number.. [optional]  # noqa: E501
            certificates ([CertificateModel]): A list of exemption certficates that apply to this customer.  You can fetch this data by specifying  `$include=certificates` when calling a customer fetch API.. [optional]  # noqa: E501
            custom_fields ([CustomFieldModel]): A list of custom fields defined on this customer.                For more information about custom fields, see the [Avalara Help Center article about custom fields](https://help.avalara.com/0021_Avalara_CertCapture/All_About_CertCapture/Edit_or_Remove_Details_about_Customers).. [optional]  # noqa: E501
            exposure_zones ([ExposureZoneModel]): A list of exposure zones where you do business with this customer.                To keep track of certificates that are needed for each customer, set this value to a list of all exposure zones where you  sell products to this customer.  You can find a list of exposure zones by calling `ListExposureZones`.                This field is often called \"Ship-To States\" or \"Ship-To Zones\", since it generally refers to locations where you ship products  when this customer makes a purchase.                This field is useful for audit purposes since it helps you ensure you have the necessary certificates for each customer.. [optional]  # noqa: E501
            ship_tos ([CustomerModel]): A list of ship-to customer records that are connected to this bill-to customer.                Customer records represent businesses or individuals who can provide exemption certificates.  Some customers  may have certificates that are linked to their shipping address or their billing address.  To group these  customer records together, you may link multiple bill-to and ship-to addresses together to represent a single  entity that has multiple different addresses of different kinds.. [optional]  # noqa: E501
            attributes ([CustomerAttributeModel]): A list of attributes that apply to this customer.                You can fetch this data by specifying `$include=attributes` when calling a customer fetch API.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.company_id = company_id
        self.customer_code = customer_code
        self.name = name
        self.line1 = line1
        self.city = city
        self.postal_code = postal_code
        self.country = country
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, company_id, customer_code, name, line1, city, postal_code, country, *args, **kwargs):  # noqa: E501
        """CustomerModel - a model defined in OpenAPI

        Args:
            company_id (int): The unique ID number of the AvaTax company that recorded this customer.
            customer_code (str): The unique code identifying this customer.  Must be unique within your company.                This code should be used in the `customerCode` field of any call that creates or adjusts a transaction  in order to ensure that all exemptions that apply to this customer are correctly considered.                Note: This field is case sensitive.
            name (str): A friendly name identifying this customer.
            line1 (str): First line of the street address of this customer.
            city (str): City component of the street address of this customer.
            postal_code (str): Postal Code / Zip Code component of the address of this customer.
            country (str): Name or ISO 3166 code identifying the country.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): Unique ID number of this customer.. [optional]  # noqa: E501
            alternate_id (str): A customer-configurable alternate ID number for this customer.  You may set this value to match any  other system that would like to reference this customer record.. [optional]  # noqa: E501
            attn_name (str): Indicates the \"Attn:\" component of the address for this customer, if this customer requires mailings to be shipped  to the attention of a specific person or department name.. [optional]  # noqa: E501
            line2 (str): Second line of the street address of this customer.. [optional]  # noqa: E501
            phone_number (str): The main phone number for this customer.. [optional]  # noqa: E501
            fax_number (str): The fax phone number for this customer, if any.. [optional]  # noqa: E501
            email_address (str): The main email address for this customer.. [optional]  # noqa: E501
            contact_name (str): The name of the main contact person for this customer.. [optional]  # noqa: E501
            last_transaction (datetime): Date when this customer last executed a transaction.. [optional]  # noqa: E501
            created_date (datetime): The date when this record was created.. [optional]  # noqa: E501
            modified_date (datetime): The date/time when this record was last modified.. [optional]  # noqa: E501
            region (str): ISO 3166 code identifying the region within the country.  Two and three character ISO 3166 region codes.  This is a required field if the country is US or CA. For other countries, this is an optional field.  For a full list of all supported codes, please see the Definitions API `ListRegions`.. [optional]  # noqa: E501
            is_bill (bool): True if this customer record is specifically used for bill-to purposes.. [optional]  # noqa: E501
            is_ship (bool): True if this customer record is specifically used for ship-to purposes.. [optional]  # noqa: E501
            taxpayer_id_number (str): For customers in the United States, this field is the federal taxpayer ID number.  For businesses, this is  a Federal Employer Identification Number.  For individuals, this will be a Social Security Number.. [optional]  # noqa: E501
            certificates ([CertificateModel]): A list of exemption certficates that apply to this customer.  You can fetch this data by specifying  `$include=certificates` when calling a customer fetch API.. [optional]  # noqa: E501
            custom_fields ([CustomFieldModel]): A list of custom fields defined on this customer.                For more information about custom fields, see the [Avalara Help Center article about custom fields](https://help.avalara.com/0021_Avalara_CertCapture/All_About_CertCapture/Edit_or_Remove_Details_about_Customers).. [optional]  # noqa: E501
            exposure_zones ([ExposureZoneModel]): A list of exposure zones where you do business with this customer.                To keep track of certificates that are needed for each customer, set this value to a list of all exposure zones where you  sell products to this customer.  You can find a list of exposure zones by calling `ListExposureZones`.                This field is often called \"Ship-To States\" or \"Ship-To Zones\", since it generally refers to locations where you ship products  when this customer makes a purchase.                This field is useful for audit purposes since it helps you ensure you have the necessary certificates for each customer.. [optional]  # noqa: E501
            ship_tos ([CustomerModel]): A list of ship-to customer records that are connected to this bill-to customer.                Customer records represent businesses or individuals who can provide exemption certificates.  Some customers  may have certificates that are linked to their shipping address or their billing address.  To group these  customer records together, you may link multiple bill-to and ship-to addresses together to represent a single  entity that has multiple different addresses of different kinds.. [optional]  # noqa: E501
            attributes ([CustomerAttributeModel]): A list of attributes that apply to this customer.                You can fetch this data by specifying `$include=attributes` when calling a customer fetch API.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.company_id = company_id
        self.customer_code = customer_code
        self.name = name
        self.line1 = line1
        self.city = city
        self.postal_code = postal_code
        self.country = country
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
