"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError



class TransactionSummary(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('juris_type',): {
            'COUNTRY': "Country",
            'STATE': "State",
            'COUNTY': "County",
            'CITY': "City",
            'SPECIAL': "Special",
        },
        ('rate_type',): {
            'REDUCEDA': "ReducedA",
            'REDUCEDB': "ReducedB",
            'FOOD': "Food",
            'GENERAL': "General",
            'INCREASEDSTANDARD': "IncreasedStandard",
            'LINENRENTAL': "LinenRental",
            'MEDICAL': "Medical",
            'CONSTRUCTION': "Construction",
            'PARKING': "Parking",
            'SUPERREDUCED': "SuperReduced",
            'REDUCEDR': "ReducedR",
            'STANDARD': "Standard",
            'LEASING': "Leasing",
            'LEASINGLOW': "LeasingLow",
            'SERVICES': "Services",
            'ZERO': "Zero",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'country': (str,),  # noqa: E501
            'region': (str,),  # noqa: E501
            'juris_type': (str,),  # noqa: E501
            'juris_code': (str,),  # noqa: E501
            'juris_name': (str,),  # noqa: E501
            'tax_authority_type': (int,),  # noqa: E501
            'state_assigned_no': (str,),  # noqa: E501
            'tax_type': (str,),  # noqa: E501
            'tax_sub_type': (str,),  # noqa: E501
            'tax_name': (str,),  # noqa: E501
            'tax_group': (str,),  # noqa: E501
            'rate_type': (str,),  # noqa: E501
            'rate_type_code': (str,),  # noqa: E501
            'taxable': (float,),  # noqa: E501
            'rate': (float,),  # noqa: E501
            'tax': (float,),  # noqa: E501
            'tax_calculated': (float,),  # noqa: E501
            'non_taxable': (float,),  # noqa: E501
            'exemption': (float,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'country': 'country',  # noqa: E501
        'region': 'region',  # noqa: E501
        'juris_type': 'jurisType',  # noqa: E501
        'juris_code': 'jurisCode',  # noqa: E501
        'juris_name': 'jurisName',  # noqa: E501
        'tax_authority_type': 'taxAuthorityType',  # noqa: E501
        'state_assigned_no': 'stateAssignedNo',  # noqa: E501
        'tax_type': 'taxType',  # noqa: E501
        'tax_sub_type': 'taxSubType',  # noqa: E501
        'tax_name': 'taxName',  # noqa: E501
        'tax_group': 'taxGroup',  # noqa: E501
        'rate_type': 'rateType',  # noqa: E501
        'rate_type_code': 'rateTypeCode',  # noqa: E501
        'taxable': 'taxable',  # noqa: E501
        'rate': 'rate',  # noqa: E501
        'tax': 'tax',  # noqa: E501
        'tax_calculated': 'taxCalculated',  # noqa: E501
        'non_taxable': 'nonTaxable',  # noqa: E501
        'exemption': 'exemption',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """TransactionSummary - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            country (str): Two character ISO-3166 country code.. [optional]  # noqa: E501
            region (str): Two or three character ISO region, state or province code, if applicable.. [optional]  # noqa: E501
            juris_type (str): The type of jurisdiction that collects this tax.. [optional]  # noqa: E501
            juris_code (str): Jurisdiction Code for the taxing jurisdiction. [optional]  # noqa: E501
            juris_name (str): The name of the jurisdiction that collects this tax.. [optional]  # noqa: E501
            tax_authority_type (int): The unique ID of the Tax Authority Type that collects this tax.. [optional]  # noqa: E501
            state_assigned_no (str): The state assigned number of the jurisdiction that collects this tax.. [optional]  # noqa: E501
            tax_type (str): The tax type of this tax.. [optional]  # noqa: E501
            tax_sub_type (str): The tax subtype of this tax.. [optional]  # noqa: E501
            tax_name (str): The name of the tax.. [optional]  # noqa: E501
            tax_group (str): Group code when special grouping is enabled.. [optional]  # noqa: E501
            rate_type (str): DEPRECATED - Date: 3/1/2018, Version: 18.3, Message: Please use rateTypeCode instead.  Indicates the tax rate type.. [optional]  # noqa: E501
            rate_type_code (str): Indicates the code of the rate type.  Use [ListRateTypesByCountry](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListRateTypesByCountry/) API for a full list of rate type codes.. [optional]  # noqa: E501
            taxable (float): Tax Base - The adjusted taxable amount.. [optional]  # noqa: E501
            rate (float): Tax Rate - The rate of taxation, as a fraction of the amount.. [optional]  # noqa: E501
            tax (float): Tax amount - The calculated tax (Base * Rate).. [optional]  # noqa: E501
            tax_calculated (float): The amount of tax that AvaTax calculated for the transaction.                If you used a `taxOverride` of type `taxAmount`, there may be a difference between  the `tax` field which applies your override, and the `TaxCalculated` field which  represents the amount of tax that AvaTax calculated for this transaction without override.                You can use this for comparison.. [optional]  # noqa: E501
            non_taxable (float): The amount of the transaction that was non-taxable.. [optional]  # noqa: E501
            exemption (float): The amount of the transaction that was exempt.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """TransactionSummary - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            country (str): Two character ISO-3166 country code.. [optional]  # noqa: E501
            region (str): Two or three character ISO region, state or province code, if applicable.. [optional]  # noqa: E501
            juris_type (str): The type of jurisdiction that collects this tax.. [optional]  # noqa: E501
            juris_code (str): Jurisdiction Code for the taxing jurisdiction. [optional]  # noqa: E501
            juris_name (str): The name of the jurisdiction that collects this tax.. [optional]  # noqa: E501
            tax_authority_type (int): The unique ID of the Tax Authority Type that collects this tax.. [optional]  # noqa: E501
            state_assigned_no (str): The state assigned number of the jurisdiction that collects this tax.. [optional]  # noqa: E501
            tax_type (str): The tax type of this tax.. [optional]  # noqa: E501
            tax_sub_type (str): The tax subtype of this tax.. [optional]  # noqa: E501
            tax_name (str): The name of the tax.. [optional]  # noqa: E501
            tax_group (str): Group code when special grouping is enabled.. [optional]  # noqa: E501
            rate_type (str): DEPRECATED - Date: 3/1/2018, Version: 18.3, Message: Please use rateTypeCode instead.  Indicates the tax rate type.. [optional]  # noqa: E501
            rate_type_code (str): Indicates the code of the rate type.  Use [ListRateTypesByCountry](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListRateTypesByCountry/) API for a full list of rate type codes.. [optional]  # noqa: E501
            taxable (float): Tax Base - The adjusted taxable amount.. [optional]  # noqa: E501
            rate (float): Tax Rate - The rate of taxation, as a fraction of the amount.. [optional]  # noqa: E501
            tax (float): Tax amount - The calculated tax (Base * Rate).. [optional]  # noqa: E501
            tax_calculated (float): The amount of tax that AvaTax calculated for the transaction.                If you used a `taxOverride` of type `taxAmount`, there may be a difference between  the `tax` field which applies your override, and the `TaxCalculated` field which  represents the amount of tax that AvaTax calculated for this transaction without override.                You can use this for comparison.. [optional]  # noqa: E501
            non_taxable (float): The amount of the transaction that was non-taxable.. [optional]  # noqa: E501
            exemption (float): The amount of the transaction that was exempt.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
