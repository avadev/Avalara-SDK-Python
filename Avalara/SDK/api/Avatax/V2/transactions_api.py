"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.api_client import ApiClient, Endpoint as _Endpoint
from Avalara.SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from Avalara.SDK.model.Avatax.V2.create_or_adjust_transaction_model import CreateOrAdjustTransactionModel
from Avalara.SDK.model.Avatax.V2.transaction_model import TransactionModel
from Avalara.SDK.model.Avatax.V2.transaction_model_fetch_result import TransactionModelFetchResult
from Avalara.SDK.exceptions import ApiTypeError, ApiValueError, ApiException
from Avalara.SDK.oauth_helper import avalara_retry_oauth

class TransactionsApi(object):

    def __init__(self, api_client):
        self.__set_configuration(api_client)
    
    def __verify_api_client(self,api_client):
        if api_client is None:
            raise ApiValueError("APIClient not defined")
    
    def __set_configuration(self, api_client):
        self.__verify_api_client(api_client)
        api_client.set_sdk_version("0.1.1")
        self.api_client = api_client
		
        self.create_or_adjust_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/avatax/transactions/createoradjust',
                'operation_id': 'create_or_adjust_transaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'include',
                    'x_avalara_client',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'include':
                        (str,),
                    'x_avalara_client':
                        (str,),
                    'body':
                        (CreateOrAdjustTransactionModel,),
                },
                'attribute_map': {
                    'include': '$include',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'include': 'query',
                    'x_avalara_client': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': '2.0',
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )
        self.get_transaction_by_code_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModel,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/avatax/companies/{companyCode}/transactions/{transactionCode}',
                'operation_id': 'get_transaction_by_code',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_code',
                    'transaction_code',
                    'document_type',
                    'include',
                    'x_avalara_client',
                ],
                'required': [
                    'company_code',
                    'transaction_code',
                ],
                'nullable': [
                ],
                'enum': [
                    'document_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('document_type',): {

                        "SALESORDER": "SalesOrder",
                        "SALESINVOICE": "SalesInvoice",
                        "PURCHASEORDER": "PurchaseOrder",
                        "PURCHASEINVOICE": "PurchaseInvoice",
                        "RETURNORDER": "ReturnOrder",
                        "RETURNINVOICE": "ReturnInvoice",
                        "INVENTORYTRANSFERORDER": "InventoryTransferOrder",
                        "INVENTORYTRANSFERINVOICE": "InventoryTransferInvoice",
                        "REVERSECHARGEORDER": "ReverseChargeOrder",
                        "REVERSECHARGEINVOICE": "ReverseChargeInvoice",
                        "CUSTOMSINVOICE": "CustomsInvoice",
                        "CUSTOMSORDER": "CustomsOrder",
                        "ANY": "Any"
                    },
                },
                'openapi_types': {
                    'company_code':
                        (str,),
                    'transaction_code':
                        (str,),
                    'document_type':
                        (str,),
                    'include':
                        (str,),
                    'x_avalara_client':
                        (str,),
                },
                'attribute_map': {
                    'company_code': 'companyCode',
                    'transaction_code': 'transactionCode',
                    'document_type': 'documentType',
                    'include': '$include',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_code': 'path',
                    'transaction_code': 'path',
                    'document_type': 'query',
                    'include': 'query',
                    'x_avalara_client': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': '2.0',
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )
        self.list_transactions_by_company_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionModelFetchResult,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/avatax/companies/{companyCode}/transactions',
                'operation_id': 'list_transactions_by_company',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_code',
                    'data_source_id',
                    'include',
                    'filter',
                    'top',
                    'skip',
                    'order_by',
                    'x_avalara_client',
                ],
                'required': [
                    'company_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'company_code':
                        (str,),
                    'data_source_id':
                        (int,),
                    'include':
                        (str,),
                    'filter':
                        (str,),
                    'top':
                        (int,),
                    'skip':
                        (int,),
                    'order_by':
                        (str,),
                    'x_avalara_client':
                        (str,),
                },
                'attribute_map': {
                    'company_code': 'companyCode',
                    'data_source_id': 'dataSourceId',
                    'include': '$include',
                    'filter': '$filter',
                    'top': '$top',
                    'skip': '$skip',
                    'order_by': '$orderBy',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_code': 'path',
                    'data_source_id': 'query',
                    'include': 'query',
                    'filter': 'query',
                    'top': 'query',
                    'skip': 'query',
                    'order_by': 'query',
                    'x_avalara_client': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': '2.0',
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )

    @avalara_retry_oauth(max_retry_attempts=2)
    def create_or_adjust_transaction(
        self,
        **kwargs
    ):
        """Create or adjust a transaction  # noqa: E501

        Records a new transaction or adjust an existing transaction in AvaTax.                The `CreateOrAdjustTransaction` endpoint is used to create a new transaction or update an existing one.  This API  can help you create an idempotent service that creates transactions  If there exists a transaction identified by code, the original transaction will be adjusted by using the meta data  in the input transaction.                The `CreateOrAdjustTransaction` API cannot modify any transaction that has been reported to a tax authority using  the Avalara Managed Returns Service or any other tax filing service.  If you call this API to attempt to modify  a transaction that has been reported on a tax filing, you will receive the error `CannotModifyLockedTransaction`.                To generate a refund for a transaction, use the `RefundTransaction` API.                If you don't specify the field `type` in your request, you will get an estimate of type `SalesOrder`, which will not be recorded in the database.                A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like  sales, purchases, inventory transfer, and returns (also called refunds).  You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:                * Lines  * Details (implies lines)  * Summary (implies details)  * Addresses  * SummaryOnly (omit lines and details - reduces API response size)  * LinesOnly (omit details - reduces API response size)  * ForceTimeout - Simulates a timeout.  This adds a 30 second delay and error to your API call.  This can be used to test your code to ensure it can respond correctly in the case of a dropped connection.                If you omit the `$include` parameter, the API will assume you want `Summary,Addresses`.                NOTE: Avoid using the following strings in your transaction codes as they are encoding strings and will be interpreted differently:  * \\_-ava2f-\\_  * \\_-ava2b-\\_  * \\_-ava3f-\\_  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, BatchServiceAdmin, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser. * This API depends on the following active services:*Required* (all):  AvaTaxPro, BasicReturns.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_or_adjust_transaction(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            include (str): Specifies objects to include in the response after transaction is created. [optional]
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            body (CreateOrAdjustTransactionModel): The transaction you wish to create or adjust. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.create_or_adjust_transaction_endpoint.call_with_http_info(**kwargs)

    @avalara_retry_oauth(max_retry_attempts=2)
    def get_transaction_by_code(
        self,
        company_code,
        transaction_code,
        **kwargs
    ):
        """Retrieve a single transaction by code  # noqa: E501

        Get the current transaction identified by this company code, transaction code, and document type.                A transaction is uniquely identified by `companyCode`, `code` (often called Transaction Code), and `documentType`.                For compatibility purposes, when this API finds multiple transactions with the same transaction code, and if you have not specified  the `type` parameter to this API, it will default to selecting the `SalesInvoices` transaction. To change this behavior, use the  optional `documentType` parameter to specify the specific document type you wish to find.                If this transaction was adjusted, the return value of this API will be the current transaction with this code.                You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:                * Lines  * Details (implies lines)  * Summary (implies details)  * Addresses  * SummaryOnly (omit lines and details - reduces API response size)  * LinesOnly (omit details - reduces API response size)                NOTE: If your companyCode or transactionCode contains any of these characters /, +, ? or a space please use the following encoding before making a request:  * Replace '/' with '\\_-ava2f-\\_'  For example: document/Code becomes document_-ava2f-_Code  * Replace '+' with '\\_-ava2b-\\_'  For example: document+Code becomes document_-ava2b-_Code  * Replace '?' with '\\_-ava3f-\\_'  For example: document?Code becomes document_-ava3f-_Code  * Replace '%' with '\\_-ava25-\\_'  For example: document%Code becomes document_-ava25-_Code  * Replace '#' with '\\_-ava23-\\_'  For example: document#Code becomes document_-ava23-_Code  * Replace ' ' with '%20'  For example: document Code becomes document%20Code  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, AccountUser, BatchServiceAdmin, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser. * This API depends on the following active services:*Required* (all):  AvaTaxPro, BasicReturns.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_by_code(company_code, transaction_code, async_req=True)
        >>> result = thread.get()

        Args:
            company_code (str): The company code of the company that recorded this transaction
            transaction_code (str): The transaction code to retrieve

        Keyword Args:
            document_type (str): (Optional): The document type of the transaction to retrieve. [optional]
            include (str): Specifies objects to include in this fetch call. [optional]
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_code'] = \
            company_code
        kwargs['transaction_code'] = \
            transaction_code
        return self.get_transaction_by_code_endpoint.call_with_http_info(**kwargs)

    @avalara_retry_oauth(max_retry_attempts=2)
    def list_transactions_by_company(
        self,
        company_code,
        **kwargs
    ):
        """Retrieve all transactions  # noqa: E501

        List all transactions attached to this company.                This endpoint is limited to returning 1,000 transactions at a time maximum.                When listing transactions, you must specify a `date` range filter.  If you do not specify a `$filter` that includes a `date` field  criteria, the query will default to looking at only those transactions with `date` in the past 30 days.                A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like  sales, purchases, inventory transfer, and returns (also called refunds).                Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .  Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.                You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:                * Lines  * Details (implies lines)  * Summary (implies details)  * Addresses  * SummaryOnly (omit lines and details - reduces API response size)  * LinesOnly (omit details - reduces API response size)                NOTE: If your companyCode or transactionCode contains any of these characters /, +, ? or a space please use the following encoding before making a request:  * Replace '/' with '\\_-ava2f-\\_'  For example: document/Code becomes document_-ava2f-_Code  * Replace '+' with '\\_-ava2b-\\_'  For example: document+Code becomes document_-ava2b-_Code  * Replace '?' with '\\_-ava3f-\\_'  For example: document?Code becomes document_-ava3f-_Code  * Replace '%' with '\\_-ava25-\\_'  For example: document%Code becomes document_-ava25-_Code  * Replace '#' with '\\_-ava23-\\_'  For example: document#Code becomes document_-ava23-_Code  * Replace ' ' with '%20'  For example: document Code becomes document%20Code  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, AccountUser, BatchServiceAdmin, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser. * This API depends on the following active services:*Required* (all):  AvaTaxPro, BasicReturns.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_transactions_by_company(company_code, async_req=True)
        >>> result = thread.get()

        Args:
            company_code (str): The company code of the company that recorded this transaction

        Keyword Args:
            data_source_id (int): Optionally filter transactions to those from a specific data source.. [optional]
            include (str): Specifies objects to include in this fetch call. [optional]
            filter (str): A filter statement to identify specific records to retrieve.  For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* exchangeRateCurrencyCode, totalDiscount, lines, addresses, locationTypes, summary, taxDetailsByTaxType, parameters, userDefinedFields, messages, invoiceMessages, isFakeTransaction, deliveryTerms. [optional]
            top (int): If nonzero, return no more than this number of results.  Used with `$skip` to provide pagination for large datasets.  Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.. [optional]
            skip (int): If nonzero, skip this number of results before returning data.  Used with `$top` to provide pagination for large datasets.. [optional]
            order_by (str): A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.. [optional]
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionModelFetchResult
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_code'] = \
            company_code
        return self.list_transactions_by_company_endpoint.call_with_http_info(**kwargs)

