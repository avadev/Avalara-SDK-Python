"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError


def lazy_import():
    from Avalara.SDK.model.Avatax.V2.ava_tax_message import AvaTaxMessage
    from Avalara.SDK.model.Avatax.V2.invoice_message_model import InvoiceMessageModel
    from Avalara.SDK.model.Avatax.V2.tax_details_by_tax_type import TaxDetailsByTaxType
    from Avalara.SDK.model.Avatax.V2.transaction_address_model import TransactionAddressModel
    from Avalara.SDK.model.Avatax.V2.transaction_line_model import TransactionLineModel
    from Avalara.SDK.model.Avatax.V2.transaction_location_type_model import TransactionLocationTypeModel
    from Avalara.SDK.model.Avatax.V2.transaction_parameter_model import TransactionParameterModel
    from Avalara.SDK.model.Avatax.V2.transaction_summary import TransactionSummary
    from Avalara.SDK.model.Avatax.V2.transaction_user_defined_field_model import TransactionUserDefinedFieldModel
    globals()['AvaTaxMessage'] = AvaTaxMessage
    globals()['InvoiceMessageModel'] = InvoiceMessageModel
    globals()['TaxDetailsByTaxType'] = TaxDetailsByTaxType
    globals()['TransactionAddressModel'] = TransactionAddressModel
    globals()['TransactionLineModel'] = TransactionLineModel
    globals()['TransactionLocationTypeModel'] = TransactionLocationTypeModel
    globals()['TransactionParameterModel'] = TransactionParameterModel
    globals()['TransactionSummary'] = TransactionSummary
    globals()['TransactionUserDefinedFieldModel'] = TransactionUserDefinedFieldModel


class TransactionModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('status',): {
            'TEMPORARY': "Temporary",
            'SAVED': "Saved",
            'POSTED': "Posted",
            'COMMITTED': "Committed",
            'CANCELLED': "Cancelled",
            'ADJUSTED': "Adjusted",
            'QUEUED': "Queued",
            'PENDINGAPPROVAL': "PendingApproval",
            'ANY': "Any",
        },
        ('type',): {
            'SALESORDER': "SalesOrder",
            'SALESINVOICE': "SalesInvoice",
            'PURCHASEORDER': "PurchaseOrder",
            'PURCHASEINVOICE': "PurchaseInvoice",
            'RETURNORDER': "ReturnOrder",
            'RETURNINVOICE': "ReturnInvoice",
            'INVENTORYTRANSFERORDER': "InventoryTransferOrder",
            'INVENTORYTRANSFERINVOICE': "InventoryTransferInvoice",
            'REVERSECHARGEORDER': "ReverseChargeOrder",
            'REVERSECHARGEINVOICE': "ReverseChargeInvoice",
            'CUSTOMSINVOICE': "CustomsInvoice",
            'CUSTOMSORDER': "CustomsOrder",
            'ANY': "Any",
        },
        ('tax_override_type',): {
            'NONE': "None",
            'TAXAMOUNT': "TaxAmount",
            'EXEMPTION': "Exemption",
            'TAXDATE': "TaxDate",
            'ACCRUEDTAXAMOUNT': "AccruedTaxAmount",
            'DERIVETAXABLE': "DeriveTaxable",
            'OUTOFHARBOR': "OutOfHarbor",
            'TAXAMOUNTBYTAXTYPE': "TaxAmountByTaxType",
        },
        ('adjustment_reason',): {
            'NOTADJUSTED': "NotAdjusted",
            'SOURCINGISSUE': "SourcingIssue",
            'RECONCILEDWITHGENERALLEDGER': "ReconciledWithGeneralLedger",
            'EXEMPTCERTAPPLIED': "ExemptCertApplied",
            'PRICEADJUSTED': "PriceAdjusted",
            'PRODUCTRETURNED': "ProductReturned",
            'PRODUCTEXCHANGED': "ProductExchanged",
            'BADDEBT': "BadDebt",
            'OTHER': "Other",
            'OFFLINE': "Offline",
        },
        ('delivery_terms',): {
            'DAP': "DAP",
            'DDP': "DDP",
        },
    }

    validations = {
        ('country',): {
            'max_length': 2,
            'min_length': 2,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (int,),  # noqa: E501
            'code': (str,),  # noqa: E501
            'company_id': (int,),  # noqa: E501
            'date': (date,),  # noqa: E501
            'payment_date': (date,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'batch_code': (str,),  # noqa: E501
            'currency_code': (str,),  # noqa: E501
            'exchange_rate_currency_code': (str,),  # noqa: E501
            'customer_usage_type': (str,),  # noqa: E501
            'entity_use_code': (str,),  # noqa: E501
            'customer_vendor_code': (str,),  # noqa: E501
            'customer_code': (str,),  # noqa: E501
            'exempt_no': (str,),  # noqa: E501
            'reconciled': (bool,),  # noqa: E501
            'location_code': (str,),  # noqa: E501
            'reporting_location_code': (str,),  # noqa: E501
            'purchase_order_no': (str,),  # noqa: E501
            'reference_code': (str,),  # noqa: E501
            'salesperson_code': (str,),  # noqa: E501
            'tax_override_type': (str,),  # noqa: E501
            'tax_override_amount': (float,),  # noqa: E501
            'tax_override_reason': (str,),  # noqa: E501
            'total_amount': (float,),  # noqa: E501
            'total_exempt': (float,),  # noqa: E501
            'total_discount': (float,),  # noqa: E501
            'total_tax': (float,),  # noqa: E501
            'total_taxable': (float,),  # noqa: E501
            'total_tax_calculated': (float,),  # noqa: E501
            'adjustment_reason': (str,),  # noqa: E501
            'adjustment_description': (str,),  # noqa: E501
            'locked': (bool,),  # noqa: E501
            'region': (str,),  # noqa: E501
            'country': (str,),  # noqa: E501
            'version': (int,),  # noqa: E501
            'software_version': (str,),  # noqa: E501
            'origin_address_id': (int,),  # noqa: E501
            'destination_address_id': (int,),  # noqa: E501
            'exchange_rate_effective_date': (date,),  # noqa: E501
            'exchange_rate': (float,),  # noqa: E501
            'is_seller_importer_of_record': (bool,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'email': (str,),  # noqa: E501
            'business_identification_no': (str,),  # noqa: E501
            'modified_date': (datetime,),  # noqa: E501
            'modified_user_id': (int,),  # noqa: E501
            'tax_date': (datetime,),  # noqa: E501
            'lines': ([TransactionLineModel],),  # noqa: E501
            'addresses': ([TransactionAddressModel],),  # noqa: E501
            'location_types': ([TransactionLocationTypeModel],),  # noqa: E501
            'summary': ([TransactionSummary],),  # noqa: E501
            'tax_details_by_tax_type': ([TaxDetailsByTaxType],),  # noqa: E501
            'parameters': ([TransactionParameterModel],),  # noqa: E501
            'user_defined_fields': ([TransactionUserDefinedFieldModel],),  # noqa: E501
            'messages': ([AvaTaxMessage],),  # noqa: E501
            'invoice_messages': ([InvoiceMessageModel],),  # noqa: E501
            'customer_supplier_name': (str,),  # noqa: E501
            'data_source_id': (int,),  # noqa: E501
            'delivery_terms': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'code': 'code',  # noqa: E501
        'company_id': 'companyId',  # noqa: E501
        'date': 'date',  # noqa: E501
        'payment_date': 'paymentDate',  # noqa: E501
        'status': 'status',  # noqa: E501
        'type': 'type',  # noqa: E501
        'batch_code': 'batchCode',  # noqa: E501
        'currency_code': 'currencyCode',  # noqa: E501
        'exchange_rate_currency_code': 'exchangeRateCurrencyCode',  # noqa: E501
        'customer_usage_type': 'customerUsageType',  # noqa: E501
        'entity_use_code': 'entityUseCode',  # noqa: E501
        'customer_vendor_code': 'customerVendorCode',  # noqa: E501
        'customer_code': 'customerCode',  # noqa: E501
        'exempt_no': 'exemptNo',  # noqa: E501
        'reconciled': 'reconciled',  # noqa: E501
        'location_code': 'locationCode',  # noqa: E501
        'reporting_location_code': 'reportingLocationCode',  # noqa: E501
        'purchase_order_no': 'purchaseOrderNo',  # noqa: E501
        'reference_code': 'referenceCode',  # noqa: E501
        'salesperson_code': 'salespersonCode',  # noqa: E501
        'tax_override_type': 'taxOverrideType',  # noqa: E501
        'tax_override_amount': 'taxOverrideAmount',  # noqa: E501
        'tax_override_reason': 'taxOverrideReason',  # noqa: E501
        'total_amount': 'totalAmount',  # noqa: E501
        'total_exempt': 'totalExempt',  # noqa: E501
        'total_discount': 'totalDiscount',  # noqa: E501
        'total_tax': 'totalTax',  # noqa: E501
        'total_taxable': 'totalTaxable',  # noqa: E501
        'total_tax_calculated': 'totalTaxCalculated',  # noqa: E501
        'adjustment_reason': 'adjustmentReason',  # noqa: E501
        'adjustment_description': 'adjustmentDescription',  # noqa: E501
        'locked': 'locked',  # noqa: E501
        'region': 'region',  # noqa: E501
        'country': 'country',  # noqa: E501
        'version': 'version',  # noqa: E501
        'software_version': 'softwareVersion',  # noqa: E501
        'origin_address_id': 'originAddressId',  # noqa: E501
        'destination_address_id': 'destinationAddressId',  # noqa: E501
        'exchange_rate_effective_date': 'exchangeRateEffectiveDate',  # noqa: E501
        'exchange_rate': 'exchangeRate',  # noqa: E501
        'is_seller_importer_of_record': 'isSellerImporterOfRecord',  # noqa: E501
        'description': 'description',  # noqa: E501
        'email': 'email',  # noqa: E501
        'business_identification_no': 'businessIdentificationNo',  # noqa: E501
        'modified_date': 'modifiedDate',  # noqa: E501
        'modified_user_id': 'modifiedUserId',  # noqa: E501
        'tax_date': 'taxDate',  # noqa: E501
        'lines': 'lines',  # noqa: E501
        'addresses': 'addresses',  # noqa: E501
        'location_types': 'locationTypes',  # noqa: E501
        'summary': 'summary',  # noqa: E501
        'tax_details_by_tax_type': 'taxDetailsByTaxType',  # noqa: E501
        'parameters': 'parameters',  # noqa: E501
        'user_defined_fields': 'userDefinedFields',  # noqa: E501
        'messages': 'messages',  # noqa: E501
        'invoice_messages': 'invoiceMessages',  # noqa: E501
        'customer_supplier_name': 'customerSupplierName',  # noqa: E501
        'data_source_id': 'dataSourceId',  # noqa: E501
        'delivery_terms': 'deliveryTerms',  # noqa: E501
    }

    read_only_vars = {
        'id',  # noqa: E501
        'code',  # noqa: E501
        'modified_date',  # noqa: E501
        'modified_user_id',  # noqa: E501
        'tax_date',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """TransactionModel - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): The unique ID number of this transaction.. [optional]  # noqa: E501
            code (str): A unique customer-provided code identifying this transaction.. [optional]  # noqa: E501
            company_id (int): The unique ID number of the company that recorded this transaction.. [optional]  # noqa: E501
            date (date): The date on which this transaction occurred.. [optional]  # noqa: E501
            payment_date (date): DEPRECATED - Date: 07/25/2018, Version: 18.7, Message: This field is deprecated and will return null till its removed.  The date when payment was made on this transaction.  By default, this should be the same as the date of the transaction.. [optional]  # noqa: E501
            status (str): The status of the transaction.. [optional]  # noqa: E501
            type (str): The type of the transaction.                Transactions of type `SalesOrder`, `ReturnOrder`, and so on are temporary estimates and will not be saved.                Transactions of type `SalesInvoice, `ReturnInvoice`, and so on are permanent transactions that can be reported to tax authorities  if they are in status `Committed`.                A sales transaction represents a sale from the company to a customer.  A purchase transaction represents a purchase made by the company.  A return transaction represents a customer who decided to request a refund after purchasing a product from the company.  An inventory  transfer transaction represents goods that were moved from one location of the company to another location without changing ownership.. [optional]  # noqa: E501
            batch_code (str): If this transaction was created as part of a batch, this code indicates which batch.. [optional]  # noqa: E501
            currency_code (str): The three-character ISO 4217 currency code that was used for payment for this transaction.. [optional]  # noqa: E501
            exchange_rate_currency_code (str): The three-character ISO 4217 exchange rate currency code that was used for payment for this transaction.. [optional]  # noqa: E501
            customer_usage_type (str): DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use entityUseCode instead.  The customer usage type for this transaction.  Customer usage types often affect exemption or taxability rules.. [optional]  # noqa: E501
            entity_use_code (str): The entity use code for this transaction.  Entity use codes often affect exemption or taxability rules.. [optional]  # noqa: E501
            customer_vendor_code (str): DEPRECATED - Date: 3/1/2018, Version: 18.3, Message: Please use `customerCode`  This field has been renamed to `customerCode` to match documentation for other APIs related to exemption customers.. [optional]  # noqa: E501
            customer_code (str): Unique code identifying the customer that requested this transaction.                When you specify a `customerCode`, AvaTax will look to see if a customer exists with this code in the exemption certificate system.  If that customer exists, and if that customer has uploaded an exemption certificate that applies to this transaction, the relevant  parts of this transaction that can use the exemption certificate will be treated as exempt.. [optional]  # noqa: E501
            exempt_no (str): The customer Tax Id Number (tax_number) associated with a certificate - Sales tax calculation requests first determine if there is an applicable  ECMS entry available, and will utilize it for exemption processing. If no applicable ECMS entry is available, the AvaTax service  will determine if an Exemption Number field is populated or an Entity/Use Code is included in the sales tax calculation request,  and will perform exemption processing using either of those two options.. [optional]  # noqa: E501
            reconciled (bool): If this transaction has been reconciled against the company's ledger, this value is set to true.. [optional]  # noqa: E501
            location_code (str): DEPRECATED - Date: 3/1/2018, Version: 18.3, Message: In order to ensure consistency of field names, Please use reportingLocationCode instead.  This field has been replaced by the reportingLocationCode field. [optional]  # noqa: E501
            reporting_location_code (str): For customers who use [location-based tax reporting](https://developer.avalara.com/avatax/dev-guide/locations/location-based-reporting),  this field controls how this transaction will be filed for multi-location tax filings.                If you specify a non-null value for this field, AvaTax will ensure that this transaction is reported on the tax return associated  with the [LocationModel](https://developer.avalara.com/api-reference/avatax/rest/v2/models/LocationModel/) identified by this code.                This field does not affect any addresses for the transaction.  It only controls the tax filing behavior of this transaction.                If you are looking for information about how to set up addresses for a transaction, please see [Using Address Types](https://developer.avalara.com/avatax/dev-guide/customizing-transaction/address-types/)  in the AvaTax Developer Guide.. [optional]  # noqa: E501
            purchase_order_no (str): The customer-supplied purchase order number of this transaction.. [optional]  # noqa: E501
            reference_code (str): A user-defined reference code for this transaction.. [optional]  # noqa: E501
            salesperson_code (str): The salesperson who provided this transaction.  Not required.. [optional]  # noqa: E501
            tax_override_type (str): If a tax override was applied to this transaction, indicates what type of tax override was applied.. [optional]  # noqa: E501
            tax_override_amount (float): If a tax override was applied to this transaction, indicates the amount of tax that was requested by the customer.. [optional]  # noqa: E501
            tax_override_reason (str): If a tax override was applied to this transaction, indicates the reason for the tax override.. [optional]  # noqa: E501
            total_amount (float): The total amount of this transaction.. [optional]  # noqa: E501
            total_exempt (float): The amount of this transaction that was exempt.. [optional]  # noqa: E501
            total_discount (float): The total amount of discounts applied to all lines within this transaction.. [optional]  # noqa: E501
            total_tax (float): The total tax for all lines in this transaction.                If you used a `taxOverride` of type `taxAmount` for any lines in this transaction, this value  may be different than the amount of tax calculated by AvaTax.  The amount of tax calculated by  AvaTax will be stored in the `totalTaxCalculated` field, whereas this field will contain the  total tax that was charged on the transaction.                You can compare the `totalTax` and `totalTaxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.. [optional]  # noqa: E501
            total_taxable (float): The portion of the total amount of this transaction that was taxable.. [optional]  # noqa: E501
            total_tax_calculated (float): The amount of tax that AvaTax calculated for the transaction.                If you used a `taxOverride` of type `taxAmount` for any lines in this transaction, this value  will represent the amount that AvaTax calculated for this transaction without applying the override.  The field `totalTax` will be the total amount of tax after all overrides are applied.                You can compare the `totalTax` and `totalTaxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.. [optional]  # noqa: E501
            adjustment_reason (str): If this transaction was adjusted, indicates the unique ID number of the reason why the transaction was adjusted.. [optional]  # noqa: E501
            adjustment_description (str): If this transaction was adjusted, indicates a description of the reason why the transaction was adjusted.. [optional]  # noqa: E501
            locked (bool): If this transaction has been reported to a tax authority, this transaction is considered locked and may not be adjusted after reporting.. [optional]  # noqa: E501
            region (str): The two-or-three character ISO region code of the region for this transaction.. [optional]  # noqa: E501
            country (str): The two-character ISO 3166 code of the country for this transaction.. [optional]  # noqa: E501
            version (int): If this transaction was adjusted, this indicates the version number of this transaction.  Incremented each time the transaction  is adjusted.. [optional]  # noqa: E501
            software_version (str): The software version used to calculate this transaction.. [optional]  # noqa: E501
            origin_address_id (int): The unique ID number of the origin address for this transaction.. [optional]  # noqa: E501
            destination_address_id (int): The unique ID number of the destination address for this transaction.. [optional]  # noqa: E501
            exchange_rate_effective_date (date): If this transaction included foreign currency exchange, this is the date as of which the exchange rate was calculated.. [optional]  # noqa: E501
            exchange_rate (float): If this transaction included foreign currency exchange, this is the exchange rate that was used.. [optional]  # noqa: E501
            is_seller_importer_of_record (bool): By default, the value is null, when the value is null, the value can be set at nexus level and used.  If the value is not null, it will override the value at nexus level.                If true, this seller was considered the importer of record of a product shipped internationally.                If this transaction is not an international transaction, this field may be left blank.                The \"importer of record\" is liable to pay customs and import duties for products shipped internationally.  If  you specify that the seller is the importer of record, then estimates of customs and import duties will be added  as tax details to the transaction.  Otherwise, the buyer is considered the importer of record, and customs  and import duties will not be added to the tax details for this transaction.. [optional]  # noqa: E501
            description (str): Description of this transaction.  Field permits unicode values.. [optional]  # noqa: E501
            email (str): Email address associated with this transaction.. [optional]  # noqa: E501
            business_identification_no (str): VAT business identification number used for this transaction.. [optional]  # noqa: E501
            modified_date (datetime): The date/time when this record was last modified.. [optional]  # noqa: E501
            modified_user_id (int): The user ID of the user who last modified this record.. [optional]  # noqa: E501
            tax_date (datetime): Tax date for this transaction. [optional]  # noqa: E501
            lines ([TransactionLineModel]): A list of line items in this transaction.  To fetch this list, add the query string `?$include=Lines` or `?$include=Details` to your URL.. [optional]  # noqa: E501
            addresses ([TransactionAddressModel]): A list of line items in this transaction.  To fetch this list, add the query string `?$include=Addresses` to your URL.                For more information about transaction addresses, please see [Using Address Types](https://developer.avalara.com/avatax/dev-guide/customizing-transaction/address-types/)  in the AvaTax Developer Guide.. [optional]  # noqa: E501
            location_types ([TransactionLocationTypeModel]): A list of location types in this transaction.  To fetch this list, add the query string `?$include=Addresses` to your URL.. [optional]  # noqa: E501
            summary ([TransactionSummary]): Contains a summary of tax on this transaction.. [optional]  # noqa: E501
            tax_details_by_tax_type ([TaxDetailsByTaxType]): Contains the tax details per tax type. [optional]  # noqa: E501
            parameters ([TransactionParameterModel]): Contains a list of extra parameters that were set when the transaction was created.. [optional]  # noqa: E501
            user_defined_fields ([TransactionUserDefinedFieldModel]): Custom user fields/flex fields for this transaction.. [optional]  # noqa: E501
            messages ([AvaTaxMessage]): List of informational and warning messages regarding this API call.  These messages are only relevant to the current API call.. [optional]  # noqa: E501
            invoice_messages ([InvoiceMessageModel]): Invoice messages associated with this document. Currently, this stores legally-required VAT messages.. [optional]  # noqa: E501
            customer_supplier_name (str): The name of the supplier / exporter / seller.  For sales doctype this will be the name of your own company for which you are reporting.  For purchases doctype this will be the name of the supplier you have purchased from.. [optional]  # noqa: E501
            data_source_id (int): The Id of the datasource from which this transaction originated.  This value will be overridden by the system to take the datasource Id from the call header.. [optional]  # noqa: E501
            delivery_terms (str): The Delivery Terms is a field used in conjunction with Importer of Record to influence whether AvaTax includes Import Duty and Tax values in the transaction totals or not.  Delivered at Place (DAP) and Delivered Duty Paid (DDP) are two delivery terms that  indicate that Import Duty and Tax should be included in the transaction total.  This field is also used for reports.  This field is used for future feature support. This field is not currently in use.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """TransactionModel - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): The unique ID number of this transaction.. [optional]  # noqa: E501
            code (str): A unique customer-provided code identifying this transaction.. [optional]  # noqa: E501
            company_id (int): The unique ID number of the company that recorded this transaction.. [optional]  # noqa: E501
            date (date): The date on which this transaction occurred.. [optional]  # noqa: E501
            payment_date (date): DEPRECATED - Date: 07/25/2018, Version: 18.7, Message: This field is deprecated and will return null till its removed.  The date when payment was made on this transaction.  By default, this should be the same as the date of the transaction.. [optional]  # noqa: E501
            status (str): The status of the transaction.. [optional]  # noqa: E501
            type (str): The type of the transaction.                Transactions of type `SalesOrder`, `ReturnOrder`, and so on are temporary estimates and will not be saved.                Transactions of type `SalesInvoice, `ReturnInvoice`, and so on are permanent transactions that can be reported to tax authorities  if they are in status `Committed`.                A sales transaction represents a sale from the company to a customer.  A purchase transaction represents a purchase made by the company.  A return transaction represents a customer who decided to request a refund after purchasing a product from the company.  An inventory  transfer transaction represents goods that were moved from one location of the company to another location without changing ownership.. [optional]  # noqa: E501
            batch_code (str): If this transaction was created as part of a batch, this code indicates which batch.. [optional]  # noqa: E501
            currency_code (str): The three-character ISO 4217 currency code that was used for payment for this transaction.. [optional]  # noqa: E501
            exchange_rate_currency_code (str): The three-character ISO 4217 exchange rate currency code that was used for payment for this transaction.. [optional]  # noqa: E501
            customer_usage_type (str): DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use entityUseCode instead.  The customer usage type for this transaction.  Customer usage types often affect exemption or taxability rules.. [optional]  # noqa: E501
            entity_use_code (str): The entity use code for this transaction.  Entity use codes often affect exemption or taxability rules.. [optional]  # noqa: E501
            customer_vendor_code (str): DEPRECATED - Date: 3/1/2018, Version: 18.3, Message: Please use `customerCode`  This field has been renamed to `customerCode` to match documentation for other APIs related to exemption customers.. [optional]  # noqa: E501
            customer_code (str): Unique code identifying the customer that requested this transaction.                When you specify a `customerCode`, AvaTax will look to see if a customer exists with this code in the exemption certificate system.  If that customer exists, and if that customer has uploaded an exemption certificate that applies to this transaction, the relevant  parts of this transaction that can use the exemption certificate will be treated as exempt.. [optional]  # noqa: E501
            exempt_no (str): The customer Tax Id Number (tax_number) associated with a certificate - Sales tax calculation requests first determine if there is an applicable  ECMS entry available, and will utilize it for exemption processing. If no applicable ECMS entry is available, the AvaTax service  will determine if an Exemption Number field is populated or an Entity/Use Code is included in the sales tax calculation request,  and will perform exemption processing using either of those two options.. [optional]  # noqa: E501
            reconciled (bool): If this transaction has been reconciled against the company's ledger, this value is set to true.. [optional]  # noqa: E501
            location_code (str): DEPRECATED - Date: 3/1/2018, Version: 18.3, Message: In order to ensure consistency of field names, Please use reportingLocationCode instead.  This field has been replaced by the reportingLocationCode field. [optional]  # noqa: E501
            reporting_location_code (str): For customers who use [location-based tax reporting](https://developer.avalara.com/avatax/dev-guide/locations/location-based-reporting),  this field controls how this transaction will be filed for multi-location tax filings.                If you specify a non-null value for this field, AvaTax will ensure that this transaction is reported on the tax return associated  with the [LocationModel](https://developer.avalara.com/api-reference/avatax/rest/v2/models/LocationModel/) identified by this code.                This field does not affect any addresses for the transaction.  It only controls the tax filing behavior of this transaction.                If you are looking for information about how to set up addresses for a transaction, please see [Using Address Types](https://developer.avalara.com/avatax/dev-guide/customizing-transaction/address-types/)  in the AvaTax Developer Guide.. [optional]  # noqa: E501
            purchase_order_no (str): The customer-supplied purchase order number of this transaction.. [optional]  # noqa: E501
            reference_code (str): A user-defined reference code for this transaction.. [optional]  # noqa: E501
            salesperson_code (str): The salesperson who provided this transaction.  Not required.. [optional]  # noqa: E501
            tax_override_type (str): If a tax override was applied to this transaction, indicates what type of tax override was applied.. [optional]  # noqa: E501
            tax_override_amount (float): If a tax override was applied to this transaction, indicates the amount of tax that was requested by the customer.. [optional]  # noqa: E501
            tax_override_reason (str): If a tax override was applied to this transaction, indicates the reason for the tax override.. [optional]  # noqa: E501
            total_amount (float): The total amount of this transaction.. [optional]  # noqa: E501
            total_exempt (float): The amount of this transaction that was exempt.. [optional]  # noqa: E501
            total_discount (float): The total amount of discounts applied to all lines within this transaction.. [optional]  # noqa: E501
            total_tax (float): The total tax for all lines in this transaction.                If you used a `taxOverride` of type `taxAmount` for any lines in this transaction, this value  may be different than the amount of tax calculated by AvaTax.  The amount of tax calculated by  AvaTax will be stored in the `totalTaxCalculated` field, whereas this field will contain the  total tax that was charged on the transaction.                You can compare the `totalTax` and `totalTaxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.. [optional]  # noqa: E501
            total_taxable (float): The portion of the total amount of this transaction that was taxable.. [optional]  # noqa: E501
            total_tax_calculated (float): The amount of tax that AvaTax calculated for the transaction.                If you used a `taxOverride` of type `taxAmount` for any lines in this transaction, this value  will represent the amount that AvaTax calculated for this transaction without applying the override.  The field `totalTax` will be the total amount of tax after all overrides are applied.                You can compare the `totalTax` and `totalTaxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.. [optional]  # noqa: E501
            adjustment_reason (str): If this transaction was adjusted, indicates the unique ID number of the reason why the transaction was adjusted.. [optional]  # noqa: E501
            adjustment_description (str): If this transaction was adjusted, indicates a description of the reason why the transaction was adjusted.. [optional]  # noqa: E501
            locked (bool): If this transaction has been reported to a tax authority, this transaction is considered locked and may not be adjusted after reporting.. [optional]  # noqa: E501
            region (str): The two-or-three character ISO region code of the region for this transaction.. [optional]  # noqa: E501
            country (str): The two-character ISO 3166 code of the country for this transaction.. [optional]  # noqa: E501
            version (int): If this transaction was adjusted, this indicates the version number of this transaction.  Incremented each time the transaction  is adjusted.. [optional]  # noqa: E501
            software_version (str): The software version used to calculate this transaction.. [optional]  # noqa: E501
            origin_address_id (int): The unique ID number of the origin address for this transaction.. [optional]  # noqa: E501
            destination_address_id (int): The unique ID number of the destination address for this transaction.. [optional]  # noqa: E501
            exchange_rate_effective_date (date): If this transaction included foreign currency exchange, this is the date as of which the exchange rate was calculated.. [optional]  # noqa: E501
            exchange_rate (float): If this transaction included foreign currency exchange, this is the exchange rate that was used.. [optional]  # noqa: E501
            is_seller_importer_of_record (bool): By default, the value is null, when the value is null, the value can be set at nexus level and used.  If the value is not null, it will override the value at nexus level.                If true, this seller was considered the importer of record of a product shipped internationally.                If this transaction is not an international transaction, this field may be left blank.                The \"importer of record\" is liable to pay customs and import duties for products shipped internationally.  If  you specify that the seller is the importer of record, then estimates of customs and import duties will be added  as tax details to the transaction.  Otherwise, the buyer is considered the importer of record, and customs  and import duties will not be added to the tax details for this transaction.. [optional]  # noqa: E501
            description (str): Description of this transaction.  Field permits unicode values.. [optional]  # noqa: E501
            email (str): Email address associated with this transaction.. [optional]  # noqa: E501
            business_identification_no (str): VAT business identification number used for this transaction.. [optional]  # noqa: E501
            modified_date (datetime): The date/time when this record was last modified.. [optional]  # noqa: E501
            modified_user_id (int): The user ID of the user who last modified this record.. [optional]  # noqa: E501
            tax_date (datetime): Tax date for this transaction. [optional]  # noqa: E501
            lines ([TransactionLineModel]): A list of line items in this transaction.  To fetch this list, add the query string `?$include=Lines` or `?$include=Details` to your URL.. [optional]  # noqa: E501
            addresses ([TransactionAddressModel]): A list of line items in this transaction.  To fetch this list, add the query string `?$include=Addresses` to your URL.                For more information about transaction addresses, please see [Using Address Types](https://developer.avalara.com/avatax/dev-guide/customizing-transaction/address-types/)  in the AvaTax Developer Guide.. [optional]  # noqa: E501
            location_types ([TransactionLocationTypeModel]): A list of location types in this transaction.  To fetch this list, add the query string `?$include=Addresses` to your URL.. [optional]  # noqa: E501
            summary ([TransactionSummary]): Contains a summary of tax on this transaction.. [optional]  # noqa: E501
            tax_details_by_tax_type ([TaxDetailsByTaxType]): Contains the tax details per tax type. [optional]  # noqa: E501
            parameters ([TransactionParameterModel]): Contains a list of extra parameters that were set when the transaction was created.. [optional]  # noqa: E501
            user_defined_fields ([TransactionUserDefinedFieldModel]): Custom user fields/flex fields for this transaction.. [optional]  # noqa: E501
            messages ([AvaTaxMessage]): List of informational and warning messages regarding this API call.  These messages are only relevant to the current API call.. [optional]  # noqa: E501
            invoice_messages ([InvoiceMessageModel]): Invoice messages associated with this document. Currently, this stores legally-required VAT messages.. [optional]  # noqa: E501
            customer_supplier_name (str): The name of the supplier / exporter / seller.  For sales doctype this will be the name of your own company for which you are reporting.  For purchases doctype this will be the name of the supplier you have purchased from.. [optional]  # noqa: E501
            data_source_id (int): The Id of the datasource from which this transaction originated.  This value will be overridden by the system to take the datasource Id from the call header.. [optional]  # noqa: E501
            delivery_terms (str): The Delivery Terms is a field used in conjunction with Importer of Record to influence whether AvaTax includes Import Duty and Tax values in the transaction totals or not.  Delivered at Place (DAP) and Delivered Duty Paid (DDP) are two delivery terms that  indicate that Import Duty and Tax should be included in the transaction total.  This field is also used for reports.  This field is used for future feature support. This field is not currently in use.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
