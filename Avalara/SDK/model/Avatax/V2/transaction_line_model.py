"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError


def lazy_import():
    from Avalara.SDK.model.Avatax.V2.transaction_line_detail_model import TransactionLineDetailModel
    from Avalara.SDK.model.Avatax.V2.transaction_line_location_type_model import TransactionLineLocationTypeModel
    from Avalara.SDK.model.Avatax.V2.transaction_line_parameter_model import TransactionLineParameterModel
    from Avalara.SDK.model.Avatax.V2.transaction_line_tax_amount_by_tax_type_model import TransactionLineTaxAmountByTaxTypeModel
    from Avalara.SDK.model.Avatax.V2.transaction_line_user_defined_field_model import TransactionLineUserDefinedFieldModel
    globals()['TransactionLineDetailModel'] = TransactionLineDetailModel
    globals()['TransactionLineLocationTypeModel'] = TransactionLineLocationTypeModel
    globals()['TransactionLineParameterModel'] = TransactionLineParameterModel
    globals()['TransactionLineTaxAmountByTaxTypeModel'] = TransactionLineTaxAmountByTaxTypeModel
    globals()['TransactionLineUserDefinedFieldModel'] = TransactionLineUserDefinedFieldModel


class TransactionLineModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('sourcing',): {
            'MIXED': "Mixed",
            'DESTINATION': "Destination",
            'ORIGIN': "Origin",
        },
        ('tax_override_type',): {
            'NONE': "None",
            'TAXAMOUNT': "TaxAmount",
            'EXEMPTION': "Exemption",
            'TAXDATE': "TaxDate",
            'ACCRUEDTAXAMOUNT': "AccruedTaxAmount",
            'DERIVETAXABLE': "DeriveTaxable",
            'OUTOFHARBOR': "OutOfHarbor",
            'TAXAMOUNTBYTAXTYPE': "TaxAmountByTaxType",
        },
        ('marketplace_liability_type',): {
            'MARKETPLACE': "Marketplace",
            'SELLER': "Seller",
        },
        ('deemed_supplier',): {
            'MARKETPLACE': "Marketplace",
            'MERCHANT': "Merchant",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (int,),  # noqa: E501
            'transaction_id': (int,),  # noqa: E501
            'line_number': (str,),  # noqa: E501
            'boundary_override_id': (int,),  # noqa: E501
            'customer_usage_type': (str,),  # noqa: E501
            'entity_use_code': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'destination_address_id': (int,),  # noqa: E501
            'origin_address_id': (int,),  # noqa: E501
            'discount_amount': (float,),  # noqa: E501
            'discount_type_id': (int,),  # noqa: E501
            'exempt_amount': (float,),  # noqa: E501
            'exempt_cert_id': (int,),  # noqa: E501
            'certificate_id': (str,),  # noqa: E501
            'exempt_no': (str,),  # noqa: E501
            'is_item_taxable': (bool,),  # noqa: E501
            'is_sstp': (bool,),  # noqa: E501
            'item_code': (str,),  # noqa: E501
            'line_amount': (float,),  # noqa: E501
            'quantity': (float,),  # noqa: E501
            'ref1': (str,),  # noqa: E501
            'ref2': (str,),  # noqa: E501
            'reporting_date': (date,),  # noqa: E501
            'rev_account': (str,),  # noqa: E501
            'sourcing': (str,),  # noqa: E501
            'tax': (float,),  # noqa: E501
            'taxable_amount': (float,),  # noqa: E501
            'tax_calculated': (float,),  # noqa: E501
            'tax_code': (str,),  # noqa: E501
            'tax_code_id': (int,),  # noqa: E501
            'tax_date': (date,),  # noqa: E501
            'tax_engine': (str,),  # noqa: E501
            'tax_override_type': (str,),  # noqa: E501
            'business_identification_no': (str,),  # noqa: E501
            'tax_override_amount': (float,),  # noqa: E501
            'tax_override_reason': (str,),  # noqa: E501
            'tax_included': (bool,),  # noqa: E501
            'merchant_seller_id': (int,),  # noqa: E501
            'merchant_seller_identifier': (str,),  # noqa: E501
            'marketplace_liability_type': (str,),  # noqa: E501
            'origination_document_id': (str,),  # noqa: E501
            'origination_site': (str,),  # noqa: E501
            'details': ([TransactionLineDetailModel],),  # noqa: E501
            'non_passthrough_details': ([TransactionLineDetailModel],),  # noqa: E501
            'line_location_types': ([TransactionLineLocationTypeModel],),  # noqa: E501
            'parameters': ([TransactionLineParameterModel],),  # noqa: E501
            'user_defined_fields': ([TransactionLineUserDefinedFieldModel],),  # noqa: E501
            'hs_code': (str,),  # noqa: E501
            'cost_insurance_freight': (float,),  # noqa: E501
            'vat_code': (str,),  # noqa: E501
            'vat_number_type_id': (int,),  # noqa: E501
            'tax_amount_by_tax_types': ([TransactionLineTaxAmountByTaxTypeModel],),  # noqa: E501
            'deemed_supplier': (str,),  # noqa: E501
            'category': (str,),  # noqa: E501
            'summary': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'transaction_id': 'transactionId',  # noqa: E501
        'line_number': 'lineNumber',  # noqa: E501
        'boundary_override_id': 'boundaryOverrideId',  # noqa: E501
        'customer_usage_type': 'customerUsageType',  # noqa: E501
        'entity_use_code': 'entityUseCode',  # noqa: E501
        'description': 'description',  # noqa: E501
        'destination_address_id': 'destinationAddressId',  # noqa: E501
        'origin_address_id': 'originAddressId',  # noqa: E501
        'discount_amount': 'discountAmount',  # noqa: E501
        'discount_type_id': 'discountTypeId',  # noqa: E501
        'exempt_amount': 'exemptAmount',  # noqa: E501
        'exempt_cert_id': 'exemptCertId',  # noqa: E501
        'certificate_id': 'certificateId',  # noqa: E501
        'exempt_no': 'exemptNo',  # noqa: E501
        'is_item_taxable': 'isItemTaxable',  # noqa: E501
        'is_sstp': 'isSSTP',  # noqa: E501
        'item_code': 'itemCode',  # noqa: E501
        'line_amount': 'lineAmount',  # noqa: E501
        'quantity': 'quantity',  # noqa: E501
        'ref1': 'ref1',  # noqa: E501
        'ref2': 'ref2',  # noqa: E501
        'reporting_date': 'reportingDate',  # noqa: E501
        'rev_account': 'revAccount',  # noqa: E501
        'sourcing': 'sourcing',  # noqa: E501
        'tax': 'tax',  # noqa: E501
        'taxable_amount': 'taxableAmount',  # noqa: E501
        'tax_calculated': 'taxCalculated',  # noqa: E501
        'tax_code': 'taxCode',  # noqa: E501
        'tax_code_id': 'taxCodeId',  # noqa: E501
        'tax_date': 'taxDate',  # noqa: E501
        'tax_engine': 'taxEngine',  # noqa: E501
        'tax_override_type': 'taxOverrideType',  # noqa: E501
        'business_identification_no': 'businessIdentificationNo',  # noqa: E501
        'tax_override_amount': 'taxOverrideAmount',  # noqa: E501
        'tax_override_reason': 'taxOverrideReason',  # noqa: E501
        'tax_included': 'taxIncluded',  # noqa: E501
        'merchant_seller_id': 'merchantSellerId',  # noqa: E501
        'merchant_seller_identifier': 'merchantSellerIdentifier',  # noqa: E501
        'marketplace_liability_type': 'marketplaceLiabilityType',  # noqa: E501
        'origination_document_id': 'originationDocumentId',  # noqa: E501
        'origination_site': 'originationSite',  # noqa: E501
        'details': 'details',  # noqa: E501
        'non_passthrough_details': 'nonPassthroughDetails',  # noqa: E501
        'line_location_types': 'lineLocationTypes',  # noqa: E501
        'parameters': 'parameters',  # noqa: E501
        'user_defined_fields': 'userDefinedFields',  # noqa: E501
        'hs_code': 'hsCode',  # noqa: E501
        'cost_insurance_freight': 'costInsuranceFreight',  # noqa: E501
        'vat_code': 'vatCode',  # noqa: E501
        'vat_number_type_id': 'vatNumberTypeId',  # noqa: E501
        'tax_amount_by_tax_types': 'taxAmountByTaxTypes',  # noqa: E501
        'deemed_supplier': 'deemedSupplier',  # noqa: E501
        'category': 'category',  # noqa: E501
        'summary': 'summary',  # noqa: E501
    }

    read_only_vars = {
        'certificate_id',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """TransactionLineModel - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): The unique ID number of this transaction line item.. [optional]  # noqa: E501
            transaction_id (int): The unique ID number of the transaction to which this line item belongs.. [optional]  # noqa: E501
            line_number (str): The line number or code indicating the line on this invoice or receipt or document.. [optional]  # noqa: E501
            boundary_override_id (int): The unique ID number of the boundary override applied to this line item.. [optional]  # noqa: E501
            customer_usage_type (str): DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use entityUseCode instead.  The customer usage type for this line item.  Usage type often affects taxability rules.. [optional]  # noqa: E501
            entity_use_code (str): The entity use code for this line item.  Usage type often affects taxability rules.. [optional]  # noqa: E501
            description (str): A description of the item or service represented by this line.. [optional]  # noqa: E501
            destination_address_id (int): The unique ID number of the destination address where this line was delivered or sold.  In the case of a point-of-sale transaction, the destination address and origin address will be the same.  In the case of a shipped transaction, they will be different.. [optional]  # noqa: E501
            origin_address_id (int): The unique ID number of the origin address where this line was delivered or sold.  In the case of a point-of-sale transaction, the origin address and destination address will be the same.  In the case of a shipped transaction, they will be different.. [optional]  # noqa: E501
            discount_amount (float): The amount of discount that was applied to this line item.  This represents the difference between list price and sale price of the item.  In general, a discount represents money that did not change hands; tax is calculated on only the amount of money that changed hands.. [optional]  # noqa: E501
            discount_type_id (int): The type of discount, if any, that was applied to this line item.. [optional]  # noqa: E501
            exempt_amount (float): The amount of this line item that was exempt.. [optional]  # noqa: E501
            exempt_cert_id (int): The unique ID number of the exemption certificate that applied to this line item. It is the calc_id associated with a certificate in CertCapture.. [optional]  # noqa: E501
            certificate_id (str): The CertCapture Certificate ID. [optional]  # noqa: E501
            exempt_no (str): The customer Tax Id Number (tax_number) associated with a certificate - Sales tax calculation requests first determine if there is an applicable  ECMS entry available, and will utilize it for exemption processing. If no applicable ECMS entry is available, the AvaTax service  will determine if an Exemption Number field is populated or an Entity/Use Code is included in the sales tax calculation request,  and will perform exemption processing using either of those two options.. [optional]  # noqa: E501
            is_item_taxable (bool): True if this item is taxable.. [optional]  # noqa: E501
            is_sstp (bool): True if this item is a Streamlined Sales Tax line item.. [optional]  # noqa: E501
            item_code (str): The code string of the item represented by this line item.. [optional]  # noqa: E501
            line_amount (float): The total amount of the transaction, including both taxable and exempt.  This is the total price for all items.  To determine the individual item price, divide this by quantity.. [optional]  # noqa: E501
            quantity (float): The quantity of products sold on this line item.. [optional]  # noqa: E501
            ref1 (str): A user-defined reference identifier for this transaction line item.. [optional]  # noqa: E501
            ref2 (str): A user-defined reference identifier for this transaction line item.. [optional]  # noqa: E501
            reporting_date (date): The date when this transaction should be reported.  By default, all transactions are reported on the date when the actual transaction took place.  In some cases, line items may be reported later due to delayed shipments or other business reasons.. [optional]  # noqa: E501
            rev_account (str): The revenue account number for this line item.. [optional]  # noqa: E501
            sourcing (str): Indicates whether this line item was taxed according to the origin or destination.. [optional]  # noqa: E501
            tax (float): The tax for this line in this transaction.                If you used a `taxOverride` of type `taxAmount` for this line, this value  will represent the amount of your override.  AvaTax will still attempt to calculate the correct tax  for this line and will store that calculated value in the `taxCalculated` field.                You can compare the `tax` and `taxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.. [optional]  # noqa: E501
            taxable_amount (float): The taxable amount of this line item.. [optional]  # noqa: E501
            tax_calculated (float): The amount of tax that AvaTax calculated for the transaction.                If you used a `taxOverride` of type `taxAmount`, there may be a difference between  the `tax` field which applies your override, and the `taxCalculated` field which  represents the amount of tax that AvaTax calculated without the override.                You can compare the `tax` and `taxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.. [optional]  # noqa: E501
            tax_code (str): The code string for the tax code that was used to calculate this line item.. [optional]  # noqa: E501
            tax_code_id (int): The unique ID number for the tax code that was used to calculate this line item.. [optional]  # noqa: E501
            tax_date (date): The date that was used for calculating tax amounts for this line item.  By default, this date should be the same as the document date.  In some cases, for example when a consumer returns a product purchased previously, line items may be calculated using a tax date in the past  so that the consumer can receive a refund for the correct tax amount that was charged when the item was originally purchased.. [optional]  # noqa: E501
            tax_engine (str): The tax engine identifier that was used to calculate this line item.. [optional]  # noqa: E501
            tax_override_type (str): If a tax override was specified, this indicates the type of tax override.. [optional]  # noqa: E501
            business_identification_no (str): VAT business identification number used for this transaction.. [optional]  # noqa: E501
            tax_override_amount (float): If a tax override was specified, this indicates the amount of tax that was requested.. [optional]  # noqa: E501
            tax_override_reason (str): If a tax override was specified, represents the reason for the tax override.. [optional]  # noqa: E501
            tax_included (bool): Indicates whether the `amount` for this line already includes tax.                If this value is `true`, the final price of this line including tax will equal the value in `amount`.                If this value is `null` or `false`, the final price will equal `amount` plus whatever taxes apply to this line.. [optional]  # noqa: E501
            merchant_seller_id (int): DEPRECATED - Date: 04/15/2021, Version: 21.4, Message: Please use merchantSellerIdentifier instead.  ID of the merchant selling on the Marketplace. This field must be populated by Marketplace.. [optional]  # noqa: E501
            merchant_seller_identifier (str): ID of the merchant selling on the Marketplace. This field must be populated by Marketplace.. [optional]  # noqa: E501
            marketplace_liability_type (str): This field will identify who is remitting Marketplace or Seller. This field must be populated by Marketplace.. [optional]  # noqa: E501
            origination_document_id (str): The transaction's original ID in its origination system. [optional]  # noqa: E501
            origination_site (str): Synonym of Marketplace Origination. Name of the Marketplace where the transaction originated from.. [optional]  # noqa: E501
            details ([TransactionLineDetailModel]): Optional: A list of tax details for this line item.                Tax details represent taxes being charged by various tax authorities. Taxes that appear in the `details` collection are intended to be  displayed to the customer and charged as a 'tax' on the invoice.                To fetch this list, add the query string `?$include=Details` to your URL.. [optional]  # noqa: E501
            non_passthrough_details ([TransactionLineDetailModel]): Optional: A list of non-passthrough tax details for this line item.                Tax details represent taxes being charged by various tax authorities. Taxes that appear in the `nonPassthroughDetails` collection are  taxes that must be paid directly by the company and not shown to the customer.. [optional]  # noqa: E501
            line_location_types ([TransactionLineLocationTypeModel]): Optional: A list of location types for this line item.  To fetch this list, add the query string \"?$include=LineLocationTypes\" to your URL.. [optional]  # noqa: E501
            parameters ([TransactionLineParameterModel]): Contains a list of extra parameters that were set when the transaction was created.. [optional]  # noqa: E501
            user_defined_fields ([TransactionLineUserDefinedFieldModel]): Custom user fields/flex fields for this transaction.. [optional]  # noqa: E501
            hs_code (str): The cross-border harmonized system code (HSCode) used to calculate tariffs and duties for this line item.  For a full list of HS codes, see `ListCrossBorderCodes()`.. [optional]  # noqa: E501
            cost_insurance_freight (float): Indicates the cost of insurance and freight for this line.. [optional]  # noqa: E501
            vat_code (str): Indicates the VAT code for this line item.. [optional]  # noqa: E501
            vat_number_type_id (int): Indicates the VAT number type for this line item.. [optional]  # noqa: E501
            tax_amount_by_tax_types ([TransactionLineTaxAmountByTaxTypeModel]): Contains a list of TaxType that are to be overridden with their respective TaxOverrideAmount.. [optional]  # noqa: E501
            deemed_supplier (str): Deemed Supplier field indicates which party on the marketplace transaction is liable for collecting and reporting the VAT. This is based on the 2021 E-commerce legislative reforms in EU and UK. This field will not be used until after July 1, 2021.. [optional]  # noqa: E501
            category (str): Product category breadcrumbs. This is the full path to the category where item is included. Categories should be separated by “ > “.  Multiple category paths per item are accepted. In this case, category paths should be separated by “;”.. [optional]  # noqa: E501
            summary (str): A long description of the product.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """TransactionLineModel - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): The unique ID number of this transaction line item.. [optional]  # noqa: E501
            transaction_id (int): The unique ID number of the transaction to which this line item belongs.. [optional]  # noqa: E501
            line_number (str): The line number or code indicating the line on this invoice or receipt or document.. [optional]  # noqa: E501
            boundary_override_id (int): The unique ID number of the boundary override applied to this line item.. [optional]  # noqa: E501
            customer_usage_type (str): DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use entityUseCode instead.  The customer usage type for this line item.  Usage type often affects taxability rules.. [optional]  # noqa: E501
            entity_use_code (str): The entity use code for this line item.  Usage type often affects taxability rules.. [optional]  # noqa: E501
            description (str): A description of the item or service represented by this line.. [optional]  # noqa: E501
            destination_address_id (int): The unique ID number of the destination address where this line was delivered or sold.  In the case of a point-of-sale transaction, the destination address and origin address will be the same.  In the case of a shipped transaction, they will be different.. [optional]  # noqa: E501
            origin_address_id (int): The unique ID number of the origin address where this line was delivered or sold.  In the case of a point-of-sale transaction, the origin address and destination address will be the same.  In the case of a shipped transaction, they will be different.. [optional]  # noqa: E501
            discount_amount (float): The amount of discount that was applied to this line item.  This represents the difference between list price and sale price of the item.  In general, a discount represents money that did not change hands; tax is calculated on only the amount of money that changed hands.. [optional]  # noqa: E501
            discount_type_id (int): The type of discount, if any, that was applied to this line item.. [optional]  # noqa: E501
            exempt_amount (float): The amount of this line item that was exempt.. [optional]  # noqa: E501
            exempt_cert_id (int): The unique ID number of the exemption certificate that applied to this line item. It is the calc_id associated with a certificate in CertCapture.. [optional]  # noqa: E501
            certificate_id (str): The CertCapture Certificate ID. [optional]  # noqa: E501
            exempt_no (str): The customer Tax Id Number (tax_number) associated with a certificate - Sales tax calculation requests first determine if there is an applicable  ECMS entry available, and will utilize it for exemption processing. If no applicable ECMS entry is available, the AvaTax service  will determine if an Exemption Number field is populated or an Entity/Use Code is included in the sales tax calculation request,  and will perform exemption processing using either of those two options.. [optional]  # noqa: E501
            is_item_taxable (bool): True if this item is taxable.. [optional]  # noqa: E501
            is_sstp (bool): True if this item is a Streamlined Sales Tax line item.. [optional]  # noqa: E501
            item_code (str): The code string of the item represented by this line item.. [optional]  # noqa: E501
            line_amount (float): The total amount of the transaction, including both taxable and exempt.  This is the total price for all items.  To determine the individual item price, divide this by quantity.. [optional]  # noqa: E501
            quantity (float): The quantity of products sold on this line item.. [optional]  # noqa: E501
            ref1 (str): A user-defined reference identifier for this transaction line item.. [optional]  # noqa: E501
            ref2 (str): A user-defined reference identifier for this transaction line item.. [optional]  # noqa: E501
            reporting_date (date): The date when this transaction should be reported.  By default, all transactions are reported on the date when the actual transaction took place.  In some cases, line items may be reported later due to delayed shipments or other business reasons.. [optional]  # noqa: E501
            rev_account (str): The revenue account number for this line item.. [optional]  # noqa: E501
            sourcing (str): Indicates whether this line item was taxed according to the origin or destination.. [optional]  # noqa: E501
            tax (float): The tax for this line in this transaction.                If you used a `taxOverride` of type `taxAmount` for this line, this value  will represent the amount of your override.  AvaTax will still attempt to calculate the correct tax  for this line and will store that calculated value in the `taxCalculated` field.                You can compare the `tax` and `taxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.. [optional]  # noqa: E501
            taxable_amount (float): The taxable amount of this line item.. [optional]  # noqa: E501
            tax_calculated (float): The amount of tax that AvaTax calculated for the transaction.                If you used a `taxOverride` of type `taxAmount`, there may be a difference between  the `tax` field which applies your override, and the `taxCalculated` field which  represents the amount of tax that AvaTax calculated without the override.                You can compare the `tax` and `taxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.. [optional]  # noqa: E501
            tax_code (str): The code string for the tax code that was used to calculate this line item.. [optional]  # noqa: E501
            tax_code_id (int): The unique ID number for the tax code that was used to calculate this line item.. [optional]  # noqa: E501
            tax_date (date): The date that was used for calculating tax amounts for this line item.  By default, this date should be the same as the document date.  In some cases, for example when a consumer returns a product purchased previously, line items may be calculated using a tax date in the past  so that the consumer can receive a refund for the correct tax amount that was charged when the item was originally purchased.. [optional]  # noqa: E501
            tax_engine (str): The tax engine identifier that was used to calculate this line item.. [optional]  # noqa: E501
            tax_override_type (str): If a tax override was specified, this indicates the type of tax override.. [optional]  # noqa: E501
            business_identification_no (str): VAT business identification number used for this transaction.. [optional]  # noqa: E501
            tax_override_amount (float): If a tax override was specified, this indicates the amount of tax that was requested.. [optional]  # noqa: E501
            tax_override_reason (str): If a tax override was specified, represents the reason for the tax override.. [optional]  # noqa: E501
            tax_included (bool): Indicates whether the `amount` for this line already includes tax.                If this value is `true`, the final price of this line including tax will equal the value in `amount`.                If this value is `null` or `false`, the final price will equal `amount` plus whatever taxes apply to this line.. [optional]  # noqa: E501
            merchant_seller_id (int): DEPRECATED - Date: 04/15/2021, Version: 21.4, Message: Please use merchantSellerIdentifier instead.  ID of the merchant selling on the Marketplace. This field must be populated by Marketplace.. [optional]  # noqa: E501
            merchant_seller_identifier (str): ID of the merchant selling on the Marketplace. This field must be populated by Marketplace.. [optional]  # noqa: E501
            marketplace_liability_type (str): This field will identify who is remitting Marketplace or Seller. This field must be populated by Marketplace.. [optional]  # noqa: E501
            origination_document_id (str): The transaction's original ID in its origination system. [optional]  # noqa: E501
            origination_site (str): Synonym of Marketplace Origination. Name of the Marketplace where the transaction originated from.. [optional]  # noqa: E501
            details ([TransactionLineDetailModel]): Optional: A list of tax details for this line item.                Tax details represent taxes being charged by various tax authorities. Taxes that appear in the `details` collection are intended to be  displayed to the customer and charged as a 'tax' on the invoice.                To fetch this list, add the query string `?$include=Details` to your URL.. [optional]  # noqa: E501
            non_passthrough_details ([TransactionLineDetailModel]): Optional: A list of non-passthrough tax details for this line item.                Tax details represent taxes being charged by various tax authorities. Taxes that appear in the `nonPassthroughDetails` collection are  taxes that must be paid directly by the company and not shown to the customer.. [optional]  # noqa: E501
            line_location_types ([TransactionLineLocationTypeModel]): Optional: A list of location types for this line item.  To fetch this list, add the query string \"?$include=LineLocationTypes\" to your URL.. [optional]  # noqa: E501
            parameters ([TransactionLineParameterModel]): Contains a list of extra parameters that were set when the transaction was created.. [optional]  # noqa: E501
            user_defined_fields ([TransactionLineUserDefinedFieldModel]): Custom user fields/flex fields for this transaction.. [optional]  # noqa: E501
            hs_code (str): The cross-border harmonized system code (HSCode) used to calculate tariffs and duties for this line item.  For a full list of HS codes, see `ListCrossBorderCodes()`.. [optional]  # noqa: E501
            cost_insurance_freight (float): Indicates the cost of insurance and freight for this line.. [optional]  # noqa: E501
            vat_code (str): Indicates the VAT code for this line item.. [optional]  # noqa: E501
            vat_number_type_id (int): Indicates the VAT number type for this line item.. [optional]  # noqa: E501
            tax_amount_by_tax_types ([TransactionLineTaxAmountByTaxTypeModel]): Contains a list of TaxType that are to be overridden with their respective TaxOverrideAmount.. [optional]  # noqa: E501
            deemed_supplier (str): Deemed Supplier field indicates which party on the marketplace transaction is liable for collecting and reporting the VAT. This is based on the 2021 E-commerce legislative reforms in EU and UK. This field will not be used until after July 1, 2021.. [optional]  # noqa: E501
            category (str): Product category breadcrumbs. This is the full path to the category where item is included. Categories should be separated by “ > “.  Multiple category paths per item are accepted. In this case, category paths should be separated by “;”.. [optional]  # noqa: E501
            summary (str): A long description of the product.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
