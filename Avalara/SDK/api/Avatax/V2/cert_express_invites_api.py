"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.api_client import ApiClient, Endpoint as _Endpoint
from Avalara.SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from Avalara.SDK.model.Avatax.V2.cert_express_invitation_model import CertExpressInvitationModel
from Avalara.SDK.model.Avatax.V2.cert_express_invitation_model_fetch_result import CertExpressInvitationModelFetchResult
from Avalara.SDK.model.Avatax.V2.cert_express_invitation_status_model import CertExpressInvitationStatusModel
from Avalara.SDK.model.Avatax.V2.create_cert_express_invitation_model import CreateCertExpressInvitationModel
from Avalara.SDK.exceptions import ApiTypeError, ApiValueError, ApiException
from Avalara.SDK.oauth_helper import avalara_retry_oauth

class CertExpressInvitesApi(object):

    def __init__(self, api_client):
        self.__set_configuration(api_client)
    
    def __verify_api_client(self,api_client):
        if api_client is None:
            raise ApiValueError("APIClient not defined")
    
    def __set_configuration(self, api_client):
        self.__verify_api_client(api_client)
        api_client.set_sdk_version("0.1.1")
        self.api_client = api_client
		
        self.create_cert_express_invitation_endpoint = _Endpoint(
            settings={
                'response_type': ([CertExpressInvitationStatusModel],),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/avatax/companies/{companyId}/customers/{customerCode}/certexpressinvites',
                'operation_id': 'create_cert_express_invitation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_id',
                    'customer_code',
                    'x_avalara_client',
                    'body',
                ],
                'required': [
                    'company_id',
                    'customer_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'company_id':
                        (int,),
                    'customer_code':
                        (str,),
                    'x_avalara_client':
                        (str,),
                    'body':
                        ([CreateCertExpressInvitationModel],),
                },
                'attribute_map': {
                    'company_id': 'companyId',
                    'customer_code': 'customerCode',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_id': 'path',
                    'customer_code': 'path',
                    'x_avalara_client': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': '2.0',
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/json',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )
        self.get_cert_express_invitation_endpoint = _Endpoint(
            settings={
                'response_type': (CertExpressInvitationModel,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/avatax/companies/{companyId}/customers/{customerCode}/certexpressinvites/{id}',
                'operation_id': 'get_cert_express_invitation',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_id',
                    'customer_code',
                    'id',
                    'include',
                    'x_avalara_client',
                ],
                'required': [
                    'company_id',
                    'customer_code',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'company_id':
                        (int,),
                    'customer_code':
                        (str,),
                    'id':
                        (int,),
                    'include':
                        (str,),
                    'x_avalara_client':
                        (str,),
                },
                'attribute_map': {
                    'company_id': 'companyId',
                    'customer_code': 'customerCode',
                    'id': 'id',
                    'include': '$include',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_id': 'path',
                    'customer_code': 'path',
                    'id': 'path',
                    'include': 'query',
                    'x_avalara_client': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': '2.0',
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )
        self.list_cert_express_invitations_endpoint = _Endpoint(
            settings={
                'response_type': (CertExpressInvitationModelFetchResult,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/avatax/companies/{companyId}/certexpressinvites',
                'operation_id': 'list_cert_express_invitations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_id',
                    'include',
                    'filter',
                    'top',
                    'skip',
                    'order_by',
                    'x_avalara_client',
                ],
                'required': [
                    'company_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'company_id':
                        (int,),
                    'include':
                        (str,),
                    'filter':
                        (str,),
                    'top':
                        (int,),
                    'skip':
                        (int,),
                    'order_by':
                        (str,),
                    'x_avalara_client':
                        (str,),
                },
                'attribute_map': {
                    'company_id': 'companyId',
                    'include': '$include',
                    'filter': '$filter',
                    'top': '$top',
                    'skip': '$skip',
                    'order_by': '$orderBy',
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'company_id': 'path',
                    'include': 'query',
                    'filter': 'query',
                    'top': 'query',
                    'skip': 'query',
                    'order_by': 'query',
                    'x_avalara_client': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': '2.0',
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )

    @avalara_retry_oauth(max_retry_attempts=2)
    def create_cert_express_invitation(
        self,
        company_id,
        customer_code,
        **kwargs
    ):
        """Create a CertExpress invitation  # noqa: E501

        Creates an invitation for a customer to self-report certificates using the CertExpress website.                This invitation is delivered by your choice of method, or you can present a hyperlink to the user  directly in your connector.  Your customer will be redirected to https://app.certexpress.com/ where  they can follow a step-by-step guide to enter information about their exemption certificates.  The  certificates entered will be recorded and automatically linked to their customer record.                The [CertExpress website](https://app.certexpress.com/home) is available for customers to use at any time.  Using CertExpress with this API will ensure that your certificates are automatically linked correctly into  your company so that they can be used for tax exemptions.                Before you can use any exemption certificates endpoints, you must set up your company for exemption certificate data storage.  Companies that do not have this storage system set up will see `CertCaptureNotConfiguredError` when they call exemption   certificate related APIs. To check if this is set up for a company, call `GetCertificateSetup`.  To request setup of exemption   certificate storage for this company, call `RequestCertificateSetup`.  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, BatchServiceAdmin, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin. * This API depends on the following active services:*Required* (all):  AvaTaxPro.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_cert_express_invitation(company_id, customer_code, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (int): The unique ID number of the company that will record certificates
            customer_code (str): The number of the customer where the request is sent to

        Keyword Args:
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            body ([CreateCertExpressInvitationModel]): the requests to send out to customers. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [CertExpressInvitationStatusModel]
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_id'] = \
            company_id
        kwargs['customer_code'] = \
            customer_code
        return self.create_cert_express_invitation_endpoint.call_with_http_info(**kwargs)

    @avalara_retry_oauth(max_retry_attempts=2)
    def get_cert_express_invitation(
        self,
        company_id,
        customer_code,
        id,
        **kwargs
    ):
        """Retrieve a single CertExpress invitation  # noqa: E501

        Retrieve an existing CertExpress invitation sent to a customer.                A CertExpression invitation allows a customer to follow a helpful step-by-step guide to provide information  about their certificates.  This step by step guide allows the customer to complete and upload the full  certificate in a convenient, friendly web browser experience.  When the customer completes their certificates,  they will automatically be recorded to your company and linked to the customer record.                The [CertExpress website](https://app.certexpress.com/home) is available for customers to use at any time.  Using CertExpress with this API will ensure that your certificates are automatically linked correctly into  your company so that they can be used for tax exemptions.                Before you can use any exemption certificates endpoints, you must set up your company for exemption certificate data storage.  Companies that do not have this storage system set up will see `CertCaptureNotConfiguredError` when they call exemption   certificate related APIs. To check if this is set up for a company, call `GetCertificateSetup`.  To request setup of exemption   certificate storage for this company, call `RequestCertificateSetup`.  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, BatchServiceAdmin, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser. * This API depends on the following active services:*Required* (all):  AvaTaxPro.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cert_express_invitation(company_id, customer_code, id, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (int): The unique ID number of the company that issued this invitation
            customer_code (str): The number of the customer where the request is sent to
            id (int): The unique ID number of this CertExpress invitation

        Keyword Args:
            include (str): OPTIONAL: A comma separated list of special fetch options.  No options are defined at this time.. [optional]
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CertExpressInvitationModel
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_id'] = \
            company_id
        kwargs['customer_code'] = \
            customer_code
        kwargs['id'] = \
            id
        return self.get_cert_express_invitation_endpoint.call_with_http_info(**kwargs)

    @avalara_retry_oauth(max_retry_attempts=2)
    def list_cert_express_invitations(
        self,
        company_id,
        **kwargs
    ):
        """List CertExpress invitations  # noqa: E501

        Retrieve CertExpress invitations sent by this company.                A CertExpression invitation allows a customer to follow a helpful step-by-step guide to provide information  about their certificates.  This step by step guide allows the customer to complete and upload the full  certificate in a convenient, friendly web browser experience.  When the customer completes their certificates,  they will automatically be recorded to your company and linked to the customer record.                The [CertExpress website](https://app.certexpress.com/home) is available for customers to use at any time.  Using CertExpress with this API will ensure that your certificates are automatically linked correctly into  your company so that they can be used for tax exemptions.                Before you can use any exemption certificates endpoints, you must set up your company for exemption certificate data storage.  Companies that do not have this storage system set up will see `CertCaptureNotConfiguredError` when they call exemption   certificate related APIs. To check if this is set up for a company, call `GetCertificateSetup`.  To request setup of exemption   certificate storage for this company, call `RequestCertificateSetup`.  ### Security Policies  * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, BatchServiceAdmin, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser. * This API depends on the following active services:*Required* (all):  AvaTaxPro.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_cert_express_invitations(company_id, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (int): The unique ID number of the company that issued this invitation

        Keyword Args:
            include (str): OPTIONAL: A comma separated list of special fetch options.                             No options are defined at this time.. [optional]
            filter (str): A filter statement to identify specific records to retrieve.  For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* companyId, customer, coverLetter, exposureZones, exemptReasons, requestLink. [optional]
            top (int): If nonzero, return no more than this number of results.  Used with `$skip` to provide pagination for large datasets.  Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.. [optional]
            skip (int): If nonzero, skip this number of results before returning data.  Used with `$top` to provide pagination for large datasets.. [optional]
            order_by (str): A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.. [optional]
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CertExpressInvitationModelFetchResult
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['company_id'] = \
            company_id
        return self.list_cert_express_invitations_endpoint.call_with_http_info(**kwargs)

