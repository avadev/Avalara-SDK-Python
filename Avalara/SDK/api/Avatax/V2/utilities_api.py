"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.api_client import ApiClient, Endpoint as _Endpoint
from Avalara.SDK.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from Avalara.SDK.model.Avatax.V2.ping_result_model import PingResultModel
from Avalara.SDK.model.Avatax.V2.subscription_model_fetch_result import SubscriptionModelFetchResult
from Avalara.SDK.exceptions import ApiTypeError, ApiValueError, ApiException
from Avalara.SDK.oauth_helper import avalara_retry_oauth

class UtilitiesApi(object):

    def __init__(self, api_client):
        self.__set_configuration(api_client)
    
    def __verify_api_client(self,api_client):
        if api_client is None:
            raise ApiValueError("APIClient not defined")
    
    def __set_configuration(self, api_client):
        self.__verify_api_client(api_client)
        api_client.set_sdk_version("0.1.1")
        self.api_client = api_client
		
        self.list_my_subscriptions_endpoint = _Endpoint(
            settings={
                'response_type': (SubscriptionModelFetchResult,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/avatax/utilities/subscriptions',
                'operation_id': 'list_my_subscriptions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_avalara_client',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_avalara_client':
                        (str,),
                },
                'attribute_map': {
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'x_avalara_client': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': '2.0',
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )
        self.ping_endpoint = _Endpoint(
            settings={
                'response_type': (PingResultModel,),
                'auth': [
                    'Bearer',
                    'OAuth'
                ],
                'endpoint_path': '/avatax/utilities/ping',
                'operation_id': 'ping',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_avalara_client',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_avalara_client':
                        (str,),
                },
                'attribute_map': {
                    'x_avalara_client': 'X-Avalara-Client',
                },
                'location_map': {
                    'x_avalara_client': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'avalara-version': '2.0',
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            required_scopes='avatax_api'
        )

    @avalara_retry_oauth(max_retry_attempts=2)
    def list_my_subscriptions(
        self,
        **kwargs
    ):
        """List all services to which the current user is subscribed  # noqa: E501

        Returns the list of all subscriptions enabled for the currently logged in user.                This API will return an error if it is called with invalid authentication credentials.                This API is intended to help you determine whether you have the necessary subscription to use certain API calls  within AvaTax.  You can examine the subscriptions returned from this API call to look for a particular product  or subscription to provide useful information to the current user as to whether they are entitled to use  specific features of AvaTax.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_my_subscriptions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SubscriptionModelFetchResult
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_my_subscriptions_endpoint.call_with_http_info(**kwargs)

    @avalara_retry_oauth(max_retry_attempts=2)
    def ping(
        self,
        **kwargs
    ):
        """Tests connectivity and version of the service  # noqa: E501

        Check connectivity to AvaTax and return information about the AvaTax API server.                This API is intended to help you verify that your connection is working.  This API will always succeed and will  never return a error.  It provides basic information about the server you connect to:                * `version` - The version number of the AvaTax API server that responded to your request.  The AvaTax API version number is updated once per month during Avalara's update process.  * `authenticated` - A boolean flag indicating whether or not you sent valid credentials with your API request.  * `authenticationType` - If you provided valid credentials to the API, this field will tell you whether you used Bearer, Username, or LicenseKey authentication.  * `authenticatedUserName` - If you provided valid credentials to the API, this field will tell you the username of the currently logged in user.  * `authenticatedUserId` - If you provided valid credentials to the API, this field will tell you the user ID of the currently logged in user.  * `authenticatedAccountId` - If you provided valid credentials to the API, this field will contain the account ID of the currently logged in user.                This API helps diagnose connectivity problems between your application and AvaTax; you may call this API even  if you do not have verified connection credentials.  If this API fails, either your computer is not connected to  the internet, or there is a routing problem between your office and Avalara, or the Avalara server is not available.  For more information on the uptime of AvaTax, please see [Avalara's AvaTax Status Page](https://status.avalara.com/).  ### Security Policies  * This API may be called without providing authentication credentials.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ping(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_avalara_client (str): Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) .. [optional] if omitted the server will use the default value of "Swagger UI; 22.7.0; Custom; 1.0"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PingResultModel
                If the method is called asynchronously, returns the request
                thread.
        """
        self.__verify_api_client(self.api_client)
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.ping_endpoint.call_with_http_info(**kwargs)

