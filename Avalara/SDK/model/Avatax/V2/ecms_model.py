"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError


def lazy_import():
    from Avalara.SDK.model.Avatax.V2.ecms_detail_model import EcmsDetailModel
    globals()['EcmsDetailModel'] = EcmsDetailModel


class EcmsModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('exempt_cert_type_id',): {
            'BLANKET': "Blanket",
            'SINGLEUSE': "SingleUse",
        },
        ('exempt_cert_status_id',): {
            'INACTIVE': "Inactive",
            'ACTIVE': "Active",
            'EXPIRED': "Expired",
            'REVOKED': "Revoked",
        },
        ('exempt_cert_review_status_id',): {
            'PENDING': "Pending",
            'ACCEPTED': "Accepted",
            'REJECTED': "Rejected",
        },
    }

    validations = {
        ('customer_code',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('regions_applicable',): {
            'max_length': 200,
            'min_length': 0,
        },
        ('customer_name',): {
            'max_length': 100,
            'min_length': 0,
        },
        ('address1',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('address2',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('address3',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('city',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('postal_code',): {
            'max_length': 10,
            'min_length': 0,
        },
        ('document_ref_no',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('business_type_other_description',): {
            'max_length': 255,
            'min_length': 0,
        },
        ('exempt_reason_id',): {
            'max_length': 1,
            'min_length': 0,
        },
        ('exempt_reason_other_description',): {
            'max_length': 255,
            'min_length': 0,
        },
        ('ava_cert_id',): {
            'max_length': 10,
            'min_length': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'exempt_cert_id': (int,),  # noqa: E501
            'company_id': (int,),  # noqa: E501
            'customer_code': (str,),  # noqa: E501
            'region': (str,),  # noqa: E501
            'country': (str,),  # noqa: E501
            'exempt_cert_type_id': (str,),  # noqa: E501
            'business_type_id': (int,),  # noqa: E501
            'regions_applicable': (str,),  # noqa: E501
            'exempt_cert_status_id': (str,),  # noqa: E501
            'country_issued': (str,),  # noqa: E501
            'customer_name': (str,),  # noqa: E501
            'address1': (str,),  # noqa: E501
            'address2': (str,),  # noqa: E501
            'address3': (str,),  # noqa: E501
            'city': (str,),  # noqa: E501
            'postal_code': (str,),  # noqa: E501
            'document_ref_no': (str,),  # noqa: E501
            'business_type_other_description': (str,),  # noqa: E501
            'exempt_reason_id': (str,),  # noqa: E501
            'exempt_reason_other_description': (str,),  # noqa: E501
            'effective_date': (datetime,),  # noqa: E501
            'created_date': (datetime,),  # noqa: E501
            'last_transaction_date': (datetime,),  # noqa: E501
            'expiry_date': (datetime,),  # noqa: E501
            'created_user_id': (int,),  # noqa: E501
            'modified_date': (datetime,),  # noqa: E501
            'modified_user_id': (int,),  # noqa: E501
            'ava_cert_id': (str,),  # noqa: E501
            'exempt_cert_review_status_id': (str,),  # noqa: E501
            'details': ([EcmsDetailModel],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'exempt_cert_id': 'exemptCertId',  # noqa: E501
        'company_id': 'companyId',  # noqa: E501
        'customer_code': 'customerCode',  # noqa: E501
        'region': 'region',  # noqa: E501
        'country': 'country',  # noqa: E501
        'exempt_cert_type_id': 'exemptCertTypeId',  # noqa: E501
        'business_type_id': 'businessTypeId',  # noqa: E501
        'regions_applicable': 'regionsApplicable',  # noqa: E501
        'exempt_cert_status_id': 'exemptCertStatusId',  # noqa: E501
        'country_issued': 'countryIssued',  # noqa: E501
        'customer_name': 'customerName',  # noqa: E501
        'address1': 'address1',  # noqa: E501
        'address2': 'address2',  # noqa: E501
        'address3': 'address3',  # noqa: E501
        'city': 'city',  # noqa: E501
        'postal_code': 'postalCode',  # noqa: E501
        'document_ref_no': 'documentRefNo',  # noqa: E501
        'business_type_other_description': 'businessTypeOtherDescription',  # noqa: E501
        'exempt_reason_id': 'exemptReasonId',  # noqa: E501
        'exempt_reason_other_description': 'exemptReasonOtherDescription',  # noqa: E501
        'effective_date': 'effectiveDate',  # noqa: E501
        'created_date': 'createdDate',  # noqa: E501
        'last_transaction_date': 'lastTransactionDate',  # noqa: E501
        'expiry_date': 'expiryDate',  # noqa: E501
        'created_user_id': 'createdUserId',  # noqa: E501
        'modified_date': 'modifiedDate',  # noqa: E501
        'modified_user_id': 'modifiedUserId',  # noqa: E501
        'ava_cert_id': 'avaCertId',  # noqa: E501
        'exempt_cert_review_status_id': 'exemptCertReviewStatusId',  # noqa: E501
        'details': 'details',  # noqa: E501
    }

    read_only_vars = {
        'last_transaction_date',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, exempt_cert_id, company_id, customer_code, region, country, exempt_cert_type_id, business_type_id, regions_applicable, exempt_cert_status_id, country_issued, *args, **kwargs):  # noqa: E501
        """EcmsModel - a model defined in OpenAPI

        Args:
            exempt_cert_id (int): The calc_id associated with a certificate in CertCapture.
            company_id (int): Company ID
            customer_code (str): Customer code
            region (str): Name or ISO 3166 code identifying the region within the country.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.
            country (str): Name or ISO 3166 code identifying the country.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
            exempt_cert_type_id (str): The type of exemption certificate. Permitted values are: Blanket and Single.
            business_type_id (int): Business type the customer belongs to.
            regions_applicable (str): A list of applicable regions for this exempt certificate.                To list more than one applicable region, separate the list of region codes with commas.
            exempt_cert_status_id (str): Status for this exempt certificate
            country_issued (str): Name or ISO 3166 code identifying the country that issued this ECMS certificate.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            customer_name (str): Customer name. [optional]  # noqa: E501
            address1 (str): Address line 1. [optional]  # noqa: E501
            address2 (str): Address line 2. [optional]  # noqa: E501
            address3 (str): Address line 3. [optional]  # noqa: E501
            city (str): City. [optional]  # noqa: E501
            postal_code (str): Postal code / zip code. [optional]  # noqa: E501
            document_ref_no (str): Document Reference Number, in the case of single-use exemption certificates, the DocumentCode or PurchaseOrderNo to which the certificate should apply.. [optional]  # noqa: E501
            business_type_other_description (str): Other description for this business type. [optional]  # noqa: E501
            exempt_reason_id (str): Exempt reason associated with the certificate, coded by CustomerUsageType.  Example: A - Federal Government.. [optional]  # noqa: E501
            exempt_reason_other_description (str): Other description for exempt reason i.e. Populated on if exemptReasonId is 'L' - Other.. [optional]  # noqa: E501
            effective_date (datetime): Effective date for this exempt certificate. [optional]  # noqa: E501
            created_date (datetime): Date when this exempt certificate was created. [optional]  # noqa: E501
            last_transaction_date (datetime): Date when last transaction with this exempt certificate happened. [optional]  # noqa: E501
            expiry_date (datetime): When this exempt certificate will expire. [optional]  # noqa: E501
            created_user_id (int): User that creates the certificate. [optional]  # noqa: E501
            modified_date (datetime): Date when this exempt certificate was modified. [optional]  # noqa: E501
            modified_user_id (int): Who modified this exempt certificate. [optional]  # noqa: E501
            ava_cert_id (str): If the certificate record was synced from an AvaTax Certs account(as opposed to being entered in ECMS directly),  the unique AvaTax Certs identifier for the certificate record. Usually same as the Id of a Certificate.. [optional]  # noqa: E501
            exempt_cert_review_status_id (str): Review status for this exempt certificate. [optional]  # noqa: E501
            details ([EcmsDetailModel]): Exempt Cert details. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.exempt_cert_id = exempt_cert_id
        self.company_id = company_id
        self.customer_code = customer_code
        self.region = region
        self.country = country
        self.exempt_cert_type_id = exempt_cert_type_id
        self.business_type_id = business_type_id
        self.regions_applicable = regions_applicable
        self.exempt_cert_status_id = exempt_cert_status_id
        self.country_issued = country_issued
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, exempt_cert_id, company_id, customer_code, region, country, exempt_cert_type_id, business_type_id, regions_applicable, exempt_cert_status_id, country_issued, *args, **kwargs):  # noqa: E501
        """EcmsModel - a model defined in OpenAPI

        Args:
            exempt_cert_id (int): The calc_id associated with a certificate in CertCapture.
            company_id (int): Company ID
            customer_code (str): Customer code
            region (str): Name or ISO 3166 code identifying the region within the country.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.
            country (str): Name or ISO 3166 code identifying the country.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
            exempt_cert_type_id (str): The type of exemption certificate. Permitted values are: Blanket and Single.
            business_type_id (int): Business type the customer belongs to.
            regions_applicable (str): A list of applicable regions for this exempt certificate.                To list more than one applicable region, separate the list of region codes with commas.
            exempt_cert_status_id (str): Status for this exempt certificate
            country_issued (str): Name or ISO 3166 code identifying the country that issued this ECMS certificate.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            customer_name (str): Customer name. [optional]  # noqa: E501
            address1 (str): Address line 1. [optional]  # noqa: E501
            address2 (str): Address line 2. [optional]  # noqa: E501
            address3 (str): Address line 3. [optional]  # noqa: E501
            city (str): City. [optional]  # noqa: E501
            postal_code (str): Postal code / zip code. [optional]  # noqa: E501
            document_ref_no (str): Document Reference Number, in the case of single-use exemption certificates, the DocumentCode or PurchaseOrderNo to which the certificate should apply.. [optional]  # noqa: E501
            business_type_other_description (str): Other description for this business type. [optional]  # noqa: E501
            exempt_reason_id (str): Exempt reason associated with the certificate, coded by CustomerUsageType.  Example: A - Federal Government.. [optional]  # noqa: E501
            exempt_reason_other_description (str): Other description for exempt reason i.e. Populated on if exemptReasonId is 'L' - Other.. [optional]  # noqa: E501
            effective_date (datetime): Effective date for this exempt certificate. [optional]  # noqa: E501
            created_date (datetime): Date when this exempt certificate was created. [optional]  # noqa: E501
            last_transaction_date (datetime): Date when last transaction with this exempt certificate happened. [optional]  # noqa: E501
            expiry_date (datetime): When this exempt certificate will expire. [optional]  # noqa: E501
            created_user_id (int): User that creates the certificate. [optional]  # noqa: E501
            modified_date (datetime): Date when this exempt certificate was modified. [optional]  # noqa: E501
            modified_user_id (int): Who modified this exempt certificate. [optional]  # noqa: E501
            ava_cert_id (str): If the certificate record was synced from an AvaTax Certs account(as opposed to being entered in ECMS directly),  the unique AvaTax Certs identifier for the certificate record. Usually same as the Id of a Certificate.. [optional]  # noqa: E501
            exempt_cert_review_status_id (str): Review status for this exempt certificate. [optional]  # noqa: E501
            details ([EcmsDetailModel]): Exempt Cert details. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.exempt_cert_id = exempt_cert_id
        self.company_id = company_id
        self.customer_code = customer_code
        self.region = region
        self.country = country
        self.exempt_cert_type_id = exempt_cert_type_id
        self.business_type_id = business_type_id
        self.regions_applicable = regions_applicable
        self.exempt_cert_status_id = exempt_cert_status_id
        self.country_issued = country_issued
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
