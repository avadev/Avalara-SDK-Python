"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    AvaTax API
    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator) 

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@version    0.1.1
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""

import re  # noqa: F401
import sys  # noqa: F401

from Avalara.SDK.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from Avalara.SDK.exceptions import ApiAttributeError


def lazy_import():
    from Avalara.SDK.model.Avatax.V2.company_parameter_detail_model import CompanyParameterDetailModel
    from Avalara.SDK.model.Avatax.V2.contact_model import ContactModel
    from Avalara.SDK.model.Avatax.V2.customer_supplier_model import CustomerSupplierModel
    from Avalara.SDK.model.Avatax.V2.ecms_model import EcmsModel
    from Avalara.SDK.model.Avatax.V2.item_model import ItemModel
    from Avalara.SDK.model.Avatax.V2.location_model import LocationModel
    from Avalara.SDK.model.Avatax.V2.nexus_model import NexusModel
    from Avalara.SDK.model.Avatax.V2.setting_model import SettingModel
    from Avalara.SDK.model.Avatax.V2.tax_code_model import TaxCodeModel
    from Avalara.SDK.model.Avatax.V2.tax_rule_model import TaxRuleModel
    from Avalara.SDK.model.Avatax.V2.upc_model import UPCModel
    globals()['CompanyParameterDetailModel'] = CompanyParameterDetailModel
    globals()['ContactModel'] = ContactModel
    globals()['CustomerSupplierModel'] = CustomerSupplierModel
    globals()['EcmsModel'] = EcmsModel
    globals()['ItemModel'] = ItemModel
    globals()['LocationModel'] = LocationModel
    globals()['NexusModel'] = NexusModel
    globals()['SettingModel'] = SettingModel
    globals()['TaxCodeModel'] = TaxCodeModel
    globals()['TaxRuleModel'] = TaxRuleModel
    globals()['UPCModel'] = UPCModel


class CompanyModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('rounding_level_id',): {
            'LINE': "Line",
            'DOCUMENT': "Document",
        },
        ('tax_dependency_level_id',): {
            'DOCUMENT': "Document",
            'STATE': "State",
            'TAXREGION': "TaxRegion",
            'ADDRESS': "Address",
        },
    }

    validations = {
        ('name',): {
            'max_length': 50,
            'min_length': 0,
        },
        ('default_country',): {
            'max_length': 2,
            'min_length': 2,
        },
        ('sst_pid',): {
            'max_length': 9,
            'min_length': 0,
        },
        ('company_code',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('taxpayer_id_number',): {
            'max_length': 11,
            'min_length': 0,
        },
        ('base_currency_code',): {
            'max_length': 3,
            'min_length': 0,
        },
        ('business_identification_no',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('moss_id',): {
            'max_length': 25,
            'min_length': 0,
        },
        ('moss_country',): {
            'max_length': 2,
            'min_length': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (int,),  # noqa: E501
            'account_id': (int,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'default_country': (str,),  # noqa: E501
            'parent_company_id': (int,),  # noqa: E501
            'sst_pid': (str,),  # noqa: E501
            'company_code': (str,),  # noqa: E501
            'is_default': (bool,),  # noqa: E501
            'default_location_id': (int,),  # noqa: E501
            'is_active': (bool,),  # noqa: E501
            'taxpayer_id_number': (str,),  # noqa: E501
            'is_fein': (bool,),  # noqa: E501
            'has_profile': (bool,),  # noqa: E501
            'is_reporting_entity': (bool,),  # noqa: E501
            'sst_effective_date': (date,),  # noqa: E501
            'base_currency_code': (str,),  # noqa: E501
            'rounding_level_id': (str,),  # noqa: E501
            'warnings_enabled': (bool,),  # noqa: E501
            'is_test': (bool,),  # noqa: E501
            'tax_dependency_level_id': (str,),  # noqa: E501
            'in_progress': (bool,),  # noqa: E501
            'business_identification_no': (str,),  # noqa: E501
            'created_date': (datetime,),  # noqa: E501
            'created_user_id': (int,),  # noqa: E501
            'modified_date': (datetime,),  # noqa: E501
            'modified_user_id': (int,),  # noqa: E501
            'contacts': ([ContactModel],),  # noqa: E501
            'items': ([ItemModel],),  # noqa: E501
            'locations': ([LocationModel],),  # noqa: E501
            'nexus': ([NexusModel],),  # noqa: E501
            'settings': ([SettingModel],),  # noqa: E501
            'tax_codes': ([TaxCodeModel],),  # noqa: E501
            'tax_rules': ([TaxRuleModel],),  # noqa: E501
            'upcs': ([UPCModel],),  # noqa: E501
            'non_reporting_child_companies': ([CompanyModel],),  # noqa: E501
            'exempt_certs': ([EcmsModel],),  # noqa: E501
            'moss_id': (str,),  # noqa: E501
            'moss_country': (str,),  # noqa: E501
            'parameters': ([CompanyParameterDetailModel],),  # noqa: E501
            'supplierandcustomers': ([CustomerSupplierModel],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'account_id': 'accountId',  # noqa: E501
        'name': 'name',  # noqa: E501
        'default_country': 'defaultCountry',  # noqa: E501
        'parent_company_id': 'parentCompanyId',  # noqa: E501
        'sst_pid': 'sstPid',  # noqa: E501
        'company_code': 'companyCode',  # noqa: E501
        'is_default': 'isDefault',  # noqa: E501
        'default_location_id': 'defaultLocationId',  # noqa: E501
        'is_active': 'isActive',  # noqa: E501
        'taxpayer_id_number': 'taxpayerIdNumber',  # noqa: E501
        'is_fein': 'isFein',  # noqa: E501
        'has_profile': 'hasProfile',  # noqa: E501
        'is_reporting_entity': 'isReportingEntity',  # noqa: E501
        'sst_effective_date': 'sstEffectiveDate',  # noqa: E501
        'base_currency_code': 'baseCurrencyCode',  # noqa: E501
        'rounding_level_id': 'roundingLevelId',  # noqa: E501
        'warnings_enabled': 'warningsEnabled',  # noqa: E501
        'is_test': 'isTest',  # noqa: E501
        'tax_dependency_level_id': 'taxDependencyLevelId',  # noqa: E501
        'in_progress': 'inProgress',  # noqa: E501
        'business_identification_no': 'businessIdentificationNo',  # noqa: E501
        'created_date': 'createdDate',  # noqa: E501
        'created_user_id': 'createdUserId',  # noqa: E501
        'modified_date': 'modifiedDate',  # noqa: E501
        'modified_user_id': 'modifiedUserId',  # noqa: E501
        'contacts': 'contacts',  # noqa: E501
        'items': 'items',  # noqa: E501
        'locations': 'locations',  # noqa: E501
        'nexus': 'nexus',  # noqa: E501
        'settings': 'settings',  # noqa: E501
        'tax_codes': 'taxCodes',  # noqa: E501
        'tax_rules': 'taxRules',  # noqa: E501
        'upcs': 'upcs',  # noqa: E501
        'non_reporting_child_companies': 'nonReportingChildCompanies',  # noqa: E501
        'exempt_certs': 'exemptCerts',  # noqa: E501
        'moss_id': 'mossId',  # noqa: E501
        'moss_country': 'mossCountry',  # noqa: E501
        'parameters': 'parameters',  # noqa: E501
        'supplierandcustomers': 'supplierandcustomers',  # noqa: E501
    }

    read_only_vars = {
        'created_date',  # noqa: E501
        'created_user_id',  # noqa: E501
        'modified_date',  # noqa: E501
        'modified_user_id',  # noqa: E501
        'non_reporting_child_companies',  # noqa: E501
        'exempt_certs',  # noqa: E501
        'parameters',  # noqa: E501
        'supplierandcustomers',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, id, account_id, name, default_country, *args, **kwargs):  # noqa: E501
        """CompanyModel - a model defined in OpenAPI

        Args:
            id (int): The unique ID number of this company.
            account_id (int): The unique ID number of the account this company belongs to.
            name (str): The name of this company, as shown to customers.
            default_country (str): The two character ISO-3166 country code of the default country for this company.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            parent_company_id (int): If this company is fully owned by another company, this is the unique identity of the parent company.. [optional]  # noqa: E501
            sst_pid (str): If this company files Streamlined Sales Tax, this is the PID of this company as defined by the Streamlined Sales Tax governing board.. [optional]  # noqa: E501
            company_code (str): A unique code that references this company within your account.. [optional]  # noqa: E501
            is_default (bool): This flag is true if this company is the default company for this account.  Only one company may be set as the default.. [optional]  # noqa: E501
            default_location_id (int): If set, this is the unique ID number of the default location for this company.. [optional]  # noqa: E501
            is_active (bool): This flag indicates whether tax activity can occur for this company.  Set this flag to true to permit the company to process transactions.. [optional]  # noqa: E501
            taxpayer_id_number (str): For United States companies, this field contains your Taxpayer Identification Number.  This is a nine digit number that is usually called an EIN for an Employer Identification Number if this company is a corporation,  or SSN for a Social Security Number if this company is a person.  This value is required if the address provided is inside the US and if you subscribed to the Avalara Managed Returns or SST Certified Service Provider service. Otherwise it is optional.. [optional]  # noqa: E501
            is_fein (bool): Set this field to true if the taxPayerIdNumber is a FEIN.. [optional]  # noqa: E501
            has_profile (bool): Set this flag to true to give this company its own unique tax profile.  If this flag is true, this company will have its own Nexus, TaxRule, TaxCode, and Item definitions.  If this flag is false, this company will inherit all profile values from its parent.. [optional]  # noqa: E501
            is_reporting_entity (bool): Set this flag to true if this company must file its own tax returns.  For users who have Returns enabled, this flag turns on monthly Worksheet generation for the company.. [optional]  # noqa: E501
            sst_effective_date (date): If this company participates in Streamlined Sales Tax, this is the date when the company joined the SST program.. [optional]  # noqa: E501
            base_currency_code (str): This is the three character ISO-4217 currency code of the default currency used by this company.. [optional]  # noqa: E501
            rounding_level_id (str): Indicates whether this company prefers to round amounts at the document level or line level.. [optional]  # noqa: E501
            warnings_enabled (bool): Set this value to true to receive warnings in API calls via SOAP.. [optional]  # noqa: E501
            is_test (bool): Set this flag to true to indicate that this company is a test company.  If you have Returns enabled, Test companies will not file tax returns and can be used for validation purposes.. [optional]  # noqa: E501
            tax_dependency_level_id (str): Used to apply tax detail dependency at a jurisdiction level.. [optional]  # noqa: E501
            in_progress (bool): Set this value to true to indicate that you are still working to finish configuring this company.  While this value is true, no tax reporting will occur and the company will not be usable for transactions.. [optional]  # noqa: E501
            business_identification_no (str): Business Identification No. [optional]  # noqa: E501
            created_date (datetime): The date when this record was created.. [optional]  # noqa: E501
            created_user_id (int): The User ID of the user who created this record.. [optional]  # noqa: E501
            modified_date (datetime): The date/time when this record was last modified.. [optional]  # noqa: E501
            modified_user_id (int): The user ID of the user who last modified this record.. [optional]  # noqa: E501
            contacts ([ContactModel]): Optional: A list of contacts defined for this company.  To fetch this list, add the query string `?$include=Contacts` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            items ([ItemModel]): Optional: A list of items defined for this company.  To fetch this list, add the query string `?$include=Items` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            locations ([LocationModel]): Optional: A list of locations defined for this company.  To fetch this list, add the query string `?$include=Locations` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            nexus ([NexusModel]): Optional: A list of nexus defined for this company.  To fetch this list, add the query string `?$include=Nexus` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            settings ([SettingModel]): Optional: A list of settings defined for this company.  To fetch this list, add the query string `?$include=Settings` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            tax_codes ([TaxCodeModel]): Optional: A list of tax codes defined for this company.  To fetch this list, add the query string `?$include=TaxCodes` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            tax_rules ([TaxRuleModel]): Optional: A list of tax rules defined for this company.  To fetch this list, add the query string `?$include=TaxRules` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            upcs ([UPCModel]): Optional: A list of UPCs defined for this company.  To fetch this list, add the query string `?$include=UPCs` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            non_reporting_child_companies ([CompanyModel]): Optional: A list of non reporting child companies associated with this company.  To fetch this list, add the query string `?$include=NonReportingChildren` to your URL.. [optional]  # noqa: E501
            exempt_certs ([EcmsModel]): DEPRECATED - Date: 9/15/2017, Version: 17.10, Message: Please use the `ListCertificates` API.  . [optional]  # noqa: E501
            moss_id (str): The unique identifier of the mini-one-stop-shop used for Value Added Tax (VAT) processing.. [optional]  # noqa: E501
            moss_country (str): The country code of the mini-one-stop-shop used for Value Added Tax (VAT) processing.. [optional]  # noqa: E501
            parameters ([CompanyParameterDetailModel]): The parameters of a company. [optional]  # noqa: E501
            supplierandcustomers ([CustomerSupplierModel]): The customers and suppliers of a company. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.account_id = account_id
        self.name = name
        self.default_country = default_country
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, account_id, name, default_country, *args, **kwargs):  # noqa: E501
        """CompanyModel - a model defined in OpenAPI

        Args:
            id (int): The unique ID number of this company.
            account_id (int): The unique ID number of the account this company belongs to.
            name (str): The name of this company, as shown to customers.
            default_country (str): The two character ISO-3166 country code of the default country for this company.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            parent_company_id (int): If this company is fully owned by another company, this is the unique identity of the parent company.. [optional]  # noqa: E501
            sst_pid (str): If this company files Streamlined Sales Tax, this is the PID of this company as defined by the Streamlined Sales Tax governing board.. [optional]  # noqa: E501
            company_code (str): A unique code that references this company within your account.. [optional]  # noqa: E501
            is_default (bool): This flag is true if this company is the default company for this account.  Only one company may be set as the default.. [optional]  # noqa: E501
            default_location_id (int): If set, this is the unique ID number of the default location for this company.. [optional]  # noqa: E501
            is_active (bool): This flag indicates whether tax activity can occur for this company.  Set this flag to true to permit the company to process transactions.. [optional]  # noqa: E501
            taxpayer_id_number (str): For United States companies, this field contains your Taxpayer Identification Number.  This is a nine digit number that is usually called an EIN for an Employer Identification Number if this company is a corporation,  or SSN for a Social Security Number if this company is a person.  This value is required if the address provided is inside the US and if you subscribed to the Avalara Managed Returns or SST Certified Service Provider service. Otherwise it is optional.. [optional]  # noqa: E501
            is_fein (bool): Set this field to true if the taxPayerIdNumber is a FEIN.. [optional]  # noqa: E501
            has_profile (bool): Set this flag to true to give this company its own unique tax profile.  If this flag is true, this company will have its own Nexus, TaxRule, TaxCode, and Item definitions.  If this flag is false, this company will inherit all profile values from its parent.. [optional]  # noqa: E501
            is_reporting_entity (bool): Set this flag to true if this company must file its own tax returns.  For users who have Returns enabled, this flag turns on monthly Worksheet generation for the company.. [optional]  # noqa: E501
            sst_effective_date (date): If this company participates in Streamlined Sales Tax, this is the date when the company joined the SST program.. [optional]  # noqa: E501
            base_currency_code (str): This is the three character ISO-4217 currency code of the default currency used by this company.. [optional]  # noqa: E501
            rounding_level_id (str): Indicates whether this company prefers to round amounts at the document level or line level.. [optional]  # noqa: E501
            warnings_enabled (bool): Set this value to true to receive warnings in API calls via SOAP.. [optional]  # noqa: E501
            is_test (bool): Set this flag to true to indicate that this company is a test company.  If you have Returns enabled, Test companies will not file tax returns and can be used for validation purposes.. [optional]  # noqa: E501
            tax_dependency_level_id (str): Used to apply tax detail dependency at a jurisdiction level.. [optional]  # noqa: E501
            in_progress (bool): Set this value to true to indicate that you are still working to finish configuring this company.  While this value is true, no tax reporting will occur and the company will not be usable for transactions.. [optional]  # noqa: E501
            business_identification_no (str): Business Identification No. [optional]  # noqa: E501
            created_date (datetime): The date when this record was created.. [optional]  # noqa: E501
            created_user_id (int): The User ID of the user who created this record.. [optional]  # noqa: E501
            modified_date (datetime): The date/time when this record was last modified.. [optional]  # noqa: E501
            modified_user_id (int): The user ID of the user who last modified this record.. [optional]  # noqa: E501
            contacts ([ContactModel]): Optional: A list of contacts defined for this company.  To fetch this list, add the query string `?$include=Contacts` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            items ([ItemModel]): Optional: A list of items defined for this company.  To fetch this list, add the query string `?$include=Items` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            locations ([LocationModel]): Optional: A list of locations defined for this company.  To fetch this list, add the query string `?$include=Locations` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            nexus ([NexusModel]): Optional: A list of nexus defined for this company.  To fetch this list, add the query string `?$include=Nexus` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            settings ([SettingModel]): Optional: A list of settings defined for this company.  To fetch this list, add the query string `?$include=Settings` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            tax_codes ([TaxCodeModel]): Optional: A list of tax codes defined for this company.  To fetch this list, add the query string `?$include=TaxCodes` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            tax_rules ([TaxRuleModel]): Optional: A list of tax rules defined for this company.  To fetch this list, add the query string `?$include=TaxRules` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            upcs ([UPCModel]): Optional: A list of UPCs defined for this company.  To fetch this list, add the query string `?$include=UPCs` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.. [optional]  # noqa: E501
            non_reporting_child_companies ([CompanyModel]): Optional: A list of non reporting child companies associated with this company.  To fetch this list, add the query string `?$include=NonReportingChildren` to your URL.. [optional]  # noqa: E501
            exempt_certs ([EcmsModel]): DEPRECATED - Date: 9/15/2017, Version: 17.10, Message: Please use the `ListCertificates` API.  . [optional]  # noqa: E501
            moss_id (str): The unique identifier of the mini-one-stop-shop used for Value Added Tax (VAT) processing.. [optional]  # noqa: E501
            moss_country (str): The country code of the mini-one-stop-shop used for Value Added Tax (VAT) processing.. [optional]  # noqa: E501
            parameters ([CompanyParameterDetailModel]): The parameters of a company. [optional]  # noqa: E501
            supplierandcustomers ([CustomerSupplierModel]): The customers and suppliers of a company. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.account_id = account_id
        self.name = name
        self.default_country = default_country
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
